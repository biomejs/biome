name: Release CLI
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 2-6'
  push:
    branches:
      - main
    paths:
      - packages/@biomejs/biome/package.json

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.version }}
      prerelease: ${{ env.prerelease }}
      nightly: ${{ env.nightly }}
      version_changed: ${{ steps.version.outputs.changed }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Check nightly status
        id: nightly
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: echo "nightly=true" >> $GITHUB_ENV

      - name: Check version changes
        uses: EndBug/version-check@d4be4219408b50d1bbbfd350a47cbcb126878692 # v2
        if: env.nightly != 'true'
        id: version
        with:
          diff-search: true
          file-name: packages/@biomejs/biome/package.json

      - name: Set version name
        if: steps.version.outputs.changed == 'true'
        run: |
          echo "Version change found! New version: ${{ steps.version.outputs.version }} (${{ steps.version.outputs.version_type }})"
          echo "version=${{ steps.version.outputs.version }}" >> $GITHUB_ENV

      - name: Set prerelease status
        if: env.nightly == 'true'
        run: |
          echo "prerelease=true" >> $GITHUB_ENV
          echo "version=$(node packages/@biomejs/biome/scripts/update-nightly-version.mjs)" >> $GITHUB_ENV

  build:
    strategy:
      matrix:
        include:
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            code-target: win32-x64
          - os: windows-2022
            target: aarch64-pc-windows-msvc
            code-target: win32-arm64
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            code-target: linux-x64
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            code-target: linux-arm64
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            code-target: linux-x64-musl
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
            code-target: linux-arm64-musl
          - os: macos-11
            target: x86_64-apple-darwin
            code-target: darwin-x64
          - os: macos-11
            target: aarch64-apple-darwin
            code-target: darwin-arm64

    name: Package ${{ matrix.code-target }}
    runs-on: ${{ matrix.os }}

    needs: check
    if: needs.check.outputs.version_changed == 'true' || needs.check.outputs.nightly == 'true'
    env:
      version: ${{ needs.check.outputs.version }}
    outputs:
      version: ${{ env.version }}
      prerelease: ${{ needs.check.outputs.prerelease }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Install Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: 20

      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.target }}

      - name: Install arm64 toolchain
        if: matrix.code-target == 'linux-arm64' || matrix.code-target == 'linux-arm64-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install musl toolchain
        if: matrix.code-target == 'linux-x64-musl' || matrix.code-target == 'linux-arm64-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Audit crates.io dependencies
        if: matrix.code-target == 'linux-x64'
        run: cargo audit

      - name: Set jemalloc page size for linux-arm64
        if: matrix.code-target == 'linux-arm64'
        run: |
          echo "JEMALLOC_SYS_WITH_LG_PAGE=16" >> $GITHUB_ENV

      # Build the CLI binary
      - name: Build binaries
        run: cargo build -p biome_cli --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
          # Strip all debug symbols from the resulting binaries
          RUSTFLAGS: "-C strip=symbols"
          # Inline the version of the npm package in the CLI binary
          BIOME_VERSION: ${{ env.version }}

      # Copy the CLI binary and rename it to include the name of the target platform
      - name: Copy CLI binary
        if: matrix.os == 'windows-2022'
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/biome.exe ./dist/biome-${{ matrix.code-target }}.exe
      - name: Copy CLI binary
        if: matrix.os != 'windows-2022'
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/biome ./dist/biome-${{ matrix.code-target }}

      # Upload the CLI binary as a build artifact
      - name: Upload CLI artifact
        uses: actions/upload-artifact@1746f4ab65b179e0ea60a494b83293b640dd5bba # v4
        with:
          name: cli-${{ matrix.target }}
          path: ./dist/biome-*
          if-no-files-found: error

  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WASM module for bundlers
        run: wasm-pack build --out-dir ../../packages/@biomejs/wasm-bundler --target bundler --release --scope biomedev crates/biome_wasm
      - name: Build WASM module for node.js
        run: wasm-pack build --out-dir ../../packages/@biomejs/wasm-nodejs --target nodejs --release --scope biomedev crates/biome_wasm
      - name: Build WASM module for the web
        run: wasm-pack build --out-dir ../../packages/@biomejs/wasm-web --target web --release --scope biomedev crates/biome_wasm

      - name: Upload WASM artifact
        uses: actions/upload-artifact@1746f4ab65b179e0ea60a494b83293b640dd5bba # v4
        with:
          name: wasm-${{ matrix.target }}
          path: |
            ./packages/@biomejs/wasm-bundler
            ./packages/@biomejs/wasm-nodejs
            ./packages/@biomejs/wasm-web
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build
      - build-wasm
    environment: npm-publish
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Download CLI artifacts
        uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d # v4
        with:
          pattern: cli-*
          merge-multiple: true
      - name: Download WASM artifacts
        uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d # v4
        with:
          pattern: wasm-*
          merge-multiple: true
          path: packages/@biomejs

      - name: Install Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Set release infos
        if: needs.build.outputs.prerelease == 'true'
        run: node packages/@biomejs/biome/scripts/update-nightly-version.mjs
      - name: Generate npm packages
        run: node packages/@biomejs/biome/scripts/generate-packages.mjs

      - name: Publish npm packages as latest
        run: for package in packages/@biomejs/*; do if [ $package != "packages/@biomejs/js-api" ]; then npm publish $package --tag latest --access public --provenance; fi; done
        if: needs.build.outputs.prerelease != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish npm packages as nightly
        run: for package in packages/@biomejs/*; do if [ $package != "packages/@biomejs/js-api" ]; then npm publish $package --tag nightly --access public --provenance; fi; done
        if: needs.build.outputs.prerelease == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Extract changelog
        run: |
          bash scripts/print-changelog.sh ${{ needs.build.outputs.version }} >| ${{ github.workspace }}/RELEASE_NOTES
      - name: Create GitHub release and tag
        uses: softprops/action-gh-release@9d7c94cfd0a1f3ed45544c887983e9fa900f0564 # v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: CLI v${{ needs.build.outputs.version }}
          tag_name: cli/v${{ needs.build.outputs.version }}
          draft: false
          prerelease: ${{ needs.build.outputs.prerelease == 'true' }}
          body_path: ${{ github.workspace }}/RELEASE_NOTES
          files: |
            biome-*
          fail_on_unmatched_files: true
          generate_release_notes: true
