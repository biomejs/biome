name: Build Biome CLI
description: Build the Biome CLI
inputs:
  version:
    description: The version of Biome
    required: true
    default: "0.0.0"
  code-target:
    description: The OS code target
    required: true
  target:
    description: The OS target
    required: true
  os:
    description: The OS name
    required: true


runs:
  using: composite
  steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Install Node.js
      uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
      with:
        node-version: 20

    - name: Install Rust toolchain
      run: rustup target add ${{ inputs.target }}

    - name: Install arm64 toolchain
      if: inputs.code-target == 'linux-arm64' || inputs.code-target == 'linux-arm64-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Install musl toolchain
      if: inputs.code-target == 'linux-x64-musl' || inputs.code-target == 'linux-arm64-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Audit crates.io dependencies
      if: inputs.code-target == 'linux-x64'
      run: cargo audit

    - name: Set jemalloc page size for linux-arm64
      if: inputs.code-target == 'linux-arm64'
      run: |
        echo "JEMALLOC_SYS_WITH_LG_PAGE=16" >> $GITHUB_ENV

    # Build the CLI binary
    - name: Build binaries
      run: cargo build -p biome_cli --release --target ${{ inputs.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
        # Strip all debug symbols from the resulting binaries
        RUSTFLAGS: "-C strip=symbols -C codegen-units=1"
        # Inline the version of the npm package in the CLI binary
        BIOME_VERSION: ${{ inputs.version }}

    # Copy the CLI binary and rename it to include the name of the target platform
    - name: Copy CLI binary
      if: inputs.os == 'windows-2022'
      run: |
        mkdir dist
        cp target/${{ inputs.target }}/release/biome.exe ./dist/biome-${{ inputs.code-target }}.exe
    - name: Copy CLI binary
      if: inputs.os != 'windows-2022'
      run: |
        mkdir dist
        cp target/${{ inputs.target }}/release/biome ./dist/biome-${{ inputs.code-target }}

    # Upload the CLI binary as a build artifact
    - name: Upload CLI artifact
      uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
      with:
        name: cli-${{ inputs.target }}
        path: ./dist/biome-*
      if-no-files-found: error
