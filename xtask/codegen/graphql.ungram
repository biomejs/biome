// GraphQL Un-Grammar.
//
// This grammar specifies the structure of Rust's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//	 //									-- comment
//	 Name =							-- non-terminal definition
//	 'ident'						-- token (terminal)
//	 A B								-- sequence
//	 A | B							-- alternation
//	 A*									-- zero or more repetition
//	 (A (',' A)* ','?)	-- repetition of node A separated by ',' and allowing a trailing comma
//	 (A (',' A)*)				-- repetition of node A separated by ',' without a trailing comma
//	 A?									-- zero or one repetition
//	 (A)								-- same as A
//	 label:A						-- suggested name for field of AST node

// NOTES
//
// - SyntaxNode, SyntaxToken and SyntaxElement will be stripped from the codegen
// - Bogus nodes are special nodes used to keep track of broken code; they are
//	 not part of the grammar but they will appear inside the green tree
//


///////////////
// BOGUS NODES
///////////////
// SyntaxElement is a generic data structure that is meant to track nodes and tokens
// in cases where we care about both types
//
// As Bogus* node will need to yield both tokens and nodes without discrimination,
// and their children will need to yield nodes and tokens as well.
// For this reason, SyntaxElement = SyntaxElement
SyntaxElement = SyntaxElement

GraphqlBogus = SyntaxElement*
GraphqlBogusDefinition = SyntaxElement*
GraphqlBogusSelection = SyntaxElement*
GraphqlBogusValue = SyntaxElement*
GraphqlBogusType = SyntaxElement*
// Extension that don't add anything
GraphqlBogusExtension = SyntaxElement*

GraphqlName = value: 'graphql_name'

GraphqlRoot =
	bom: 'UNICODE_BOM'?
	definitions: GraphqlDefinitionList
	eof: 'EOF'

GraphqlDefinitionList = AnyGraphqlDefinition*

AnyGraphqlDefinition =
	AnyGraphqlOperationDefinition
	| GraphqlFragmentDefinition
	| GraphqlDirectiveDefinition
	| GraphqlSchemaDefinition
	// Type Definitions
	| GraphqlScalarTypeDefinition
	| GraphqlObjectTypeDefinition
	| GraphqlInterfaceTypeDefinition
	| GraphqlUnionTypeDefinition
	| GraphqlEnumTypeDefinition
	| GraphqlInputObjectTypeDefinition
	| GraphqlBogusDefinition
	// Type System Extensions: we may possible want to group those in an enum outside of 'Definition'
	| AnyGraphqlSchemaExtension
	// Type Extensions
	| GraphqlScalarTypeExtension
	| AnyGraphqlObjectTypeExtension
	| AnyGraphqlInterfaceTypeExtension
	| AnyGraphqlUnionTypeExtension
	| AnyGraphqlEnumTypeExtension
	| AnyGraphqlInputObjectTypeExtension

// https://spec.graphql.org/October2021/#sec-Language.Operations.Query-shorthand
AnyGraphqlOperationDefinition = GraphqlOperationDefinition | GraphqlSelectionSet

// query/mutation/subscription operation
// https://spec.graphql.org/October2021/#sec-Language.Operations
GraphqlOperationDefinition =
	type: GraphqlOperationType
	name: GraphqlName?
	variables: GraphqlVariableDefinitions?
	directives: GraphqlDirectiveList
	selection_set: GraphqlSelectionSet

// https://spec.graphql.org/October2021/#OperationType
GraphqlOperationType =
	value_token: ('query' | 'mutation' | 'subscription')

// describe query selections
// https://spec.graphql.org/October2021/#sec-Selection-Sets
GraphqlSelectionSet =
	'{'
	selections: GraphqlSelectionList
	'}'

GraphqlSelectionList = AnyGraphqlSelection*

// https://spec.graphql.org/October2021/#Selection
AnyGraphqlSelection =
	GraphqlField
	| GraphqlFragmentSpread
	| GraphqlInlineFragment
	| GraphqlBogusSelection

// { "a": b(c: d) @ef {...} }
//   ^^^^^^^^^^^^^^^^^^^^^^
// https://spec.graphql.org/October2021/#sec-Language.Fields
GraphqlField =
	alias: GraphqlAlias?
	name: GraphqlName
	arguments: GraphqlArguments?
	directives: GraphqlDirectiveList
	selection_set: GraphqlSelectionSet?

// { "a": b }
//   ^^^
// https://spec.graphql.org/October2021/#Alias
GraphqlAlias =
	value: GraphqlName
	':'

// { b(c: d) }
//    ^^^^^^
// https://spec.graphql.org/October2021/#sec-Language.Fields
GraphqlArguments =
	'('
	arguments: GraphqlArgumentList
	')'

GraphqlArgumentList = GraphqlArgument*

// { b(c: d) }
//     ^^^^
// https://spec.graphql.org/October2021/#sec-Language.Arguments
GraphqlArgument =
	name: GraphqlName
	':'
	value: AnyGraphqlValue

// { ...a }
//   ^^^^
// https://spec.graphql.org/October2021/#sec-Language.Fragments
GraphqlFragmentSpread =
	'...'
	name: GraphqlFragmentName
	directives: GraphqlDirectiveList

// { ... on A { b } }
//   ^^^^^^^^^^^^^^
// https://spec.graphql.org/October2021/#sec-Inline-Fragments
GraphqlInlineFragment =
	'...'
	type_condition: GraphqlTypeCondition?
	directives: GraphqlDirectiveList
	selection_set: GraphqlSelectionSet

// fragment a on A { b }
// https://spec.graphql.org/October2021/#sec-Language.Fragments
GraphqlFragmentDefinition =
	'fragment'
	name: GraphqlFragmentName
	type_condition: GraphqlTypeCondition
	directives: GraphqlDirectiveList
	selection_set: GraphqlSelectionSet

GraphqlFragmentName =
	name: GraphqlName

GraphqlTypeCondition =
	'on'
	type: GraphqlNamedType

AnyGraphqlValue =
	GraphqlVariable
	| GraphqlStringValue
	| GraphqlFloatValue
	| GraphqlIntValue
	| GraphqlBooleanValue
	| GraphqlNullValue
	| GraphqlEnumValue
	| GraphqlListValue
	| GraphqlObjectValue
	| GraphqlBogusValue

// https://spec.graphql.org/October2021/#sec-String-Value
GraphqlStringValue = 'graphql_string_literal'

// https://spec.graphql.org/October2021/#sec-Float-Value
GraphqlFloatValue = 'graphql_float_literal'

// https://spec.graphql.org/October2021/#sec-Int-Value
GraphqlIntValue = 'graphql_int_literal'

// https://spec.graphql.org/October2021/#sec-Boolean-Value
GraphqlBooleanValue = value_token: ('true' | 'false')

// https://spec.graphql.org/October2021/#sec-Null-Value
GraphqlNullValue = 'null'

// https://spec.graphql.org/October2021/#sec-Enum-Value
GraphqlEnumValue = GraphqlName

// https://spec.graphql.org/October2021/#sec-List-Value
GraphqlListValue =
 '['
 elements: GraphqlListValueElementList
 ']'

GraphqlListValueElementList = AnyGraphqlValue*

// https://spec.graphql.org/October2021/#sec-Input-Object-Values
GraphqlObjectValue =
 '{'
 members: GraphqlObjectValueMemberList
 '}'

GraphqlObjectValueMemberList = GraphqlObjectField*

// https://spec.graphql.org/October2021/#ObjectField
GraphqlObjectField =
	name: GraphqlName
	':'
	value: AnyGraphqlValue

// https://spec.graphql.org/October2021/#sec-Language.Variables
GraphqlVariableDefinitions =
	'('
	elements: GraphqlVariableDefinitionList
	')'

GraphqlVariableDefinitionList = GraphqlVariableDefinition*

// $episode: Episode = JEDI
// https://spec.graphql.org/October2021/#VariableDefinition
GraphqlVariableDefinition =
	variable: GraphqlVariable
	':'
	type: AnyGraphqlType
	default: GraphqlDefaultValue?
	directives: GraphqlDirectiveList

// https://spec.graphql.org/October2021/#Variable
GraphqlVariable =
	'$'
	name: GraphqlName

// https://spec.graphql.org/October2021/#DefaultValue
GraphqlDefaultValue =
	'='
	value: AnyGraphqlValue

// https://spec.graphql.org/October2021/#sec-Language.Variables
AnyGraphqlType =
	AnyGraphqlPrimitiveType
	| GraphqlNonNullType
	| GraphqlBogusType

AnyGraphqlPrimitiveType = GraphqlNamedType | GraphqlListType

// nullable, like String
// https://spec.graphql.org/October2021/#NamedType
GraphqlNamedType =
	name: GraphqlName

// nullable, [String]
// https://spec.graphql.org/October2021/#ListType
GraphqlListType =
	'['
	element: AnyGraphqlType
	']'

// String!
// https://spec.graphql.org/October2021/#NonNullType
GraphqlNonNullType =
	base: AnyGraphqlPrimitiveType
	'!'

// @a(b: c) @d(e: f)
// This is often used as optional in the spec, represented by an empty list
// https://spec.graphql.org/October2021/#sec-Language.Directives
GraphqlDirectiveList =
	GraphqlDirective*

// @a(b: c)
// https://spec.graphql.org/October2021/#Directive
GraphqlDirective =
	'@'
	name: GraphqlName
	arguments: GraphqlArguments?

// "abc" schema {query: Query}
// https://spec.graphql.org/October2021/#sec-Schema
GraphqlSchemaDefinition =
	description: GraphqlDescription?
	'schema'
	directives: GraphqlDirectiveList
	'{'
	root_operation_type: GraphqlRootOperationTypeDefinitionList
	'}'

// schema {query: Query}
//         ^^^^^^^^^^^^
// https://spec.graphql.org/October2021/#sec-Root-Operation-Types
GraphqlRootOperationTypeDefinitionList = GraphqlRootOperationTypeDefinition*

// https://spec.graphql.org/October2021/#sec-Schema-Extension
AnyGraphqlSchemaExtension =
	GraphqlSchemaExtensionWithRootOperationType
	| GraphqlSchemaExtension
	| GraphqlBogusExtension

// extend schema @x {mutation: Mutation}
GraphqlSchemaExtensionWithRootOperationType =
	'extend' 'schema'
	directives: GraphqlDirectiveList
	'{'
	root_operation_type: GraphqlRootOperationTypeDefinitionList
	'}'

// extend schema @xyz
GraphqlSchemaExtension =
	 'extend'
	 'schema'
	 directives: GraphqlDirectiveList

// schema {query: Query}
//         ^^^^^^^^^^^^
// https://spec.graphql.org/October2021/#sec-Root-Operation-Types
GraphqlRootOperationTypeDefinition =
	operation_type: GraphqlOperationType
	':'
	named_type: GraphqlNamedType

// "abc" schema {query: Query}
// ^^^^^
GraphqlDescription =
	GraphqlStringValue

// https://spec.graphql.org/October2021/#sec-Scalars
GraphqlScalarTypeDefinition =
	description: GraphqlDescription?
	'scalar'
	name: GraphqlName
	directives: GraphqlDirectiveList

// https://spec.graphql.org/October2021/#sec-Scalar-Extensions
GraphqlScalarTypeExtension =
	'extend'
	'scalar'
	name: GraphqlName
	directives: GraphqlDirectiveList

// type A implements B {c: d}
// https://spec.graphql.org/October2021/#sec-Objects
GraphqlObjectTypeDefinition =
	description: GraphqlDescription?
	'type'
	name: GraphqlName
	implements: GraphqlImplementsInterfaces?
	directives: GraphqlDirectiveList
	fields: GraphqlFieldsDefinition?

// https://spec.graphql.org/October2021/#sec-Object-Extensions
AnyGraphqlObjectTypeExtension =
	GraphqlObjectTypeExtensionWithFields
	| GraphqlObjectTypeExtensionWithDirectives
	| GraphqlObjectTypeExtension
	| GraphqlBogusExtension

// extend type C implements A @i {e: f}
GraphqlObjectTypeExtensionWithFields =
	'extend'
	'type'
	name: GraphqlName
	implements: GraphqlImplementsInterfaces?
	directives: GraphqlDirectiveList
	fields: GraphqlFieldsDefinition

// extend type C implements A @i
GraphqlObjectTypeExtensionWithDirectives =
	'extend'
	'type'
	name: GraphqlName
	implements: GraphqlImplementsInterfaces?
	directives: GraphqlDirectiveList

// extend type C implements A
GraphqlObjectTypeExtension =
	'extend'
	'type'
	name: GraphqlName
	implements: GraphqlImplementsInterfaces

// extend type C implements
// & A
// & B
// https://spec.graphql.org/October2021/#ImplementsInterfaces
GraphqlImplementsInterfaces =
	'implements'
	'&'?
	interfaces: GraphqlImplementsInterfaceList

// A & B & C
GraphqlImplementsInterfaceList = (GraphqlNamedType ('&' GraphqlNamedType)*)

// type A implements B {c: d}
//                     ^^^^^^
GraphqlFieldsDefinition =
	'{'
	fields: GraphqlFieldDefinitionList
	'}'

GraphqlFieldDefinitionList = GraphqlFieldDefinition*

// "xyz" a(x: y): A @d
// https://spec.graphql.org/October2021/#FieldDefinition
GraphqlFieldDefinition =
	description: GraphqlDescription?
	name: GraphqlName
	arguments: GraphqlArgumentsDefinition?
	':'
	type: AnyGraphqlType
	directives: GraphqlDirectiveList

// "xyz" a(x: y): A @d
//        ^^^^^^
// https://spec.graphql.org/October2021/#sec-Field-Arguments
GraphqlArgumentsDefinition =
	'('
	arguments: GraphqlArgumentDefinitionList
	')'

GraphqlArgumentDefinitionList = GraphqlInputValueDefinition*

// ("xyz" x: y = yyy @d)
// https://spec.graphql.org/October2021/#InputValueDefinition
GraphqlInputValueDefinition =
	description: GraphqlDescription?
	name: GraphqlName
	':'
	type: AnyGraphqlType
	default: GraphqlDefaultValue?
	directives: GraphqlDirectiveList

// "xyz" interface A implements B @d {x: y}
// https://spec.graphql.org/October2021/#sec-Interfaces
GraphqlInterfaceTypeDefinition =
	description: GraphqlDescription?
	'interface'
	name: GraphqlName
	implements: GraphqlImplementsInterfaces?
	directives: GraphqlDirectiveList
	fields: GraphqlFieldsDefinition?

// https://spec.graphql.org/October2021/#sec-Interface-Extensions
AnyGraphqlInterfaceTypeExtension =
	GraphqlInterfaceTypeExtensionWithFields
	| GraphqlInterfaceTypeExtensionWithDirectives
	| GraphqlInterfaceTypeExtension
	| GraphqlBogusExtension

// extend interface A implements B @i {e: f}
GraphqlInterfaceTypeExtensionWithFields =
	'extend'
	'interface'
	name: GraphqlName
	implements: GraphqlImplementsInterfaces?
	directives: GraphqlDirectiveList
	fields: GraphqlFieldsDefinition

// extend interface A implements B @i
GraphqlInterfaceTypeExtensionWithDirectives =
	'extend'
	'interface'
	name: GraphqlName
	implements: GraphqlImplementsInterfaces?
	directives: GraphqlDirectiveList

// extend interface A implements B
GraphqlInterfaceTypeExtension =
	'extend'
	'interface'
	name: GraphqlName
	implements: GraphqlImplementsInterfaces

// union A =
//   | B
//   | C
// https://spec.graphql.org/October2021/#sec-Unions
GraphqlUnionTypeDefinition =
	description: GraphqlDescription?
	'union'
	name: GraphqlName
	directives: GraphqlDirectiveList
	union_members: GraphqlUnionMemberTypes?

// https://spec.graphql.org/October2021/#UnionMemberTypes
GraphqlUnionMemberTypes =
	'='
	'|'?
	members: GraphqlUnionMemberTypeList

// A | B | C
GraphqlUnionMemberTypeList = (GraphqlNamedType ('|' GraphqlNamedType)*)

// https://spec.graphql.org/October2021/#sec-Union-Extensions
AnyGraphqlUnionTypeExtension =
	GraphqlUnionTypeExtensionWithMembers
	| GraphqlUnionTypeExtension
	| GraphqlBogusExtension

// extend union A @d = C | D
GraphqlUnionTypeExtensionWithMembers =
	'extend'
	'union'
	name: GraphqlName
	directives: GraphqlDirectiveList
	union_members: GraphqlUnionMemberTypes

// extend union A @d
GraphqlUnionTypeExtension =
	'extend'
	'union'
	name: GraphqlName
	directives: GraphqlDirectiveList

// "xyz" enum A @d {
//    B
//    C
// }
// https://spec.graphql.org/October2021/#sec-Enums
GraphqlEnumTypeDefinition =
	description: GraphqlDescription?
	'enum'
	name: GraphqlName
	directives: GraphqlDirectiveList
	enum_values: GraphqlEnumValuesDefinition?

// { A }
// https://spec.graphql.org/October2021/#EnumValuesDefinition
GraphqlEnumValuesDefinition =
	'{'
	values: GraphqlEnumValueList
	'}'

GraphqlEnumValueList = GraphqlEnumValueDefinition*

// enum A {
//    "xyz" B @d
// }
// https://spec.graphql.org/October2021/#EnumValueDefinition
GraphqlEnumValueDefinition =
	description: GraphqlDescription?
	value: GraphqlEnumValue
	directives: GraphqlDirectiveList

// https://spec.graphql.org/October2021/#sec-Enum-Extensions
AnyGraphqlEnumTypeExtension =
	GraphqlEnumTypeExtensionWithValues
	| GraphqlEnumTypeExtension
	| GraphqlBogusExtension

// extend enum A @d { Y }
GraphqlEnumTypeExtensionWithValues =
	'extend'
	'enum'
	name: GraphqlName
	directives: GraphqlDirectiveList
	enum_values: GraphqlEnumValuesDefinition

// extend enum A @d
GraphqlEnumTypeExtension =
	'extend'
	'enum'
	name: GraphqlName
	directives: GraphqlDirectiveList

// "xyz" input A @d { x: y }
// https://spec.graphql.org/October2021/#sec-Input-Object
GraphqlInputObjectTypeDefinition =
	description: GraphqlDescription?
	'input'
	name: GraphqlName
	directives: GraphqlDirectiveList
	input_fields: GraphqlInputFieldsDefinition?

// https://spec.graphql.org/October2021/#InputFieldsDefinition
GraphqlInputFieldsDefinition =
	'{'
	fields: GraphqlInputFieldList
	'}'

GraphqlInputFieldList = GraphqlInputValueDefinition*

// https://spec.graphql.org/October2021/#sec-Input-Object-Extensions
AnyGraphqlInputObjectTypeExtension =
	GraphqlInputObjectTypeExtensionWithFields
	| GraphqlInputObjectTypeExtension
	| GraphqlBogusExtension

// extend input A @d { x: y }
GraphqlInputObjectTypeExtensionWithFields =
	'extend'
	'input'
	name: GraphqlName
	directives: GraphqlDirectiveList
	input_fields: GraphqlInputFieldsDefinition

// extend input A @d
GraphqlInputObjectTypeExtension =
	'extend'
	'input'
	name: GraphqlName
	directives: GraphqlDirectiveList

// directive @a(b: c) repeatable on
//   | QUERY
//   | MUTATION
// https://spec.graphql.org/October2021/#sec-Type-System.Directives
GraphqlDirectiveDefinition =
	description: GraphqlDescription?
	'directive'
	'@'
	name: GraphqlName
	arguments: GraphqlArgumentsDefinition?
	'repeatable'?
	'on'
	'|'?
	locations: GraphqlDirectiveLocationList

// https://spec.graphql.org/October2021/#DirectiveLocations
GraphqlDirectiveLocationList =
	(GraphqlDirectiveLocation ('|' GraphqlDirectiveLocation)*)

// https://spec.graphql.org/October2021/#DirectiveLocation
GraphqlDirectiveLocation =
	value_token: (
		'QUERY'
		| 'MUTATION'
		| 'SUBSCRIPTION'
		| 'FIELD'
		| 'FRAGMENT_DEFINITION'
		| 'FRAGMENT_SPREAD'
		| 'INLINE_FRAGMENT'
		| 'VARIABLE_DEFINITION'
		| 'SCHEMA'
		| 'SCALAR'
		| 'OBJECT'
		| 'FIELD_DEFINITION'
		| 'ARGUMENT_DEFINITION'
		| 'INTERFACE'
		| 'UNION'
		| 'ENUM'
		| 'ENUM_VALUE'
		| 'INPUT_OBJECT'
		| 'INPUT_FIELD_DEFINITION'
	)
