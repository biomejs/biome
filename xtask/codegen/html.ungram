// HTML Un-Grammar.
//
// This grammar specifies the structure of Rust's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          				-- comment
//   Name =      				-- non-terminal definition
//   'ident'     				-- token (terminal)
//   A B         				-- sequence
//   A | B       				-- alternation
//   A*          				-- zero or more repetition
//   (A (',' A)* ','?)	-- repetition of node A separated by ',' and allowing a trailing comma
//   (A (',' A)*)	      -- repetition of node A separated by ',' without a trailing comma
//   A?          				-- zero or one repetition
//   (A)         				-- same as A
//   label:A     				-- suggested name for field of AST node

// NOTES
//
// - SyntaxNode, SyntaxToken and SyntaxElement will be stripped from the codegen
// - Bogus nodes are special nodes used to keep track of broken code; they are
//   not part of the grammar but they will appear inside the green tree


///////////////
// BOGUS NODES
///////////////
// SyntaxElement is a generic data structure that is meant to track nodes and tokens
// in cases where we care about both types
//
// As Bogus* node will need to yield both tokens and nodes without discrimination,
// and their children will need to yield nodes and tokens as well.
// For this reason, SyntaxElement = SyntaxElement
SyntaxElement = SyntaxElement

HtmlBogus = SyntaxElement*
HtmlBogusElement = SyntaxElement*
HtmlBogusAttribute = SyntaxElement*
AstroBogusFrontmatter = SyntaxElement*
HtmlBogusTextExpression = SyntaxElement*

HtmlRoot =
	bom: 'UNICODE_BOM'?
	frontmatter: AnyAstroFrontmatterElement?
	directive: HtmlDirective?
	html: HtmlElementList
	eof: 'EOF'

// <!DOCTYPE html>
// ^^^^^^^^^^^^^^^
HtmlDirective =
	'<'
	'!'
	doctype: 'doctype'
	html: 'html'?
	quirk: 'html_literal'?
	public_id: 'html_string_literal'?
	system_id: 'html_string_literal'?
	'>'

// ==================================
// Elements (AKA tags)
// ==================================

HtmlElementList = AnyHtmlElement*

AnyHtmlElement =
	HtmlSelfClosingElement
	| HtmlElement
	| AnyHtmlContent
	| HtmlCdataSection
	| HtmlBogusElement

AnyHtmlContent =
	HtmlContent
	| HtmlEmbeddedContent
	| AnyHtmlTextExpression

AnyHtmlTextExpression =
	HtmlDoubleTextExpression
	| HtmlSingleTextExpression
	| HtmlBogusTextExpression


// {{ expression }}
// ^^^^^^^^^^^^^^^^
HtmlDoubleTextExpression =
	'{{'
	expression: HtmlTextExpression
	'}}'

// {expression}
// ^^^^^^^^^^^^
HtmlSingleTextExpression =
	'{'
	expression: HtmlTextExpression
	'}'

HtmlTextExpression = 'html_literal'


// <a />
HtmlSelfClosingElement =
	'<'
	name: HtmlTagName
	attributes: HtmlAttributeList
	'/'?
	'>'

HtmlElement =
	opening_element: HtmlOpeningElement
	children: HtmlElementList
	closing_element: HtmlClosingElement


// <a href="">
// ^^        ^
HtmlOpeningElement =
	'<'
	name: HtmlTagName
	attributes: HtmlAttributeList
	'>'

// </a>
HtmlClosingElement =
	'<'
	'/'
	name: HtmlTagName
	'>'

// <![CDATA[example]]>
// Reference: https://html.spec.whatwg.org/multipage/syntax.html#cdata-sections
HtmlCdataSection =
	'<![CDATA['
	content: 'html_literal'
	']]>'

AnyAstroFrontmatterElement =
	AstroFrontmatterElement
	| AstroBogusFrontmatter

AstroFrontmatterElement =
	l_fence: '---'
	content: AstroEmbeddedContent
	r_fence: '---'

AstroEmbeddedContent =
	content: 'html_literal'?

// ==================================
// Attributes
// ==================================

HtmlAttributeList = AnyHtmlAttribute*

AnyHtmlAttribute =
	HtmlAttribute
	| HtmlDoubleTextExpression
	| AnyVueDirective
	| HtmlBogusAttribute

// <a href="">
//    ^^^^^^^
HtmlAttribute =
	name: HtmlAttributeName
	initializer: HtmlAttributeInitializerClause?


// <a href="">
//        ^^^
HtmlAttributeInitializerClause =
	'='
	value: AnyHtmlAttributeInitializer


AnyHtmlAttributeInitializer =
	HtmlString
	| HtmlSingleTextExpression



HtmlString = value: 'html_string_literal'
HtmlTagName = value: 'html_literal'
HtmlAttributeName = value: 'html_literal'
HtmlContent = value: 'html_literal'
HtmlEmbeddedContent = value: 'html_literal'

// ==================================
// Vue
// ==================================

// reference: https://vuejs.org/guide/essentials/template-syntax

AnyVueDirective =
	VueDirective
	| VueVBindShorthandDirective
	| VueVOnShorthandDirective

// <div v-bind:href="url" />
//      ^^^^^^^^^^^^^^^^^
VueDirective =
  name: 'html_literal'
  arg: VueDirectiveArgument?
  modifiers: VueModifierList
	initializer: HtmlAttributeInitializerClause?

// <div v-bind:href="url" />
//            ^^^^^
VueDirectiveArgument =
	':'
	arg: AnyVueDirectiveArgument

// <div :href="url" />
//      ^^^^^^^^^^^
VueVBindShorthandDirective =
	arg: VueDirectiveArgument
	modifiers: VueModifierList
	initializer: HtmlAttributeInitializerClause?

// <div @click="onClick" />
//      ^^^^^^^^^^^^^^^^
VueVOnShorthandDirective =
	'@'
	arg: AnyVueDirectiveArgument
	modifiers: VueModifierList
	initializer: HtmlAttributeInitializerClause?

AnyVueDirectiveArgument =
	VueStaticArgument
	| VueDynamicArgument

// <div v-bind:href="url" />
//             ^^^^
VueStaticArgument =
	name: 'html_literal'

// <div v-bind:[field]="url" />
//             ^^^^^^^
VueDynamicArgument =
	'['
	name: 'html_literal'
	']'

VueModifierList = VueModifier*

// <div @click.prevent="onClick" />
//            ^^^^^^^^
VueModifier =
	'.'
	modifier: 'html_literal'
