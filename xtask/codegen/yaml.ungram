// YAML Un-Grammar.
//
// This grammar specifies the structure of Rust's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //                          -- comment
//   Name =                      -- non-terminal definition
//   'ident'                     -- token (terminal)
//   A B                         -- sequence
//   A | B                       -- alternation
//   A*                          -- zero or more repetition
//   (A (',' A)* ','?)            -- repetition of node A separated by ',' and allowing a trailing comma
//   (A (',' A)*)                -- repetition of node A separated by ',' without a trailing comma
//   A?                          -- zero or one repetition
//   (A)                         -- same as A
//   label:A                     -- suggested name for field of AST node

// NOTES
//
// - SyntaxNode, SyntaxToken and SyntaxElement will be stripped from the codegen
// - Bogus nodes are special nodes used to keep track of broken code; they are
//   not part of the grammar but they will appear inside the green tree

SyntaxElement = SyntaxElement

YamlBogus = SyntaxElement*
YamlBogusBlockNode = SyntaxElement*
YamlBogusBlockMapEntry = SyntaxElement*
YamlBogusBlockHeader = SyntaxElement*
YamlBogusFlowNode = SyntaxElement*

// https://yaml.org/spec/1.2.2/#92-streams
YamlRoot =
	documents: YamlDocumentList
	eof: 'EOF'

YamlDocumentList = AnyYamlDocument*

AnyYamlDocument =
	YamlDocument
	| YamlBogus

// https://yaml.org/spec/1.2.2/#91-documents
YamlDocument =
	// All documents in the same stream must use the same encoding,
	// but documents are allowed to re-specify the encoding
	// https://yaml.org/spec/1.2.2/#rule-l-document-prefix
	bom: 'UNICODE_BOM'?
	// https://yaml.org/spec/1.2.2/#rule-l-directive-document
	directives: YamlDirectiveList
	// https://yaml.org/spec/1.2.2/#rule-c-directives-end
	'---'?
	node: AnyYamlBlockNode?
	// https://yaml.org/spec/1.2.2/#rule-c-document-end
	'...'?

YamlDirectiveList = YamlDirective*

// Since directive must be parsed in a single line, we must parse it as a single token
// https://yaml.org/spec/1.2.2/#68-directives
// %YAML 1.3
YamlDirective = value: 'directive_literal'

// https://yaml.org/spec/1.2.2/#rule-s-l+block-node
AnyYamlBlockNode =
	AnyYamlBlockInBlockNode
	| YamlFlowInBlockNode
	| YamlBogusBlockNode

// https://yaml.org/spec/1.2.2/#rule-s-l+flow-in-block
YamlFlowInBlockNode =
	'flow_start'
	flow: AnyYamlFlowNode
	'flow_end'

// https://yaml.org/spec/1.2.2/#rule-ns-flow-node
AnyYamlFlowNode =
	YamlFlowJsonNode
	| YamlFlowYamlNode
	| YamlAliasNode
	| YamlBogusFlowNode

// *abc
// https://yaml.org/spec/1.2.2/#rule-c-ns-alias-node
YamlAliasNode = value: 'alias_literal'

// Superset of JSON
// e.g {a: b, c: [d, {e: f}]}
// https://yaml.org/spec/1.2.2/#rule-c-flow-json-node
YamlFlowJsonNode =
	properties: AnyYamlPropertiesCombination?
	content: AnyYamlJsonContent?

// Plain YAML node
// https://yaml.org/spec/1.2.2/#rule-ns-flow-yaml-node
YamlFlowYamlNode =
	properties: AnyYamlPropertiesCombination?
	content: YamlPlainScalar?

// Yaml in JSON style
// e.g. [a, b, {c: d, {e: "f"}: ['g']}]
// https://yaml.org/spec/1.2.2/#rule-c-flow-json-content
AnyYamlJsonContent =
	YamlFlowSequence
	| YamlFlowMapping
	| YamlSingleQuotedScalar
	| YamlDoubleQuotedScalar

// https://yaml.org/spec/1.2.2/#rule-c-flow-sequence
YamlFlowSequence =
	'['
	entries: YamlFlowSequenceEntryList
	']'

// https://yaml.org/spec/1.2.2/#rule-ns-s-flow-seq-entries
YamlFlowSequenceEntryList = (AnyYamlFlowSequenceEntry (',' AnyYamlFlowSequenceEntry)*)

// https://yaml.org/spec/1.2.2/#rule-ns-flow-seq-entry
AnyYamlFlowSequenceEntry =
	AnyYamlFlowNode
	// Compact form for a mapping of single key/value pair
	// e.g. [a, b, c: d, e: f], which is equivalent to [a, b, {c: d}, {e: f}]
	// https://yaml.org/spec/1.2.2/#rule-ns-flow-pair
	| AnyYamlFlowMapEntry

// https://yaml.org/spec/1.2.2/#rule-c-flow-mapping
YamlFlowMapping =
	'{'
	entries: YamlFlowMapEntryList
	'}'

// https://yaml.org/spec/1.2.2/#rule-ns-s-flow-map-entries
YamlFlowMapEntryList = (AnyYamlFlowMapEntry (',' AnyYamlFlowMapEntry)*)

AnyYamlFlowMapEntry =
	YamlFlowMapExplicitEntry
	| YamlFlowMapImplicitEntry

// ? a: b
// https://yaml.org/spec/1.2.2/#rule-ns-flow-map-explicit-entry
YamlFlowMapExplicitEntry =
	'?'
	key: AnyYamlMappingImplicitKey?
	':'?
	value: AnyYamlFlowNode?

// a: b
// https://yaml.org/spec/1.2.2/#rule-ns-flow-map-implicit-entry
YamlFlowMapImplicitEntry =
	key: AnyYamlMappingImplicitKey?
	':'?
	value: AnyYamlFlowNode?

// https://yaml.org/spec/1.2.2/#rule-s-l+block-in-block
AnyYamlBlockInBlockNode =
	YamlBlockSequence
	| YamlBlockMapping
	| YamlFoldedScalar
	| YamlLiteralScalar

// a:
//  - b
//  - c
//  - d
// https://yaml.org/spec/1.2.2/#rule-l+block-sequence
YamlBlockSequence =
	// Indent block
	'sequence_start'
	properties: AnyYamlPropertiesCombination?
	entries: YamlBlockSequenceEntryList
	// Dedent block, that is, go back to parent block's scope
	'sequence_end'

// a:
//  b: c
//  c: d
//  d: e
// https://yaml.org/spec/1.2.2/#rule-l+block-mapping
YamlBlockMapping =
	// Indent block
	'mapping_start'
	properties: AnyYamlPropertiesCombination?
	entries: YamlBlockMapEntryList
	// Dedent block, that is, go back to parent block's scope
	'mapping_end'

// x: |
//  123
//  456
// https://yaml.org/spec/1.2.2/#rule-c-l+literal
YamlLiteralScalar =
	properties: AnyYamlPropertiesCombination?
	'|'
	headers: YamlBlockHeaderList
	content: YamlBlockContent

// x: >
//  123
//  456
// https://yaml.org/spec/1.2.2/#rule-c-l+folded
YamlFoldedScalar =
	properties: AnyYamlPropertiesCombination?
	'>'
	headers: YamlBlockHeaderList
	content: YamlBlockContent

YamlBlockSequenceEntryList = AnyYamlBlockSequenceEntry*

AnyYamlBlockSequenceEntry = YamlBlockSequenceEntry
	| YamlBogus

YamlBlockSequenceEntry =
	'-'
	value: AnyYamlBlockNode?

YamlBlockMapEntryList = AnyYamlBlockMapEntry*

// https://yaml.org/spec/1.2.2/#rule-ns-l-block-map-entry
AnyYamlBlockMapEntry =
	YamlBlockMapExplicitEntry
	| YamlBlockMapImplicitEntry
	| YamlBogusBlockMapEntry

// ? y
// : 10
// https://yaml.org/spec/1.2.2/#rule-c-l-block-map-explicit-entry
YamlBlockMapExplicitEntry =
	'?'
	key: AnyYamlBlockNode?
	':'?
	value: AnyYamlBlockNode?

// https://yaml.org/spec/1.2.2/#rule-ns-l-block-map-implicit-entry
YamlBlockMapImplicitEntry =
	key: AnyYamlMappingImplicitKey?
	':'
	value: AnyYamlBlockNode?

// https://yaml.org/spec/1.2.2/#rule-ns-s-block-map-implicit-key
AnyYamlMappingImplicitKey =
	YamlFlowJsonNode
	| YamlFlowYamlNode

// Block header
// |+9
//  ^^
// https://yaml.org/spec/1.2.2/#rule-c-b-block-header
YamlBlockHeaderList = AnyYamlBlockHeader*

AnyYamlBlockHeader =
	YamlBlockStripIndicator
	| YamlBlockKeepIndicator
	| YamlIndentationIndicator
	| YamlBogusBlockHeader

// x: >-
//     ^
// https://yaml.org/spec/1.2.2/#rule-c-chomping-indicator
YamlBlockStripIndicator = '-'

// x: >+
//     ^
// https://yaml.org/spec/1.2.2/#rule-c-chomping-indicator
YamlBlockKeepIndicator = '+'

// x: >9
//     ^
// https://yaml.org/spec/1.2.2/#rule-c-indentation-indicator
YamlIndentationIndicator = 'indentation_indicator'

// x: >
//  123
//  456
//  ^^^
// https://yaml.org/spec/1.2.2/#rule-l-literal-content
// https://yaml.org/spec/1.2.2/#rule-l-folded-content
YamlBlockContent = value: 'block_content_literal'

// https://yaml.org/spec/1.2.2/#rule-c-ns-properties
AnyYamlPropertiesCombination =
	YamlPropertiesTagFirst
	| YamlPropertiesAnchorFirst

YamlPropertiesTagFirst =
	tag: YamlTagProperty
	anchor: YamlAnchorProperty?

YamlPropertiesAnchorFirst =
	anchor: YamlAnchorProperty
	tag: YamlTagProperty?

// &abc
// https://yaml.org/spec/1.2.2/#rule-c-ns-anchor-property
YamlAnchorProperty = value: 'anchor_property_literal'

// !<tag:yaml.org,2002:str>
// https://yaml.org/spec/1.2.2/#rule-c-ns-tag-property
YamlTagProperty = value: 'tag_property_literal'

// Flow scalars
// https://yaml.org/spec/1.2.2/#73-flow-scalar-styles
// "abc"
// https://yaml.org/spec/1.2.2/#rule-c-double-quoted
YamlDoubleQuotedScalar = value: 'double_quoted_literal'
// 'abc'
// https://yaml.org/spec/1.2.2/#rule-c-single-quoted
YamlSingleQuotedScalar = value: 'single_quoted_literal'
// Just a plain yaml string
// abc
// https://yaml.org/spec/1.2.2/#rule-ns-plain
YamlPlainScalar = value: 'plain_literal'
