// HTML Un-Grammar.
//
// This grammar specifies the structure of Rust's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          				-- comment
//   Name =      				-- non-terminal definition
//   'ident'     				-- token (terminal)
//   A B         				-- sequence
//   A | B       				-- alternation
//   A*          				-- zero or more repetition
//   (A (',' A)* ','?)	-- repetition of node A separated by ',' and allowing a trailing comma
//   (A (',' A)*)	      -- repetition of node A separated by ',' without a trailing comma
//   A?          				-- zero or one repetition
//   (A)         				-- same as A
//   label:A     				-- suggested name for field of AST node

// NOTES
//
// - SyntaxNode, SyntaxToken and SyntaxElement will be stripped from the codegen
// - Bogus nodes are special nodes used to keep track of broken code; they are
//   not part of the grammar but they will appear inside the green tree


///////////////
// BOGUS NODES
///////////////
// SyntaxElement is a generic data structure that is meant to track nodes and tokens
// in cases where we care about both types
//
// As Bogus* node will need to yield both tokens and nodes without discrimination,
// and their children will need to yield nodes and tokens as well.
// For this reason, SyntaxElement = SyntaxElement
SyntaxElement = SyntaxElement

TwBogus = SyntaxElement*
TwBogusCandidate = SyntaxElement*
TwBogusVariant = SyntaxElement*
TwBogusModifier = SyntaxElement*

// Reference:
// https://github.com/tailwindlabs/tailwindcss/blob/main/packages/tailwindcss/src/candidate.ts
// https://github.com/tailwindlabs/tailwindcss/blob/fa3f45f02c7153876f0e01088b4b5b27bd8e5e96/packages/tailwindcss/src/candidate.ts
// Note that this document uses the terminology "base" instead of "root". A base is the identifier that tailwind maps to a CSS property.

TwRoot = TwCandidateList

TwCandidateList = AnyTwCandidate*

// A Candidate is essentially a CSS class from an end user perspective. It's what the end user puts inside the `class` attribute in their HTML, separated by spaces.
TwCandidate =
	variants: TwVariantList
	candidate: AnyTwCandidate
	'!'?

AnyTwCandidate = TwArbitraryCandidate | TwStaticCandidate | TwFunctionalCandidate | TwBogusCandidate

// Arbitrary candidates are candidates that register utilities on the fly with
// a property and a value.
//
// [color:red]/50!
// ^^^^^^^^^^^^^^
TwArbitraryCandidate =
	'['
	property: 'tw_property'
	':'
	value: 'tw_value'
	']'
	modifier: AnyTwModifier?

// Static candidates are candidates that don't take any arguments.
//
// underline
// box-border
TwStaticCandidate =
	base: 'tw_base'

// Functional candidates are candidates that can take an argument.
//
// bg-red-500
// bg-[#ff0000]
// w-1/2
TwFunctionalCandidate =
  base: 'tw_base'
  '-'
  value: AnyTwValue
  modifier: AnyTwModifier?

// The list of variants must end with a colon.
//TwVariantList = (AnyTwVariant (':' AnyTwVariant)* ':')
TwVariantList = AnyTwVariant*

// A Variant is a selector that modifies what the Candidate applies to.
AnyTwVariant = TwArbitraryVariant | TwStaticVariant | TwFunctionalVariant | TwBogusVariant

// Arbitrary variants are variants that take a selector and generate a variant on the fly.
// [&_p]:text-red-500
// ^^^^^
TwArbitraryVariant =
  '['
  selector: 'tw_selector'
  ']'

// Static variants are variants that don't take any arguments.
//
// hover:text-red-500
// ^^^^^
TwStaticVariant =
  selector: 'tw_selector'

TwFunctionalVariant =
	selector: 'tw_selector'
	value: TwFunctionalVariantValue?

TwFunctionalVariantValue =
	'-'
	value: AnyTwValue

AnyTwValue = TwNamedValue | TwArbitraryValue | TwCssVariableValue

// bg-red-500
//    ^^^^^^^
TwNamedValue =
	value: 'tw_value'

// bg-[#ff0000]
//    ^^^^^^^^^
TwArbitraryValue =
	'['
	value: 'tw_value'
	']'

// bg-[#ff0000]
//    ^^^^^^^^^
TwCssVariableValue =
	'('
	value: 'tw_value'
	')'

AnyTwModifier = TwNamedModifier | TwArbitraryModifier | TwBogusModifier

// text-red-500/50
//             ^^^
TwNamedModifier =
	'/'
	value: 'tw_value'

// text-red-500/[50%]
//             ^^^^^^
TwArbitraryModifier =
	'/'
	'['
	value: 'tw_value'
	']'
