---
import type { Props } from "@astrojs/starlight/props";
import Default from "@astrojs/starlight/components/Head.astro";
import { getCollection } from "astro:content";

const docs = await getCollection("docs");
const routes = new Set(docs.map(({ data, slug }) => slug + ".png"));

/**
 * Get the path to the OpenGraph image for a page
 * @param path Pathname of the page URL.
 * @param isFallback Whether or not this page is displaying fallback content.
 * @returns Path to the OpenGraph image if found. Otherwise, `undefined`.
 */
async function getOgImageUrl(
	path: string,
	isFallback: boolean,
): string | undefined {
	/**  All the OpenGraph image paths as generated by our `getStaticPaths`. */

	let imagePath = path.replace(/^\//, "").replace(/\/$/, "") + ".png";

	if (isFallback) {
		// Replace the language segment with 'en' for fallback pages.
		imagePath = "en" + imagePath.slice(imagePath.indexOf("/"));
	}

	if (routes.has(imagePath)) return "/og/" + imagePath;

	return undefined;
}

const { isFallback, lang } = Astro.props;

const ogImageUrl = await getOgImageUrl(Astro.url.pathname, !!isFallback);
const imageSrc = ogImageUrl ?? "/img/og.png?v=2";
const canonicalImageSrc = new URL(imageSrc, Astro.site);
---


<Default {...Astro.props}><slot /></Default>
<meta property="og:image" content={canonicalImageSrc} />
<meta name="twitter:image" content={canonicalImageSrc} />
