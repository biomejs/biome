---
source: crates/biome_grit_parser/tests/spec_test.rs
expression: snapshot
---
## Input
```grit
predicate program_contains_logger() {
  program <: contains `logger`,
  "hello" = "world",
  $list[0] += "world"
}

```

## AST

```
GritRoot {
    bom_token: missing (optional),
    version: missing (optional),
    language: missing (optional),
    definitions: GritDefinitionList [
        GritPredicateDefinition {
            predicate_token: PREDICATE_KW@0..10 "predicate" [] [Whitespace(" ")],
            name: GritName {
                value_token: GRIT_NAME@10..33 "program_contains_logger" [] [],
            },
            l_paren_token: L_PAREN@33..34 "(" [] [],
            args: GritPatternArgList {
                grit_variable_list: GritVariableList [],
            },
            r_paren_token: R_PAREN@34..36 ")" [] [Whitespace(" ")],
            body: GritCurlyPredicateList {
                l_curly_token: L_CURLY@36..37 "{" [] [],
                predicates: GritPredicateList [
                    GritBogusPredicate {
                        items: [
                            GRIT_NAME@37..48 "program" [Newline("\n"), Whitespace("  ")] [Whitespace(" ")],
                            MATCH@48..51 "<:" [] [Whitespace(" ")],
                            CONTAINS_KW@51..60 "contains" [] [Whitespace(" ")],
                            GRIT_BACKTICK_SNIPPET@60..68 "`logger`" [] [],
                        ],
                    },
                    COMMA@68..69 "," [] [],
                    GritBogusPredicate {
                        items: [
                            GritBogusLiteral {
                                items: [
                                    GRIT_STRING@69..80 "\"hello\"" [Newline("\n"), Whitespace("  ")] [Whitespace(" ")],
                                ],
                            },
                            EQ@80..82 "=" [] [Whitespace(" ")],
                            GritStringLiteral {
                                value_token: GRIT_STRING@82..89 "\"world\"" [] [],
                            },
                        ],
                    },
                    COMMA@89..90 "," [] [],
                    GritBogusPredicate {
                        items: [
                            GritBogusPattern {
                                items: [
                                    GritVariable {
                                        value_token: GRIT_VARIABLE@90..98 "$list" [Newline("\n"), Whitespace("  ")] [],
                                    },
                                    L_BRACK@98..99 "[" [] [],
                                    GritIntLiteral {
                                        value_token: GRIT_INT@99..100 "0" [] [],
                                    },
                                    R_BRACK@100..102 "]" [] [Whitespace(" ")],
                                ],
                            },
                            PLUSEQ@102..105 "+=" [] [Whitespace(" ")],
                            GritStringLiteral {
                                value_token: GRIT_STRING@105..112 "\"world\"" [] [],
                            },
                        ],
                    },
                ],
                r_curly_token: R_CURLY@112..114 "}" [Newline("\n")] [],
            },
        },
    ],
    eof_token: EOF@114..115 "" [Newline("\n")] [],
}
```

## CST

```
0: GRIT_ROOT@0..115
  0: (empty)
  1: (empty)
  2: (empty)
  3: GRIT_DEFINITION_LIST@0..114
    0: GRIT_PREDICATE_DEFINITION@0..114
      0: PREDICATE_KW@0..10 "predicate" [] [Whitespace(" ")]
      1: GRIT_NAME@10..33
        0: GRIT_NAME@10..33 "program_contains_logger" [] []
      2: L_PAREN@33..34 "(" [] []
      3: GRIT_PATTERN_ARG_LIST@34..34
        0: GRIT_VARIABLE_LIST@34..34
      4: R_PAREN@34..36 ")" [] [Whitespace(" ")]
      5: GRIT_CURLY_PREDICATE_LIST@36..114
        0: L_CURLY@36..37 "{" [] []
        1: GRIT_PREDICATE_LIST@37..112
          0: GRIT_BOGUS_PREDICATE@37..68
            0: GRIT_NAME@37..48 "program" [Newline("\n"), Whitespace("  ")] [Whitespace(" ")]
            1: MATCH@48..51 "<:" [] [Whitespace(" ")]
            2: CONTAINS_KW@51..60 "contains" [] [Whitespace(" ")]
            3: GRIT_BACKTICK_SNIPPET@60..68 "`logger`" [] []
          1: COMMA@68..69 "," [] []
          2: GRIT_BOGUS_PREDICATE@69..89
            0: GRIT_BOGUS_LITERAL@69..80
              0: GRIT_STRING@69..80 "\"hello\"" [Newline("\n"), Whitespace("  ")] [Whitespace(" ")]
            1: EQ@80..82 "=" [] [Whitespace(" ")]
            2: GRIT_STRING_LITERAL@82..89
              0: GRIT_STRING@82..89 "\"world\"" [] []
          3: COMMA@89..90 "," [] []
          4: GRIT_BOGUS_PREDICATE@90..112
            0: GRIT_BOGUS_PATTERN@90..102
              0: GRIT_VARIABLE@90..98
                0: GRIT_VARIABLE@90..98 "$list" [Newline("\n"), Whitespace("  ")] []
              1: L_BRACK@98..99 "[" [] []
              2: GRIT_INT_LITERAL@99..100
                0: GRIT_INT@99..100 "0" [] []
              3: R_BRACK@100..102 "]" [] [Whitespace(" ")]
            1: PLUSEQ@102..105 "+=" [] [Whitespace(" ")]
            2: GRIT_STRING_LITERAL@105..112
              0: GRIT_STRING@105..112 "\"world\"" [] []
        2: R_CURLY@112..114 "}" [Newline("\n")] []
  4: EOF@114..115 "" [Newline("\n")] []

```

## Diagnostics

```
invalid_predicate_subject.grit:2:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a predicate here.
  
    1 │ predicate program_contains_logger() {
  > 2 │   program <: contains `logger`,
      │   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    3 │   "hello" = "world",
    4 │   $list[0] += "world"
  
  i Should this be a variable?
  
    1 │ predicate program_contains_logger() {
  > 2 │   program <: contains `logger`,
      │   ^^^^^^^
    3 │   "hello" = "world",
    4 │   $list[0] += "world"
  
invalid_predicate_subject.grit:3:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a variable or container.
  
    1 │ predicate program_contains_logger() {
    2 │   program <: contains `logger`,
  > 3 │   "hello" = "world",
      │   ^^^^^^^
    4 │   $list[0] += "world"
    5 │ }
  
  i Assignment only works on variables and containers.
  
    1 │ predicate program_contains_logger() {
    2 │   program <: contains `logger`,
  > 3 │   "hello" = "world",
      │           ^
    4 │   $list[0] += "world"
    5 │ }
  
invalid_predicate_subject.grit:4:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a variable.
  
    2 │   program <: contains `logger`,
    3 │   "hello" = "world",
  > 4 │   $list[0] += "world"
      │   ^^^^^^^^
    5 │ }
    6 │ 
  
  i This operator only works on variables.
  
    2 │   program <: contains `logger`,
    3 │   "hello" = "world",
  > 4 │   $list[0] += "world"
      │            ^^
    5 │ }
    6 │ 
  
```
