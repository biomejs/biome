---
source: crates/biome_grit_parser/tests/spec_test.rs
expression: snapshot
---
## Input
```grit
predicate program_contains_logger() {
  $program <: contains `logger`
}
`console.log` => `logger.info` where {
  program_contains_logger()
}

```

## AST

```
GritRoot {
    bom_token: missing (optional),
    version: missing (optional),
    language: missing (optional),
    definitions: GritDefinitionList [
        GritPredicateDefinition {
            predicate_token: PREDICATE_KW@0..10 "predicate" [] [Whitespace(" ")],
            name: GritName {
                value_token: GRIT_NAME@10..33 "program_contains_logger" [] [],
            },
            l_paren_token: L_PAREN@33..34 "(" [] [],
            args: GritPatternArgList {
                grit_variable_list: GritVariableList [],
            },
            r_paren_token: R_PAREN@34..36 ")" [] [Whitespace(" ")],
            body: GritCurlyPredicateList {
                l_curly_token: L_CURLY@36..37 "{" [] [],
                predicates: GritPredicateList [
                    GritPredicateMatch {
                        left: GritVariable {
                            value_token: GRIT_VARIABLE@37..49 "$program" [Newline("\n"), Whitespace("  ")] [Whitespace(" ")],
                        },
                        match_token: MATCH@49..52 "<:" [] [Whitespace(" ")],
                        right: GritPatternContains {
                            contains_token: CONTAINS_KW@52..61 "contains" [] [Whitespace(" ")],
                            contains: GritCodeSnippet {
                                source: GritBacktickSnippetLiteral {
                                    value_token: GRIT_BACKTICK_SNIPPET@61..69 "`logger`" [] [],
                                },
                            },
                            until_clause: missing (optional),
                        },
                    },
                ],
                r_curly_token: R_CURLY@69..71 "}" [Newline("\n")] [],
            },
        },
        missing separator,
        GritPatternWhere {
            pattern: GritRewrite {
                left: GritCodeSnippet {
                    source: GritBacktickSnippetLiteral {
                        value_token: GRIT_BACKTICK_SNIPPET@71..86 "`console.log`" [Newline("\n")] [Whitespace(" ")],
                    },
                },
                annotation: missing (optional),
                fat_arrow_token: FAT_ARROW@86..89 "=>" [] [Whitespace(" ")],
                right: GritCodeSnippet {
                    source: GritBacktickSnippetLiteral {
                        value_token: GRIT_BACKTICK_SNIPPET@89..103 "`logger.info`" [] [Whitespace(" ")],
                    },
                },
            },
            where_token: WHERE_KW@103..109 "where" [] [Whitespace(" ")],
            side_condition: GritPredicateAnd {
                and_token: missing (optional),
                l_curly_token: L_CURLY@109..110 "{" [] [],
                predicates: GritPredicateList [
                    GritPredicateCall {
                        name: GritName {
                            value_token: GRIT_NAME@110..136 "program_contains_logger" [Newline("\n"), Whitespace("  ")] [],
                        },
                        l_paren_token: L_PAREN@136..137 "(" [] [],
                        named_args: GritNamedArgList [],
                        r_paren_token: R_PAREN@137..138 ")" [] [],
                    },
                ],
                r_curly_token: R_CURLY@138..140 "}" [Newline("\n")] [],
            },
        },
    ],
    eof_token: EOF@140..141 "" [Newline("\n")] [],
}
```

## CST

```
0: GRIT_ROOT@0..141
  0: (empty)
  1: (empty)
  2: (empty)
  3: GRIT_DEFINITION_LIST@0..140
    0: GRIT_PREDICATE_DEFINITION@0..71
      0: PREDICATE_KW@0..10 "predicate" [] [Whitespace(" ")]
      1: GRIT_NAME@10..33
        0: GRIT_NAME@10..33 "program_contains_logger" [] []
      2: L_PAREN@33..34 "(" [] []
      3: GRIT_PATTERN_ARG_LIST@34..34
        0: GRIT_VARIABLE_LIST@34..34
      4: R_PAREN@34..36 ")" [] [Whitespace(" ")]
      5: GRIT_CURLY_PREDICATE_LIST@36..71
        0: L_CURLY@36..37 "{" [] []
        1: GRIT_PREDICATE_LIST@37..69
          0: GRIT_PREDICATE_MATCH@37..69
            0: GRIT_VARIABLE@37..49
              0: GRIT_VARIABLE@37..49 "$program" [Newline("\n"), Whitespace("  ")] [Whitespace(" ")]
            1: MATCH@49..52 "<:" [] [Whitespace(" ")]
            2: GRIT_PATTERN_CONTAINS@52..69
              0: CONTAINS_KW@52..61 "contains" [] [Whitespace(" ")]
              1: GRIT_CODE_SNIPPET@61..69
                0: GRIT_BACKTICK_SNIPPET_LITERAL@61..69
                  0: GRIT_BACKTICK_SNIPPET@61..69 "`logger`" [] []
              2: (empty)
        2: R_CURLY@69..71 "}" [Newline("\n")] []
    1: (empty)
    2: GRIT_PATTERN_WHERE@71..140
      0: GRIT_REWRITE@71..103
        0: GRIT_CODE_SNIPPET@71..86
          0: GRIT_BACKTICK_SNIPPET_LITERAL@71..86
            0: GRIT_BACKTICK_SNIPPET@71..86 "`console.log`" [Newline("\n")] [Whitespace(" ")]
        1: (empty)
        2: FAT_ARROW@86..89 "=>" [] [Whitespace(" ")]
        3: GRIT_CODE_SNIPPET@89..103
          0: GRIT_BACKTICK_SNIPPET_LITERAL@89..103
            0: GRIT_BACKTICK_SNIPPET@89..103 "`logger.info`" [] [Whitespace(" ")]
      1: WHERE_KW@103..109 "where" [] [Whitespace(" ")]
      2: GRIT_PREDICATE_AND@109..140
        0: (empty)
        1: L_CURLY@109..110 "{" [] []
        2: GRIT_PREDICATE_LIST@110..138
          0: GRIT_PREDICATE_CALL@110..138
            0: GRIT_NAME@110..136
              0: GRIT_NAME@110..136 "program_contains_logger" [Newline("\n"), Whitespace("  ")] []
            1: L_PAREN@136..137 "(" [] []
            2: GRIT_NAMED_ARG_LIST@137..137
            3: R_PAREN@137..138 ")" [] []
        3: R_CURLY@138..140 "}" [Newline("\n")] []
  4: EOF@140..141 "" [Newline("\n")] []

```
