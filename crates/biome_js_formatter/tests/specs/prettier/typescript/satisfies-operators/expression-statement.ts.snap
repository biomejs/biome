---
source: crates/biome_formatter_test/src/snapshot_builder.rs
info: typescript/satisfies-operators/expression-statement.ts
---

# Input

```ts

let type: 'foo' | 'bar' = 'foo';

// demonstrating how "satisfies" expression can be practically used as expression statement.
const _ = () => {
switch (type) {
  case 'foo':
    return 1;
  case 'bar':
    return 2;
  default:
    // exhaustiveness check idiom
    (type) satisfies never;
    throw new Error('unreachable');
}
}

function needParens() {
(let) satisfies unknown;
(interface) satisfies unknown;
(module) satisfies unknown;
(using) satisfies unknown;
(yield) satisfies unknown;
(await) satisfies unknown;
}

function noNeedParens() {
async satisfies unknown;
satisfies satisfies unknown;
as satisfies unknown;

abc satisfies unknown; // not a keyword
}

function satisfiesChain() {
satisfies satisfies satisfies satisfies satisfies;
(type) satisfies never satisfies unknown;
}

```


# Prettier differences

```diff
--- Prettier
+++ Biome
@@ -9,7 +9,7 @@
       return 2;
     default:
       // exhaustiveness check idiom
-      (type) satisfies never;
+      type satisfies never;
       throw new Error("unreachable");
   }
 };
@@ -17,8 +17,8 @@
 function needParens() {
   (let) satisfies unknown;
   (interface) satisfies unknown;
-  (module) satisfies unknown;
-  (using) satisfies unknown;
+  module satisfies unknown;
+  using satisfies unknown;
   (yield) satisfies unknown;
   (await) satisfies unknown;
 }
@@ -33,5 +33,5 @@
 
 function satisfiesChain() {
   satisfies satisfies satisfies satisfies satisfies;
-  (type) satisfies never satisfies unknown;
+  type satisfies never satisfies unknown;
 }
```

# Output

```ts
let type: "foo" | "bar" = "foo";

// demonstrating how "satisfies" expression can be practically used as expression statement.
const _ = () => {
  switch (type) {
    case "foo":
      return 1;
    case "bar":
      return 2;
    default:
      // exhaustiveness check idiom
      type satisfies never;
      throw new Error("unreachable");
  }
};

function needParens() {
  (let) satisfies unknown;
  (interface) satisfies unknown;
  module satisfies unknown;
  using satisfies unknown;
  (yield) satisfies unknown;
  (await) satisfies unknown;
}

function noNeedParens() {
  async satisfies unknown;
  satisfies satisfies unknown;
  as satisfies unknown;

  abc satisfies unknown; // not a keyword
}

function satisfiesChain() {
  satisfies satisfies satisfies satisfies satisfies;
  type satisfies never satisfies unknown;
}
```

# Errors
```
expression-statement.ts:19:2 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Illegal use of reserved keyword `let` as an identifier in strict mode
  
    18 │ function needParens() {
  > 19 │ (let) satisfies unknown;
       │  ^^^
    20 │ (interface) satisfies unknown;
    21 │ (module) satisfies unknown;
  
expression-statement.ts:20:2 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Illegal use of reserved keyword `interface` as an identifier in strict mode
  
    18 │ function needParens() {
    19 │ (let) satisfies unknown;
  > 20 │ (interface) satisfies unknown;
       │  ^^^^^^^^^
    21 │ (module) satisfies unknown;
    22 │ (using) satisfies unknown;
  
expression-statement.ts:23:2 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Illegal use of reserved keyword `yield` as an identifier in strict mode
  
    21 │ (module) satisfies unknown;
    22 │ (using) satisfies unknown;
  > 23 │ (yield) satisfies unknown;
       │  ^^^^^
    24 │ (await) satisfies unknown;
    25 │ }
  
expression-statement.ts:24:2 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Illegal use of `await` as an identifier inside of a module
  
    22 │ (using) satisfies unknown;
    23 │ (yield) satisfies unknown;
  > 24 │ (await) satisfies unknown;
       │  ^^^^^
    25 │ }
    26 │ 
  

```

# Lines exceeding max width of 80 characters
```
    3: // demonstrating how "satisfies" expression can be practically used as expression statement.
```


