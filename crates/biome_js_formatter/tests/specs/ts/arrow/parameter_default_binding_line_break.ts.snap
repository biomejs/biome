---
source: crates/biome_formatter_test/src/snapshot_builder.rs
info: ts/arrow/parameter_default_binding_line_break.ts
---
# Input

```ts
class T {
    // This aggregates all values per `timestamp`
    calculateTotalsPerTimestamp(
      getName: (
        timestamp: number,
        countArray: {count: number}[],
        i: number
      ) => number = timestamp => timestamp * 1000
    ): SeriesDataUnit[] {
    }

    calculateTotalsPerTimestamp(
      getName: (
        timestamp: number
      ) => number = 
      timestamp => timestamp * 1000
    ) {


    }
  }
```


=============================

# Outputs

## Output 1

-----
Indent style: Tab
Indent width: 2
Line ending: LF
Line width: 80
Quote style: Double Quotes
JSX quote style: Double Quotes
Quote properties: As needed
Trailing comma: All
Semicolons: Always
Arrow parentheses: Always
Bracket spacing: true
Bracket same line: false
Attribute Position: Auto
-----

```ts
class T {
	// This aggregates all values per `timestamp`
	calculateTotalsPerTimestamp(
		getName: (
			timestamp: number,
			countArray: { count: number }[],
			i: number,
		) => number = (timestamp) => timestamp * 1000,
	): SeriesDataUnit[] {}

	calculateTotalsPerTimestamp(
		getName: (timestamp: number) => number = (timestamp) => timestamp * 1000,
	) {}
}
```

## Output 1

-----
Indent style: Tab
Indent width: 2
Line ending: LF
Line width: 80
Quote style: Double Quotes
JSX quote style: Double Quotes
Quote properties: As needed
Trailing comma: All
Semicolons: Always
Arrow parentheses: As needed
Bracket spacing: true
Bracket same line: false
Attribute Position: Auto
-----

```ts
class T {
	// This aggregates all values per `timestamp`
	calculateTotalsPerTimestamp(
		getName: (
			timestamp: number,
			countArray: { count: number }[],
			i: number,
		) => number = timestamp => timestamp * 1000,
	): SeriesDataUnit[] {}

	calculateTotalsPerTimestamp(
		getName: (timestamp: number) => number = timestamp => timestamp * 1000,
	) {}
}
```
