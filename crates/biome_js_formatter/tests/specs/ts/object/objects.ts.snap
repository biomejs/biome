---
source: crates/biome_formatter_test/src/snapshot_builder.rs
info: ts/object/objects.ts
---
# Input

```ts
let foo: {
	bar: string;
};

const fn = ({
	foo,
	bar,
}: {
	foo: boolean;
	bar: string;
}) => {
	console.log(foo, bar);
}

function fn2(foo: {
	bar: string;
}) {
	console.log(foo);
}

// both the object pattern and the object type should be expanded
function fn3({
	foo,
	bar,
	baz,
	qux,
}: {
	foo: string;
	baz: string;
	bar: string;
	qux: string;
}): void {
}

// the object type of `baz` should keep expanded
function fn4(
	bar: string,
	baz: {
		qux: string;
	}
): void {
}

// the object type of `baz` should be collapsed
function fn5(
	bar: string,
	baz: { qux: string;
	}
): void {
}


```


=============================

# Outputs

## Output 1

-----
Indent style: Tab
Indent width: 2
Line ending: LF
Line width: 80
Quote style: Double Quotes
JSX quote style: Double Quotes
Quote properties: As needed
Trailing commas: All
Semicolons: Always
Arrow parentheses: Always
Bracket spacing: true
Bracket same line: false
Attribute Position: Auto
Expand lists: Auto
-----

```ts
let foo: {
	bar: string;
};

const fn = ({ foo, bar }: { foo: boolean; bar: string }) => {
	console.log(foo, bar);
};

function fn2(foo: { bar: string }) {
	console.log(foo);
}

// both the object pattern and the object type should be expanded
function fn3({
	foo,
	bar,
	baz,
	qux,
}: {
	foo: string;
	baz: string;
	bar: string;
	qux: string;
}): void {}

// the object type of `baz` should keep expanded
function fn4(
	bar: string,
	baz: {
		qux: string;
	},
): void {}

// the object type of `baz` should be collapsed
function fn5(bar: string, baz: { qux: string }): void {}
```
