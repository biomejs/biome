---
source: crates/biome_formatter_test/src/snapshot_builder.rs
info: ts/simple_arguments.ts
---
# Input

```ts
// Tests around grouping layouts and simple arguments

// Cases where the second argument is too complex to group.
foo(() => {
    foo
  },
  [] as string[][][],
);
foo(() => {
    foo
  },
  {} as Foo<Bar, Baz>,
);
foo(() => {
    foo
  },
  bar as {},
);


// Cases where the second argument is simple enough to group.
foo(() => {
    foo
  },
  [] as never[]
);
foo(() => {
    foo
  },
  bar as boolean
);
foo(() => {
    foo
  },
  [] as object[][]
);

foo(() => {
    foo
  },
  [] as Foo<number>[][]
);
foo(() => {
    foo
  },
  bar as MyCustomType[],
);

```


=============================

# Outputs

## Output 1

-----
Indent style: Tab
Indent width: 2
Line ending: LF
Line width: 80
Quote style: Double Quotes
JSX quote style: Double Quotes
Quote properties: As needed
Trailing commas: All
Semicolons: Always
Arrow parentheses: Always
Bracket spacing: true
Bracket same line: false
Attribute Position: Auto
-----

```ts
// Tests around grouping layouts and simple arguments

// Cases where the second argument is too complex to group.
foo(
	() => {
		foo;
	},
	[] as string[][][],
);
foo(
	() => {
		foo;
	},
	{} as Foo<Bar, Baz>,
);
foo(
	() => {
		foo;
	},
	bar as {},
);

// Cases where the second argument is simple enough to group.
foo(() => {
	foo;
}, [] as never[]);
foo(() => {
	foo;
}, bar as boolean);
foo(() => {
	foo;
}, [] as object[][]);

foo(() => {
	foo;
}, [] as Foo<number>[][]);
foo(() => {
	foo;
}, bar as MyCustomType[]);
```
