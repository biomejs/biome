---
source: crates/biome_cli/tests/snap_test.rs
expression: redactor(content)
---
## `file.vue`

```vue
<script setup lang="js">
a == b;
delete a.c;

var foo = "";
</script>
<template></template>
```

# Termination Message

```block
lint ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Some errors were emitted while running checks.
  


```

# Emitted Messages

```block
file.vue:5:5 lint/correctness/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This variable foo is unused.
  
    3 │ delete a.c;
    4 │ 
  > 5 │ var foo = "";
      │     ^^^
    6 │ </script>
    7 │ <template></template>
  
  i Unused variables are often the result of an incomplete refactoring, typos, or other sources of bugs.
  
  i Unsafe fix: If this is intentional, prepend foo with an underscore.
  
    2 2 │   delete a.c;
    3 3 │   
    4   │ - var·foo·=·"";
      4 │ + var·_foo·=·"";
    5 5 │   
  

```

```block
file.vue:2:3 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Using == may be unsafe if you are relying on type coercion.
  
    1 │ <script setup lang="js">
  > 2 │ a == b;
      │   ^^
    3 │ delete a.c;
    4 │ 
  
  i == is only allowed when comparing against null.
  
  i Unsafe fix: Use === instead.
  
    1 │ a·===·b;
      │     +   

```

```block
Checked 1 file in <TIME>. No fixes applied.
Found 1 error.
Found 1 warning.
```
