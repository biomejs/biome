---
source: crates/rome_js_analyze/tests/spec_tests.rs
assertion_line: 80
expression: invalidAllowInGenericTypeArguments.ts
---
# Input
```js
function printArg<T = void>(arg: T) {}
logAndReturn<void>(undefined);

let voidPromise: Promise<void> = new Promise<void>(() => { });
let voidMap: Map<string, void> = new Map<string, void>();

```

# Diagnostics
```
invalidAllowInGenericTypeArguments.ts:1:23 lint/complexity/noConfusingVoidType ━━━━━━━━━━━━━━━━━━━━━

  ! void is only valid as a return type
  
  > 1 │ function printArg<T = void>(arg: T) {}
      │                       ^^^^
    2 │ logAndReturn<void>(undefined);
    3 │ 
  

```

```
invalidAllowInGenericTypeArguments.ts:2:14 lint/complexity/noConfusingVoidType ━━━━━━━━━━━━━━━━━━━━━

  ! void is only valid as a return type
  
    1 │ function printArg<T = void>(arg: T) {}
  > 2 │ logAndReturn<void>(undefined);
      │              ^^^^
    3 │ 
    4 │ let voidPromise: Promise<void> = new Promise<void>(() => { });
  

```

```
invalidAllowInGenericTypeArguments.ts:4:26 lint/complexity/noConfusingVoidType ━━━━━━━━━━━━━━━━━━━━━

  ! void is only valid as a return type
  
    2 │ logAndReturn<void>(undefined);
    3 │ 
  > 4 │ let voidPromise: Promise<void> = new Promise<void>(() => { });
      │                          ^^^^
    5 │ let voidMap: Map<string, void> = new Map<string, void>();
    6 │ 
  

```

```
invalidAllowInGenericTypeArguments.ts:4:46 lint/complexity/noConfusingVoidType ━━━━━━━━━━━━━━━━━━━━━

  ! void is only valid as a return type
  
    2 │ logAndReturn<void>(undefined);
    3 │ 
  > 4 │ let voidPromise: Promise<void> = new Promise<void>(() => { });
      │                                              ^^^^
    5 │ let voidMap: Map<string, void> = new Map<string, void>();
    6 │ 
  

```

```
invalidAllowInGenericTypeArguments.ts:5:26 lint/complexity/noConfusingVoidType ━━━━━━━━━━━━━━━━━━━━━

  ! void is only valid as a return type
  
    4 │ let voidPromise: Promise<void> = new Promise<void>(() => { });
  > 5 │ let voidMap: Map<string, void> = new Map<string, void>();
      │                          ^^^^
    6 │ 
  

```

```
invalidAllowInGenericTypeArguments.ts:5:50 lint/complexity/noConfusingVoidType ━━━━━━━━━━━━━━━━━━━━━

  ! void is only valid as a return type
  
    4 │ let voidPromise: Promise<void> = new Promise<void>(() => { });
  > 5 │ let voidMap: Map<string, void> = new Map<string, void>();
      │                                                  ^^^^
    6 │ 
  

```


