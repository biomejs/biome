//! This is a generated file. Don't modify it by hand! Run 'cargo codegen formatter' to re-generate the file.

pub(crate) mod attribute_matcher;
pub(crate) mod attribute_matcher_value;
pub(crate) mod attribute_name;
pub(crate) mod binary_expression;
pub(crate) mod bracketed_value;
pub(crate) mod composes_import_specifier;
pub(crate) mod composes_property_value;
pub(crate) mod container_and_query;
pub(crate) mod container_not_query;
pub(crate) mod container_or_query;
pub(crate) mod container_query_in_parens;
pub(crate) mod container_size_feature_in_parens;
pub(crate) mod container_style_and_query;
pub(crate) mod container_style_in_parens;
pub(crate) mod container_style_not_query;
pub(crate) mod container_style_or_query;
pub(crate) mod container_style_query_in_parens;
pub(crate) mod declaration;
pub(crate) mod declaration_block;
pub(crate) mod declaration_important;
pub(crate) mod declaration_or_at_rule_block;
pub(crate) mod declaration_or_rule_block;
pub(crate) mod declaration_with_semicolon;
pub(crate) mod document_custom_matcher;
pub(crate) mod font_family_name;
pub(crate) mod font_feature_values_block;
pub(crate) mod font_feature_values_item;
pub(crate) mod function;
pub(crate) mod generic_delimiter;
pub(crate) mod import_anonymous_layer;
pub(crate) mod import_named_layer;
pub(crate) mod import_supports;
pub(crate) mod keyframes_block;
pub(crate) mod keyframes_item;
pub(crate) mod keyframes_scope_function;
pub(crate) mod keyframes_scope_prefix;
pub(crate) mod keyframes_scoped_name;
pub(crate) mod layer_declaration;
pub(crate) mod layer_reference;
pub(crate) mod list_of_component_values_expression;
pub(crate) mod media_and_condition;
pub(crate) mod media_and_type_query;
pub(crate) mod media_condition_in_parens;
pub(crate) mod media_condition_query;
pub(crate) mod media_feature_in_parens;
pub(crate) mod media_not_condition;
pub(crate) mod media_or_condition;
pub(crate) mod media_type;
pub(crate) mod media_type_query;
pub(crate) mod named_namespace_prefix;
pub(crate) mod namespace;
pub(crate) mod nested_qualified_rule;
pub(crate) mod nth_offset;
pub(crate) mod page_at_rule_block;
pub(crate) mod parameter;
pub(crate) mod parenthesized_expression;
pub(crate) mod qualified_rule;
pub(crate) mod query_feature_boolean;
pub(crate) mod query_feature_plain;
pub(crate) mod query_feature_range;
pub(crate) mod query_feature_range_comparison;
pub(crate) mod query_feature_range_interval;
pub(crate) mod query_feature_reverse_range;
pub(crate) mod root;
pub(crate) mod rule_block;
pub(crate) mod scope_edge;
pub(crate) mod scope_range_end;
pub(crate) mod scope_range_interval;
pub(crate) mod scope_range_start;
pub(crate) mod supports_and_condition;
pub(crate) mod supports_condition_in_parens;
pub(crate) mod supports_feature_declaration;
pub(crate) mod supports_not_condition;
pub(crate) mod supports_or_condition;
pub(crate) mod universal_namespace_prefix;
pub(crate) mod url_function;
pub(crate) mod value_at_rule_declaration_clause;
pub(crate) mod value_at_rule_import_clause;
pub(crate) mod value_at_rule_import_specifier;
pub(crate) mod value_at_rule_named_import_specifier;
