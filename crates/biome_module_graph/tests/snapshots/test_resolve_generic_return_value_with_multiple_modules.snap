---
source: crates/biome_module_graph/tests/snap/mod.rs
expression: content
---
# `/src/bar.ts` (Module 1)

## Source

```ts
export type Bar = { bar: "bar" };
```

## Module Info

```
Exports {
  "Bar" => {
    ExportOwnExport => JsOwnExport::Binding(0)
  }
}
Imports {
  No imports
}
```

## Exported Bindings

```
BindingId(0) => JsBindingData {
  Name: Bar,
  Type: Module(0) TypeId(1),
  Declaration kind: Type
}
```

## Registered types

```
Module TypeId(0) => value: bar

Module TypeId(1) => Object {
  prototype: No prototype
  members: ["bar": Module(0) TypeId(0)]
}
```

# `/src/index.ts` (Not imported by resolver)

## Source

```ts
import type { Bar } from "./bar.ts";
import { foo } from "./foo.ts";

const bar: Bar = { bar: "bar" };

const stringyBar = bar.bar;

const result = foo(bar.bar, 1);
```

## Module Info

```
Exports {
  No exports
}
Imports {
  "Bar" => {
    Specifier: "./bar.ts"
    Resolved path: "/src/bar.ts"
    Import Symbol: Bar
  }
  "foo" => {
    Specifier: "./foo.ts"
    Resolved path: "/src/foo.ts"
    Import Symbol: foo
  }
}
```

## Registered types

```
Module TypeId(0) => value: bar

Module TypeId(1) => Object {
  prototype: No prototype
  members: ["bar": Module(0) TypeId(0)]
}

Module TypeId(2) => Module(0) TypeId(7).bar

Module TypeId(3) => instanceof Import Symbol: Bar from "/src/bar.ts"

Module TypeId(4) => value: 1

Module TypeId(5) => Call Import Symbol: foo from "/src/foo.ts"(
  Module(0) TypeId(2)
  Module(0) TypeId(4)
)

Module TypeId(6) => Import Symbol: foo from "/src/foo.ts"

Module TypeId(7) => instanceof Import Symbol: Bar from "/src/bar.ts"
```

# `/src/foo.ts` (Module 2)

## Source

```ts
import type { Bar } from "./bar.ts";

export function foo<T>(foo: T, bar: Bar): T;
```

## Module Info

```
Exports {
  "foo" => {
    ExportOwnExport => JsOwnExport::Binding(1)
  }
}
Imports {
  "Bar" => {
    Specifier: "./bar.ts"
    Resolved path: "/src/bar.ts"
    Import Symbol: Bar
  }
}
```

## Exported Bindings

```
BindingId(1) => JsBindingData {
  Name: foo,
  Type: Module(0) TypeId(3),
  Declaration kind: HoistedValue
}
```

## Registered types

```
Module TypeId(0) => instanceof Module(0) TypeId(2)

Module TypeId(1) => instanceof Import Symbol: Bar from "/src/bar.ts"

Module TypeId(2) => T

Module TypeId(3) => sync Function "foo" {
  accepts: {
    params: [
      required foo: Module(0) TypeId(0) (bindings: foo:Module(0) TypeId(0))
      required bar: Module(0) TypeId(1) (bindings: bar:Module(0) TypeId(1))
    ]
    type_args: [Module(0) TypeId(2)]
  }
  returns: Module(0) TypeId(0)
}
```

# Scoped Type Resolver

## Registered types

```
Scope TypeId(0) => value: bar

Scope TypeId(1) => Object {
  prototype: No prototype
  members: ["bar": Module(0) TypeId(0)]
}

Scope TypeId(2) => value: bar

Scope TypeId(3) => Object {
  prototype: No prototype
  members: ["bar": Module(1) TypeId(0)]
}

Scope TypeId(4) => value: 1

Scope TypeId(5) => value: bar

Scope TypeId(6) => sync Function "foo" {
  accepts: {
    params: [
      required foo: Module(2) TypeId(0) (bindings: foo:Module(2) TypeId(0))
      required bar: Module(2) TypeId(1) (bindings: bar:Module(2) TypeId(1))
    ]
    type_args: [Module(2) TypeId(2)]
  }
  returns: Module(2) TypeId(0)
}

Scope TypeId(7) => value: bar

Scope TypeId(8) => Object {
  prototype: No prototype
  members: ["bar": Module(1) TypeId(0)]
}

Scope TypeId(9) => value: bar

Scope TypeId(10) => sync Function "foo" {
  accepts: {
    params: [
      required foo: Module(2) TypeId(0) (bindings: foo:Module(2) TypeId(0))
      required bar: Module(2) TypeId(1) (bindings: bar:Module(2) TypeId(1))
    ]
    type_args: [Module(2) TypeId(2)]
  }
  returns: Module(2) TypeId(0)
}
```
