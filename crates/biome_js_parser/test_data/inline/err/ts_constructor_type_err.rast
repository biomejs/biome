JsModule {
    bom_token: missing (optional),
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@0..5 "type" [] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@5..7 "C" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@7..9 "=" [] [Whitespace(" ")],
            ty: TsConstructorType {
                abstract_token: missing (optional),
                new_token: NEW_KW@9..12 "new" [] [],
                type_parameters: TsTypeParameters {
                    l_angle_token: L_ANGLE@12..13 "<" [] [],
                    items: TsTypeParameterList [],
                    r_angle_token: R_ANGLE@13..14 ">" [] [],
                },
                parameters: JsParameters {
                    l_paren_token: L_PAREN@14..15 "(" [] [],
                    items: JsParameterList [
                        JsFormalParameter {
                            decorators: JsDecoratorList [],
                            binding: JsIdentifierBinding {
                                name_token: IDENT@15..16 "a" [] [],
                            },
                            question_mark_token: missing (optional),
                            type_annotation: TsTypeAnnotation {
                                colon_token: COLON@16..18 ":" [] [Whitespace(" ")],
                                ty: TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@18..19 "A" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                            },
                            initializer: missing (optional),
                        },
                        COMMA@19..21 "," [] [Whitespace(" ")],
                        JsFormalParameter {
                            decorators: JsDecoratorList [],
                            binding: JsIdentifierBinding {
                                name_token: IDENT@21..22 "b" [] [],
                            },
                            question_mark_token: missing (optional),
                            type_annotation: TsTypeAnnotation {
                                colon_token: COLON@22..24 ":" [] [Whitespace(" ")],
                                ty: TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@24..25 "B" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                            },
                            initializer: missing (optional),
                        },
                    ],
                    r_paren_token: R_PAREN@25..27 ")" [] [Whitespace(" ")],
                },
                fat_arrow_token: FAT_ARROW@27..30 "=>" [] [Whitespace(" ")],
                return_type: TsStringType {
                    string_token: STRING_KW@30..36 "string" [] [],
                },
            },
            semicolon_token: SEMICOLON@36..37 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@37..43 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@43..45 "D" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@45..47 "=" [] [Whitespace(" ")],
            ty: TsConstructorType {
                abstract_token: ABSTRACT_KW@47..56 "abstract" [] [Whitespace(" ")],
                new_token: NEW_KW@56..59 "new" [] [],
                type_parameters: TsTypeParameters {
                    l_angle_token: L_ANGLE@59..60 "<" [] [],
                    items: TsTypeParameterList [],
                    r_angle_token: R_ANGLE@60..61 ">" [] [],
                },
                parameters: JsParameters {
                    l_paren_token: L_PAREN@61..62 "(" [] [],
                    items: JsParameterList [
                        JsFormalParameter {
                            decorators: JsDecoratorList [],
                            binding: JsIdentifierBinding {
                                name_token: IDENT@62..63 "a" [] [],
                            },
                            question_mark_token: missing (optional),
                            type_annotation: TsTypeAnnotation {
                                colon_token: COLON@63..65 ":" [] [Whitespace(" ")],
                                ty: TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@65..66 "A" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                            },
                            initializer: missing (optional),
                        },
                        COMMA@66..68 "," [] [Whitespace(" ")],
                        JsFormalParameter {
                            decorators: JsDecoratorList [],
                            binding: JsIdentifierBinding {
                                name_token: IDENT@68..69 "b" [] [],
                            },
                            question_mark_token: missing (optional),
                            type_annotation: TsTypeAnnotation {
                                colon_token: COLON@69..71 ":" [] [Whitespace(" ")],
                                ty: TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@71..72 "B" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                            },
                            initializer: missing (optional),
                        },
                    ],
                    r_paren_token: R_PAREN@72..74 ")" [] [Whitespace(" ")],
                },
                fat_arrow_token: FAT_ARROW@74..77 "=>" [] [Whitespace(" ")],
                return_type: TsStringType {
                    string_token: STRING_KW@77..83 "string" [] [],
                },
            },
            semicolon_token: SEMICOLON@83..84 ";" [] [],
        },
    ],
    eof_token: EOF@84..85 "" [Newline("\n")] [],
}

0: JS_MODULE@0..85
  0: (empty)
  1: (empty)
  2: JS_DIRECTIVE_LIST@0..0
  3: JS_MODULE_ITEM_LIST@0..84
    0: TS_TYPE_ALIAS_DECLARATION@0..37
      0: TYPE_KW@0..5 "type" [] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@5..7
        0: IDENT@5..7 "C" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@7..9 "=" [] [Whitespace(" ")]
      4: TS_CONSTRUCTOR_TYPE@9..36
        0: (empty)
        1: NEW_KW@9..12 "new" [] []
        2: TS_TYPE_PARAMETERS@12..14
          0: L_ANGLE@12..13 "<" [] []
          1: TS_TYPE_PARAMETER_LIST@13..13
          2: R_ANGLE@13..14 ">" [] []
        3: JS_PARAMETERS@14..27
          0: L_PAREN@14..15 "(" [] []
          1: JS_PARAMETER_LIST@15..25
            0: JS_FORMAL_PARAMETER@15..19
              0: JS_DECORATOR_LIST@15..15
              1: JS_IDENTIFIER_BINDING@15..16
                0: IDENT@15..16 "a" [] []
              2: (empty)
              3: TS_TYPE_ANNOTATION@16..19
                0: COLON@16..18 ":" [] [Whitespace(" ")]
                1: TS_REFERENCE_TYPE@18..19
                  0: JS_REFERENCE_IDENTIFIER@18..19
                    0: IDENT@18..19 "A" [] []
                  1: (empty)
              4: (empty)
            1: COMMA@19..21 "," [] [Whitespace(" ")]
            2: JS_FORMAL_PARAMETER@21..25
              0: JS_DECORATOR_LIST@21..21
              1: JS_IDENTIFIER_BINDING@21..22
                0: IDENT@21..22 "b" [] []
              2: (empty)
              3: TS_TYPE_ANNOTATION@22..25
                0: COLON@22..24 ":" [] [Whitespace(" ")]
                1: TS_REFERENCE_TYPE@24..25
                  0: JS_REFERENCE_IDENTIFIER@24..25
                    0: IDENT@24..25 "B" [] []
                  1: (empty)
              4: (empty)
          2: R_PAREN@25..27 ")" [] [Whitespace(" ")]
        4: FAT_ARROW@27..30 "=>" [] [Whitespace(" ")]
        5: TS_STRING_TYPE@30..36
          0: STRING_KW@30..36 "string" [] []
      5: SEMICOLON@36..37 ";" [] []
    1: TS_TYPE_ALIAS_DECLARATION@37..84
      0: TYPE_KW@37..43 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@43..45
        0: IDENT@43..45 "D" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@45..47 "=" [] [Whitespace(" ")]
      4: TS_CONSTRUCTOR_TYPE@47..83
        0: ABSTRACT_KW@47..56 "abstract" [] [Whitespace(" ")]
        1: NEW_KW@56..59 "new" [] []
        2: TS_TYPE_PARAMETERS@59..61
          0: L_ANGLE@59..60 "<" [] []
          1: TS_TYPE_PARAMETER_LIST@60..60
          2: R_ANGLE@60..61 ">" [] []
        3: JS_PARAMETERS@61..74
          0: L_PAREN@61..62 "(" [] []
          1: JS_PARAMETER_LIST@62..72
            0: JS_FORMAL_PARAMETER@62..66
              0: JS_DECORATOR_LIST@62..62
              1: JS_IDENTIFIER_BINDING@62..63
                0: IDENT@62..63 "a" [] []
              2: (empty)
              3: TS_TYPE_ANNOTATION@63..66
                0: COLON@63..65 ":" [] [Whitespace(" ")]
                1: TS_REFERENCE_TYPE@65..66
                  0: JS_REFERENCE_IDENTIFIER@65..66
                    0: IDENT@65..66 "A" [] []
                  1: (empty)
              4: (empty)
            1: COMMA@66..68 "," [] [Whitespace(" ")]
            2: JS_FORMAL_PARAMETER@68..72
              0: JS_DECORATOR_LIST@68..68
              1: JS_IDENTIFIER_BINDING@68..69
                0: IDENT@68..69 "b" [] []
              2: (empty)
              3: TS_TYPE_ANNOTATION@69..72
                0: COLON@69..71 ":" [] [Whitespace(" ")]
                1: TS_REFERENCE_TYPE@71..72
                  0: JS_REFERENCE_IDENTIFIER@71..72
                    0: IDENT@71..72 "B" [] []
                  1: (empty)
              4: (empty)
          2: R_PAREN@72..74 ")" [] [Whitespace(" ")]
        4: FAT_ARROW@74..77 "=>" [] [Whitespace(" ")]
        5: TS_STRING_TYPE@77..83
          0: STRING_KW@77..83 "string" [] []
      5: SEMICOLON@83..84 ";" [] []
  4: EOF@84..85 "" [Newline("\n")] []
--
ts_constructor_type_err.ts:1:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a type parameter but instead found '>'.
  
  > 1 │ type C = new<>(a: A, b: B) => string;
      │              ^
    2 │ type D = abstract new<>(a: A, b: B) => string;
    3 │ 
  
  i Expected a type parameter here.
  
  > 1 │ type C = new<>(a: A, b: B) => string;
      │              ^
    2 │ type D = abstract new<>(a: A, b: B) => string;
    3 │ 
  
--
ts_constructor_type_err.ts:2:23 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a type parameter but instead found '>'.
  
    1 │ type C = new<>(a: A, b: B) => string;
  > 2 │ type D = abstract new<>(a: A, b: B) => string;
      │                       ^
    3 │ 
  
  i Expected a type parameter here.
  
    1 │ type C = new<>(a: A, b: B) => string;
  > 2 │ type D = abstract new<>(a: A, b: B) => string;
      │                       ^
    3 │ 
  
--
type C = new<>(a: A, b: B) => string;
type D = abstract new<>(a: A, b: B) => string;
