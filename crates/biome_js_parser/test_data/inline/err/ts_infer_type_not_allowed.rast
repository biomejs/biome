JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@0..5 "type" [] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@5..18 "WithSelectors" [] [],
            },
            type_parameters: TsTypeParameters {
                l_angle_token: L_ANGLE@18..19 "<" [] [],
                items: TsTypeParameterList [
                    TsTypeParameter {
                        modifiers: TsTypeParameterModifierList [],
                        name: TsTypeParameterName {
                            ident_token: IDENT@19..20 "S" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                ],
                r_angle_token: R_ANGLE@20..22 ">" [] [Whitespace(" ")],
            },
            eq_token: EQ@22..24 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@24..26 "S" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                extends_token: EXTENDS_KW@26..34 "extends" [] [Whitespace(" ")],
                extends_type: TsObjectType {
                    l_curly_token: L_CURLY@34..36 "{" [] [Whitespace(" ")],
                    members: TsTypeMemberList [
                        TsPropertySignatureTypeMember {
                            readonly_token: missing (optional),
                            name: JsLiteralMemberName {
                                value: IDENT@36..44 "getState" [] [],
                            },
                            optional_token: missing (optional),
                            type_annotation: TsTypeAnnotation {
                                colon_token: COLON@44..46 ":" [] [Whitespace(" ")],
                                ty: TsFunctionType {
                                    type_parameters: missing (optional),
                                    parameters: JsParameters {
                                        l_paren_token: L_PAREN@46..47 "(" [] [],
                                        items: JsParameterList [],
                                        r_paren_token: R_PAREN@47..49 ")" [] [Whitespace(" ")],
                                    },
                                    fat_arrow_token: FAT_ARROW@49..52 "=>" [] [Whitespace(" ")],
                                    return_type: TsInferType {
                                        infer_token: INFER_KW@52..58 "infer" [] [Whitespace(" ")],
                                        name: TsTypeParameterName {
                                            ident_token: IDENT@58..60 "T" [] [Whitespace(" ")],
                                        },
                                        constraint: missing (optional),
                                    },
                                },
                            },
                            separator_token: missing (optional),
                        },
                    ],
                    r_curly_token: R_CURLY@60..61 "}" [] [],
                },
                question_mark_token: QUESTION@61..66 "?" [Newline("\n"), Whitespace("  ")] [Whitespace(" ")],
                true_type: TsObjectType {
                    l_curly_token: L_CURLY@66..68 "{" [] [Whitespace(" ")],
                    members: TsTypeMemberList [
                        TsPropertySignatureTypeMember {
                            readonly_token: missing (optional),
                            name: JsLiteralMemberName {
                                value: IDENT@68..71 "use" [] [],
                            },
                            optional_token: missing (optional),
                            type_annotation: TsTypeAnnotation {
                                colon_token: COLON@71..73 ":" [] [Whitespace(" ")],
                                ty: TsMappedType {
                                    l_curly_token: L_CURLY@73..75 "{" [] [Whitespace(" ")],
                                    readonly_modifier: missing (optional),
                                    l_brack_token: L_BRACK@75..76 "[" [] [],
                                    property_name: TsTypeParameterName {
                                        ident_token: IDENT@76..78 "K" [] [Whitespace(" ")],
                                    },
                                    in_token: IN_KW@78..81 "in" [] [Whitespace(" ")],
                                    keys_type: TsTypeOperatorType {
                                        operator_token: KEYOF_KW@81..87 "keyof" [] [Whitespace(" ")],
                                        ty: TsBogusType {
                                            items: [
                                                INFER_KW@87..103 "infer" [] [Whitespace(" "), Comments("/*error*/"), Whitespace(" ")],
                                                TsTypeParameterName {
                                                    ident_token: IDENT@103..104 "T" [] [],
                                                },
                                            ],
                                        },
                                    },
                                    as_clause: missing (optional),
                                    r_brack_token: R_BRACK@104..105 "]" [] [],
                                    optional_modifier: missing (optional),
                                    mapped_type: TsTypeAnnotation {
                                        colon_token: COLON@105..107 ":" [] [Whitespace(" ")],
                                        ty: TsFunctionType {
                                            type_parameters: missing (optional),
                                            parameters: JsParameters {
                                                l_paren_token: L_PAREN@107..108 "(" [] [],
                                                items: JsParameterList [],
                                                r_paren_token: R_PAREN@108..110 ")" [] [Whitespace(" ")],
                                            },
                                            fat_arrow_token: FAT_ARROW@110..113 "=>" [] [Whitespace(" ")],
                                            return_type: TsIndexedAccessType {
                                                object_type: TsReferenceType {
                                                    name: JsReferenceIdentifier {
                                                        value_token: IDENT@113..114 "T" [] [],
                                                    },
                                                    type_arguments: missing (optional),
                                                },
                                                l_brack_token: L_BRACK@114..115 "[" [] [],
                                                index_type: TsReferenceType {
                                                    name: JsReferenceIdentifier {
                                                        value_token: IDENT@115..116 "K" [] [],
                                                    },
                                                    type_arguments: missing (optional),
                                                },
                                                r_brack_token: R_BRACK@116..118 "]" [] [Whitespace(" ")],
                                            },
                                        },
                                    },
                                    semicolon_token: missing (optional),
                                    r_curly_token: R_CURLY@118..120 "}" [] [Whitespace(" ")],
                                },
                            },
                            separator_token: missing (optional),
                        },
                    ],
                    r_curly_token: R_CURLY@120..121 "}" [] [],
                },
                colon_token: COLON@121..126 ":" [Newline("\n"), Whitespace("  ")] [Whitespace(" ")],
                false_type: TsNeverType {
                    never_token: NEVER_KW@126..131 "never" [] [],
                },
            },
            semicolon_token: SEMICOLON@131..132 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@132..138 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@138..142 "TV1" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@142..144 "=" [] [Whitespace(" ")],
            ty: TsTemplateLiteralType {
                l_tick_token: BACKTICK@144..145 "`" [] [],
                elements: TsTemplateElementList [
                    TsTemplateElement {
                        dollar_curly_token: DOLLAR_CURLY@145..147 "${" [] [],
                        ty: TsBogusType {
                            items: [
                                INFER_KW@147..153 "infer" [] [Whitespace(" ")],
                                TsTypeParameterName {
                                    ident_token: IDENT@153..154 "X" [] [],
                                },
                            ],
                        },
                        r_curly_token: R_CURLY@154..155 "}" [] [],
                    },
                ],
                r_tick_token: BACKTICK@155..156 "`" [] [],
            },
            semicolon_token: SEMICOLON@156..157 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@157..163 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@163..166 "T61" [] [],
            },
            type_parameters: TsTypeParameters {
                l_angle_token: L_ANGLE@166..167 "<" [] [],
                items: TsTypeParameterList [
                    TsTypeParameter {
                        modifiers: TsTypeParameterModifierList [],
                        name: TsTypeParameterName {
                            ident_token: IDENT@167..168 "T" [] [],
                        },
                        constraint: missing (optional),
                        default: missing (optional),
                    },
                ],
                r_angle_token: R_ANGLE@168..170 ">" [] [Whitespace(" ")],
            },
            eq_token: EQ@170..172 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsParenthesizedType {
                    l_paren_token: L_PAREN@172..173 "(" [] [],
                    ty: TsBogusType {
                        items: [
                            INFER_KW@173..179 "infer" [] [Whitespace(" ")],
                            TsTypeParameterName {
                                ident_token: IDENT@179..180 "A" [] [],
                            },
                        ],
                    },
                    r_paren_token: R_PAREN@180..182 ")" [] [Whitespace(" ")],
                },
                extends_token: EXTENDS_KW@182..190 "extends" [] [Whitespace(" ")],
                extends_type: TsInferType {
                    infer_token: INFER_KW@190..196 "infer" [] [Whitespace(" ")],
                    name: TsTypeParameterName {
                        ident_token: IDENT@196..198 "B" [] [Whitespace(" ")],
                    },
                    constraint: missing (optional),
                },
                question_mark_token: QUESTION@198..200 "?" [] [Whitespace(" ")],
                true_type: TsBogusType {
                    items: [
                        INFER_KW@200..206 "infer" [] [Whitespace(" ")],
                        TsTypeParameterName {
                            ident_token: IDENT@206..208 "C" [] [Whitespace(" ")],
                        },
                    ],
                },
                colon_token: COLON@208..210 ":" [] [Whitespace(" ")],
                false_type: TsBogusType {
                    items: [
                        INFER_KW@210..216 "infer" [] [Whitespace(" ")],
                        TsTypeParameterName {
                            ident_token: IDENT@216..217 "D" [] [],
                        },
                    ],
                },
            },
            semicolon_token: SEMICOLON@217..218 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@218..224 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@224..226 "A" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@226..228 "=" [] [Whitespace(" ")],
            ty: TsObjectType {
                l_curly_token: L_CURLY@228..229 "{" [] [],
                members: TsTypeMemberList [
                    TsPropertySignatureTypeMember {
                        readonly_token: missing (optional),
                        name: JsLiteralMemberName {
                            value: IDENT@229..230 "a" [] [],
                        },
                        optional_token: missing (optional),
                        type_annotation: TsTypeAnnotation {
                            colon_token: COLON@230..232 ":" [] [Whitespace(" ")],
                            ty: TsBogusType {
                                items: [
                                    INFER_KW@232..238 "infer" [] [Whitespace(" ")],
                                    TsTypeParameterName {
                                        ident_token: IDENT@238..239 "T" [] [],
                                    },
                                ],
                            },
                        },
                        separator_token: missing (optional),
                    },
                ],
                r_curly_token: R_CURLY@239..240 "}" [] [],
            },
            semicolon_token: missing (optional),
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@240..246 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@246..248 "A" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@248..250 "=" [] [Whitespace(" ")],
            ty: TsFunctionType {
                type_parameters: missing (optional),
                parameters: JsParameters {
                    l_paren_token: L_PAREN@250..251 "(" [] [],
                    items: JsParameterList [],
                    r_paren_token: R_PAREN@251..253 ")" [] [Whitespace(" ")],
                },
                fat_arrow_token: FAT_ARROW@253..256 "=>" [] [Whitespace(" ")],
                return_type: TsBogusType {
                    items: [
                        INFER_KW@256..262 "infer" [] [Whitespace(" ")],
                        TsTypeParameterName {
                            ident_token: IDENT@262..263 "T" [] [],
                        },
                    ],
                },
            },
            semicolon_token: SEMICOLON@263..264 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                await_token: missing (optional),
                kind: LET_KW@264..269 "let" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@269..270 "s" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@270..272 ":" [] [Whitespace(" ")],
                            ty: TsArrayType {
                                element_type: TsParenthesizedType {
                                    l_paren_token: L_PAREN@272..273 "(" [] [],
                                    ty: TsBogusType {
                                        items: [
                                            INFER_KW@273..279 "infer" [] [Whitespace(" ")],
                                            TsTypeParameterName {
                                                ident_token: IDENT@279..285 "string" [] [],
                                            },
                                        ],
                                    },
                                    r_paren_token: R_PAREN@285..286 ")" [] [],
                                },
                                l_brack_token: L_BRACK@286..287 "[" [] [],
                                r_brack_token: R_BRACK@287..289 "]" [] [Whitespace(" ")],
                            },
                        },
                        initializer: JsInitializerClause {
                            eq_token: EQ@289..291 "=" [] [Whitespace(" ")],
                            expression: JsCallExpression {
                                callee: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@291..297 "symbol" [] [],
                                    },
                                },
                                optional_chain_token: missing (optional),
                                type_arguments: missing (optional),
                                arguments: JsCallArguments {
                                    l_paren_token: L_PAREN@297..298 "(" [] [],
                                    args: JsCallArgumentList [],
                                    r_paren_token: R_PAREN@298..299 ")" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@299..300 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                await_token: missing (optional),
                kind: LET_KW@300..305 "let" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@305..306 "s" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@306..308 ":" [] [Whitespace(" ")],
                            ty: TsTypeOperatorType {
                                operator_token: UNIQUE_KW@308..315 "unique" [] [Whitespace(" ")],
                                ty: TsParenthesizedType {
                                    l_paren_token: L_PAREN@315..316 "(" [] [],
                                    ty: TsBogusType {
                                        items: [
                                            INFER_KW@316..322 "infer" [] [Whitespace(" ")],
                                            TsTypeParameterName {
                                                ident_token: IDENT@322..328 "string" [] [],
                                            },
                                        ],
                                    },
                                    r_paren_token: R_PAREN@328..329 ")" [] [],
                                },
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: SEMICOLON@329..330 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                await_token: missing (optional),
                kind: LET_KW@330..335 "let" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@335..336 "s" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@336..338 ":" [] [Whitespace(" ")],
                            ty: TsTupleType {
                                l_brack_token: L_BRACK@338..339 "[" [] [],
                                elements: TsTupleTypeElementList [
                                    TsNumberType {
                                        number_token: NUMBER_KW@339..345 "number" [] [],
                                    },
                                    COMMA@345..347 "," [] [Whitespace(" ")],
                                    TsRestTupleTypeElement {
                                        dotdotdot_token: DOT3@347..350 "..." [] [],
                                        ty: TsBogusType {
                                            items: [
                                                INFER_KW@350..356 "infer" [] [Whitespace(" ")],
                                                TsTypeParameterName {
                                                    ident_token: IDENT@356..362 "string" [] [],
                                                },
                                            ],
                                        },
                                    },
                                ],
                                r_brack_token: R_BRACK@362..363 "]" [] [],
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                await_token: missing (optional),
                kind: LET_KW@363..368 "let" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@368..369 "s" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@369..371 ":" [] [Whitespace(" ")],
                            ty: TsTupleType {
                                l_brack_token: L_BRACK@371..372 "[" [] [],
                                elements: TsTupleTypeElementList [
                                    TsOptionalTupleTypeElement {
                                        ty: TsParenthesizedType {
                                            l_paren_token: L_PAREN@372..373 "(" [] [],
                                            ty: TsBogusType {
                                                items: [
                                                    INFER_KW@373..379 "infer" [] [Whitespace(" ")],
                                                    TsTypeParameterName {
                                                        ident_token: IDENT@379..385 "string" [] [],
                                                    },
                                                ],
                                            },
                                            r_paren_token: R_PAREN@385..386 ")" [] [],
                                        },
                                        question_mark_token: QUESTION@386..387 "?" [] [],
                                    },
                                ],
                                r_brack_token: R_BRACK@387..388 "]" [] [],
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                await_token: missing (optional),
                kind: LET_KW@388..393 "let" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@393..394 "s" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@394..396 ":" [] [Whitespace(" ")],
                            ty: TsIndexedAccessType {
                                object_type: TsParenthesizedType {
                                    l_paren_token: L_PAREN@396..397 "(" [] [],
                                    ty: TsBogusType {
                                        items: [
                                            INFER_KW@397..403 "infer" [] [Whitespace(" ")],
                                            TsTypeParameterName {
                                                ident_token: IDENT@403..409 "string" [] [],
                                            },
                                        ],
                                    },
                                    r_paren_token: R_PAREN@409..410 ")" [] [],
                                },
                                l_brack_token: L_BRACK@410..411 "[" [] [],
                                index_type: TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@411..412 "a" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                                r_brack_token: R_BRACK@412..413 "]" [] [],
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                await_token: missing (optional),
                kind: LET_KW@413..418 "let" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@418..419 "s" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@419..421 ":" [] [Whitespace(" ")],
                            ty: TsIndexedAccessType {
                                object_type: TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@421..422 "a" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                                l_brack_token: L_BRACK@422..423 "[" [] [],
                                index_type: TsParenthesizedType {
                                    l_paren_token: L_PAREN@423..424 "(" [] [],
                                    ty: TsBogusType {
                                        items: [
                                            INFER_KW@424..430 "infer" [] [Whitespace(" ")],
                                            TsTypeParameterName {
                                                ident_token: IDENT@430..436 "string" [] [],
                                            },
                                        ],
                                    },
                                    r_paren_token: R_PAREN@436..437 ")" [] [],
                                },
                                r_brack_token: R_BRACK@437..438 "]" [] [],
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
    ],
    eof_token: EOF@438..439 "" [Newline("\n")] [],
}

0: JS_MODULE@0..439
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..438
    0: TS_TYPE_ALIAS_DECLARATION@0..132
      0: TYPE_KW@0..5 "type" [] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@5..18
        0: IDENT@5..18 "WithSelectors" [] []
      2: TS_TYPE_PARAMETERS@18..22
        0: L_ANGLE@18..19 "<" [] []
        1: TS_TYPE_PARAMETER_LIST@19..20
          0: TS_TYPE_PARAMETER@19..20
            0: TS_TYPE_PARAMETER_MODIFIER_LIST@19..19
            1: TS_TYPE_PARAMETER_NAME@19..20
              0: IDENT@19..20 "S" [] []
            2: (empty)
            3: (empty)
        2: R_ANGLE@20..22 ">" [] [Whitespace(" ")]
      3: EQ@22..24 "=" [] [Whitespace(" ")]
      4: TS_CONDITIONAL_TYPE@24..131
        0: TS_REFERENCE_TYPE@24..26
          0: JS_REFERENCE_IDENTIFIER@24..26
            0: IDENT@24..26 "S" [] [Whitespace(" ")]
          1: (empty)
        1: EXTENDS_KW@26..34 "extends" [] [Whitespace(" ")]
        2: TS_OBJECT_TYPE@34..61
          0: L_CURLY@34..36 "{" [] [Whitespace(" ")]
          1: TS_TYPE_MEMBER_LIST@36..60
            0: TS_PROPERTY_SIGNATURE_TYPE_MEMBER@36..60
              0: (empty)
              1: JS_LITERAL_MEMBER_NAME@36..44
                0: IDENT@36..44 "getState" [] []
              2: (empty)
              3: TS_TYPE_ANNOTATION@44..60
                0: COLON@44..46 ":" [] [Whitespace(" ")]
                1: TS_FUNCTION_TYPE@46..60
                  0: (empty)
                  1: JS_PARAMETERS@46..49
                    0: L_PAREN@46..47 "(" [] []
                    1: JS_PARAMETER_LIST@47..47
                    2: R_PAREN@47..49 ")" [] [Whitespace(" ")]
                  2: FAT_ARROW@49..52 "=>" [] [Whitespace(" ")]
                  3: TS_INFER_TYPE@52..60
                    0: INFER_KW@52..58 "infer" [] [Whitespace(" ")]
                    1: TS_TYPE_PARAMETER_NAME@58..60
                      0: IDENT@58..60 "T" [] [Whitespace(" ")]
                    2: (empty)
              4: (empty)
          2: R_CURLY@60..61 "}" [] []
        3: QUESTION@61..66 "?" [Newline("\n"), Whitespace("  ")] [Whitespace(" ")]
        4: TS_OBJECT_TYPE@66..121
          0: L_CURLY@66..68 "{" [] [Whitespace(" ")]
          1: TS_TYPE_MEMBER_LIST@68..120
            0: TS_PROPERTY_SIGNATURE_TYPE_MEMBER@68..120
              0: (empty)
              1: JS_LITERAL_MEMBER_NAME@68..71
                0: IDENT@68..71 "use" [] []
              2: (empty)
              3: TS_TYPE_ANNOTATION@71..120
                0: COLON@71..73 ":" [] [Whitespace(" ")]
                1: TS_MAPPED_TYPE@73..120
                  0: L_CURLY@73..75 "{" [] [Whitespace(" ")]
                  1: (empty)
                  2: L_BRACK@75..76 "[" [] []
                  3: TS_TYPE_PARAMETER_NAME@76..78
                    0: IDENT@76..78 "K" [] [Whitespace(" ")]
                  4: IN_KW@78..81 "in" [] [Whitespace(" ")]
                  5: TS_TYPE_OPERATOR_TYPE@81..104
                    0: KEYOF_KW@81..87 "keyof" [] [Whitespace(" ")]
                    1: TS_BOGUS_TYPE@87..104
                      0: INFER_KW@87..103 "infer" [] [Whitespace(" "), Comments("/*error*/"), Whitespace(" ")]
                      1: TS_TYPE_PARAMETER_NAME@103..104
                        0: IDENT@103..104 "T" [] []
                  6: (empty)
                  7: R_BRACK@104..105 "]" [] []
                  8: (empty)
                  9: TS_TYPE_ANNOTATION@105..118
                    0: COLON@105..107 ":" [] [Whitespace(" ")]
                    1: TS_FUNCTION_TYPE@107..118
                      0: (empty)
                      1: JS_PARAMETERS@107..110
                        0: L_PAREN@107..108 "(" [] []
                        1: JS_PARAMETER_LIST@108..108
                        2: R_PAREN@108..110 ")" [] [Whitespace(" ")]
                      2: FAT_ARROW@110..113 "=>" [] [Whitespace(" ")]
                      3: TS_INDEXED_ACCESS_TYPE@113..118
                        0: TS_REFERENCE_TYPE@113..114
                          0: JS_REFERENCE_IDENTIFIER@113..114
                            0: IDENT@113..114 "T" [] []
                          1: (empty)
                        1: L_BRACK@114..115 "[" [] []
                        2: TS_REFERENCE_TYPE@115..116
                          0: JS_REFERENCE_IDENTIFIER@115..116
                            0: IDENT@115..116 "K" [] []
                          1: (empty)
                        3: R_BRACK@116..118 "]" [] [Whitespace(" ")]
                  10: (empty)
                  11: R_CURLY@118..120 "}" [] [Whitespace(" ")]
              4: (empty)
          2: R_CURLY@120..121 "}" [] []
        5: COLON@121..126 ":" [Newline("\n"), Whitespace("  ")] [Whitespace(" ")]
        6: TS_NEVER_TYPE@126..131
          0: NEVER_KW@126..131 "never" [] []
      5: SEMICOLON@131..132 ";" [] []
    1: TS_TYPE_ALIAS_DECLARATION@132..157
      0: TYPE_KW@132..138 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@138..142
        0: IDENT@138..142 "TV1" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@142..144 "=" [] [Whitespace(" ")]
      4: TS_TEMPLATE_LITERAL_TYPE@144..156
        0: BACKTICK@144..145 "`" [] []
        1: TS_TEMPLATE_ELEMENT_LIST@145..155
          0: TS_TEMPLATE_ELEMENT@145..155
            0: DOLLAR_CURLY@145..147 "${" [] []
            1: TS_BOGUS_TYPE@147..154
              0: INFER_KW@147..153 "infer" [] [Whitespace(" ")]
              1: TS_TYPE_PARAMETER_NAME@153..154
                0: IDENT@153..154 "X" [] []
            2: R_CURLY@154..155 "}" [] []
        2: BACKTICK@155..156 "`" [] []
      5: SEMICOLON@156..157 ";" [] []
    2: TS_TYPE_ALIAS_DECLARATION@157..218
      0: TYPE_KW@157..163 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@163..166
        0: IDENT@163..166 "T61" [] []
      2: TS_TYPE_PARAMETERS@166..170
        0: L_ANGLE@166..167 "<" [] []
        1: TS_TYPE_PARAMETER_LIST@167..168
          0: TS_TYPE_PARAMETER@167..168
            0: TS_TYPE_PARAMETER_MODIFIER_LIST@167..167
            1: TS_TYPE_PARAMETER_NAME@167..168
              0: IDENT@167..168 "T" [] []
            2: (empty)
            3: (empty)
        2: R_ANGLE@168..170 ">" [] [Whitespace(" ")]
      3: EQ@170..172 "=" [] [Whitespace(" ")]
      4: TS_CONDITIONAL_TYPE@172..217
        0: TS_PARENTHESIZED_TYPE@172..182
          0: L_PAREN@172..173 "(" [] []
          1: TS_BOGUS_TYPE@173..180
            0: INFER_KW@173..179 "infer" [] [Whitespace(" ")]
            1: TS_TYPE_PARAMETER_NAME@179..180
              0: IDENT@179..180 "A" [] []
          2: R_PAREN@180..182 ")" [] [Whitespace(" ")]
        1: EXTENDS_KW@182..190 "extends" [] [Whitespace(" ")]
        2: TS_INFER_TYPE@190..198
          0: INFER_KW@190..196 "infer" [] [Whitespace(" ")]
          1: TS_TYPE_PARAMETER_NAME@196..198
            0: IDENT@196..198 "B" [] [Whitespace(" ")]
          2: (empty)
        3: QUESTION@198..200 "?" [] [Whitespace(" ")]
        4: TS_BOGUS_TYPE@200..208
          0: INFER_KW@200..206 "infer" [] [Whitespace(" ")]
          1: TS_TYPE_PARAMETER_NAME@206..208
            0: IDENT@206..208 "C" [] [Whitespace(" ")]
        5: COLON@208..210 ":" [] [Whitespace(" ")]
        6: TS_BOGUS_TYPE@210..217
          0: INFER_KW@210..216 "infer" [] [Whitespace(" ")]
          1: TS_TYPE_PARAMETER_NAME@216..217
            0: IDENT@216..217 "D" [] []
      5: SEMICOLON@217..218 ";" [] []
    3: TS_TYPE_ALIAS_DECLARATION@218..240
      0: TYPE_KW@218..224 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@224..226
        0: IDENT@224..226 "A" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@226..228 "=" [] [Whitespace(" ")]
      4: TS_OBJECT_TYPE@228..240
        0: L_CURLY@228..229 "{" [] []
        1: TS_TYPE_MEMBER_LIST@229..239
          0: TS_PROPERTY_SIGNATURE_TYPE_MEMBER@229..239
            0: (empty)
            1: JS_LITERAL_MEMBER_NAME@229..230
              0: IDENT@229..230 "a" [] []
            2: (empty)
            3: TS_TYPE_ANNOTATION@230..239
              0: COLON@230..232 ":" [] [Whitespace(" ")]
              1: TS_BOGUS_TYPE@232..239
                0: INFER_KW@232..238 "infer" [] [Whitespace(" ")]
                1: TS_TYPE_PARAMETER_NAME@238..239
                  0: IDENT@238..239 "T" [] []
            4: (empty)
        2: R_CURLY@239..240 "}" [] []
      5: (empty)
    4: TS_TYPE_ALIAS_DECLARATION@240..264
      0: TYPE_KW@240..246 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@246..248
        0: IDENT@246..248 "A" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@248..250 "=" [] [Whitespace(" ")]
      4: TS_FUNCTION_TYPE@250..263
        0: (empty)
        1: JS_PARAMETERS@250..253
          0: L_PAREN@250..251 "(" [] []
          1: JS_PARAMETER_LIST@251..251
          2: R_PAREN@251..253 ")" [] [Whitespace(" ")]
        2: FAT_ARROW@253..256 "=>" [] [Whitespace(" ")]
        3: TS_BOGUS_TYPE@256..263
          0: INFER_KW@256..262 "infer" [] [Whitespace(" ")]
          1: TS_TYPE_PARAMETER_NAME@262..263
            0: IDENT@262..263 "T" [] []
      5: SEMICOLON@263..264 ";" [] []
    5: JS_VARIABLE_STATEMENT@264..300
      0: JS_VARIABLE_DECLARATION@264..299
        0: (empty)
        1: LET_KW@264..269 "let" [Newline("\n")] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR_LIST@269..299
          0: JS_VARIABLE_DECLARATOR@269..299
            0: JS_IDENTIFIER_BINDING@269..270
              0: IDENT@269..270 "s" [] []
            1: TS_TYPE_ANNOTATION@270..289
              0: COLON@270..272 ":" [] [Whitespace(" ")]
              1: TS_ARRAY_TYPE@272..289
                0: TS_PARENTHESIZED_TYPE@272..286
                  0: L_PAREN@272..273 "(" [] []
                  1: TS_BOGUS_TYPE@273..285
                    0: INFER_KW@273..279 "infer" [] [Whitespace(" ")]
                    1: TS_TYPE_PARAMETER_NAME@279..285
                      0: IDENT@279..285 "string" [] []
                  2: R_PAREN@285..286 ")" [] []
                1: L_BRACK@286..287 "[" [] []
                2: R_BRACK@287..289 "]" [] [Whitespace(" ")]
            2: JS_INITIALIZER_CLAUSE@289..299
              0: EQ@289..291 "=" [] [Whitespace(" ")]
              1: JS_CALL_EXPRESSION@291..299
                0: JS_IDENTIFIER_EXPRESSION@291..297
                  0: JS_REFERENCE_IDENTIFIER@291..297
                    0: IDENT@291..297 "symbol" [] []
                1: (empty)
                2: (empty)
                3: JS_CALL_ARGUMENTS@297..299
                  0: L_PAREN@297..298 "(" [] []
                  1: JS_CALL_ARGUMENT_LIST@298..298
                  2: R_PAREN@298..299 ")" [] []
      1: SEMICOLON@299..300 ";" [] []
    6: JS_VARIABLE_STATEMENT@300..330
      0: JS_VARIABLE_DECLARATION@300..329
        0: (empty)
        1: LET_KW@300..305 "let" [Newline("\n")] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR_LIST@305..329
          0: JS_VARIABLE_DECLARATOR@305..329
            0: JS_IDENTIFIER_BINDING@305..306
              0: IDENT@305..306 "s" [] []
            1: TS_TYPE_ANNOTATION@306..329
              0: COLON@306..308 ":" [] [Whitespace(" ")]
              1: TS_TYPE_OPERATOR_TYPE@308..329
                0: UNIQUE_KW@308..315 "unique" [] [Whitespace(" ")]
                1: TS_PARENTHESIZED_TYPE@315..329
                  0: L_PAREN@315..316 "(" [] []
                  1: TS_BOGUS_TYPE@316..328
                    0: INFER_KW@316..322 "infer" [] [Whitespace(" ")]
                    1: TS_TYPE_PARAMETER_NAME@322..328
                      0: IDENT@322..328 "string" [] []
                  2: R_PAREN@328..329 ")" [] []
            2: (empty)
      1: SEMICOLON@329..330 ";" [] []
    7: JS_VARIABLE_STATEMENT@330..363
      0: JS_VARIABLE_DECLARATION@330..363
        0: (empty)
        1: LET_KW@330..335 "let" [Newline("\n")] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR_LIST@335..363
          0: JS_VARIABLE_DECLARATOR@335..363
            0: JS_IDENTIFIER_BINDING@335..336
              0: IDENT@335..336 "s" [] []
            1: TS_TYPE_ANNOTATION@336..363
              0: COLON@336..338 ":" [] [Whitespace(" ")]
              1: TS_TUPLE_TYPE@338..363
                0: L_BRACK@338..339 "[" [] []
                1: TS_TUPLE_TYPE_ELEMENT_LIST@339..362
                  0: TS_NUMBER_TYPE@339..345
                    0: NUMBER_KW@339..345 "number" [] []
                  1: COMMA@345..347 "," [] [Whitespace(" ")]
                  2: TS_REST_TUPLE_TYPE_ELEMENT@347..362
                    0: DOT3@347..350 "..." [] []
                    1: TS_BOGUS_TYPE@350..362
                      0: INFER_KW@350..356 "infer" [] [Whitespace(" ")]
                      1: TS_TYPE_PARAMETER_NAME@356..362
                        0: IDENT@356..362 "string" [] []
                2: R_BRACK@362..363 "]" [] []
            2: (empty)
      1: (empty)
    8: JS_VARIABLE_STATEMENT@363..388
      0: JS_VARIABLE_DECLARATION@363..388
        0: (empty)
        1: LET_KW@363..368 "let" [Newline("\n")] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR_LIST@368..388
          0: JS_VARIABLE_DECLARATOR@368..388
            0: JS_IDENTIFIER_BINDING@368..369
              0: IDENT@368..369 "s" [] []
            1: TS_TYPE_ANNOTATION@369..388
              0: COLON@369..371 ":" [] [Whitespace(" ")]
              1: TS_TUPLE_TYPE@371..388
                0: L_BRACK@371..372 "[" [] []
                1: TS_TUPLE_TYPE_ELEMENT_LIST@372..387
                  0: TS_OPTIONAL_TUPLE_TYPE_ELEMENT@372..387
                    0: TS_PARENTHESIZED_TYPE@372..386
                      0: L_PAREN@372..373 "(" [] []
                      1: TS_BOGUS_TYPE@373..385
                        0: INFER_KW@373..379 "infer" [] [Whitespace(" ")]
                        1: TS_TYPE_PARAMETER_NAME@379..385
                          0: IDENT@379..385 "string" [] []
                      2: R_PAREN@385..386 ")" [] []
                    1: QUESTION@386..387 "?" [] []
                2: R_BRACK@387..388 "]" [] []
            2: (empty)
      1: (empty)
    9: JS_VARIABLE_STATEMENT@388..413
      0: JS_VARIABLE_DECLARATION@388..413
        0: (empty)
        1: LET_KW@388..393 "let" [Newline("\n")] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR_LIST@393..413
          0: JS_VARIABLE_DECLARATOR@393..413
            0: JS_IDENTIFIER_BINDING@393..394
              0: IDENT@393..394 "s" [] []
            1: TS_TYPE_ANNOTATION@394..413
              0: COLON@394..396 ":" [] [Whitespace(" ")]
              1: TS_INDEXED_ACCESS_TYPE@396..413
                0: TS_PARENTHESIZED_TYPE@396..410
                  0: L_PAREN@396..397 "(" [] []
                  1: TS_BOGUS_TYPE@397..409
                    0: INFER_KW@397..403 "infer" [] [Whitespace(" ")]
                    1: TS_TYPE_PARAMETER_NAME@403..409
                      0: IDENT@403..409 "string" [] []
                  2: R_PAREN@409..410 ")" [] []
                1: L_BRACK@410..411 "[" [] []
                2: TS_REFERENCE_TYPE@411..412
                  0: JS_REFERENCE_IDENTIFIER@411..412
                    0: IDENT@411..412 "a" [] []
                  1: (empty)
                3: R_BRACK@412..413 "]" [] []
            2: (empty)
      1: (empty)
    10: JS_VARIABLE_STATEMENT@413..438
      0: JS_VARIABLE_DECLARATION@413..438
        0: (empty)
        1: LET_KW@413..418 "let" [Newline("\n")] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR_LIST@418..438
          0: JS_VARIABLE_DECLARATOR@418..438
            0: JS_IDENTIFIER_BINDING@418..419
              0: IDENT@418..419 "s" [] []
            1: TS_TYPE_ANNOTATION@419..438
              0: COLON@419..421 ":" [] [Whitespace(" ")]
              1: TS_INDEXED_ACCESS_TYPE@421..438
                0: TS_REFERENCE_TYPE@421..422
                  0: JS_REFERENCE_IDENTIFIER@421..422
                    0: IDENT@421..422 "a" [] []
                  1: (empty)
                1: L_BRACK@422..423 "[" [] []
                2: TS_PARENTHESIZED_TYPE@423..437
                  0: L_PAREN@423..424 "(" [] []
                  1: TS_BOGUS_TYPE@424..436
                    0: INFER_KW@424..430 "infer" [] [Whitespace(" ")]
                    1: TS_TYPE_PARAMETER_NAME@430..436
                      0: IDENT@430..436 "string" [] []
                  2: R_PAREN@436..437 ")" [] []
                3: R_BRACK@437..438 "]" [] []
            2: (empty)
      1: (empty)
  3: EOF@438..439 "" [Newline("\n")] []
--
ts_infer_type_not_allowed.ts:2:26 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'infer' declarations are only permitted in the 'extends' clause of a conditional type.
  
    1 │ type WithSelectors<S> = S extends { getState: () => infer T }
  > 2 │   ? { use: { [K in keyof infer /*error*/ T]: () => T[K] } }
      │                          ^^^^^^^^^^^^^^^^^
    3 │   : never;
    4 │ type TV1 = `${infer X}`;
  
--
ts_infer_type_not_allowed.ts:4:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'infer' declarations are only permitted in the 'extends' clause of a conditional type.
  
    2 │   ? { use: { [K in keyof infer /*error*/ T]: () => T[K] } }
    3 │   : never;
  > 4 │ type TV1 = `${infer X}`;
      │               ^^^^^^^
    5 │ type T61<T> = (infer A) extends infer B ? infer C : infer D;
    6 │ type A = {a: infer T}
  
--
ts_infer_type_not_allowed.ts:5:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'infer' declarations are only permitted in the 'extends' clause of a conditional type.
  
    3 │   : never;
    4 │ type TV1 = `${infer X}`;
  > 5 │ type T61<T> = (infer A) extends infer B ? infer C : infer D;
      │                ^^^^^^^
    6 │ type A = {a: infer T}
    7 │ type A = () => infer T;
  
--
ts_infer_type_not_allowed.ts:5:43 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'infer' declarations are only permitted in the 'extends' clause of a conditional type.
  
    3 │   : never;
    4 │ type TV1 = `${infer X}`;
  > 5 │ type T61<T> = (infer A) extends infer B ? infer C : infer D;
      │                                           ^^^^^^^
    6 │ type A = {a: infer T}
    7 │ type A = () => infer T;
  
--
ts_infer_type_not_allowed.ts:5:53 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'infer' declarations are only permitted in the 'extends' clause of a conditional type.
  
    3 │   : never;
    4 │ type TV1 = `${infer X}`;
  > 5 │ type T61<T> = (infer A) extends infer B ? infer C : infer D;
      │                                                     ^^^^^^^
    6 │ type A = {a: infer T}
    7 │ type A = () => infer T;
  
--
ts_infer_type_not_allowed.ts:6:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'infer' declarations are only permitted in the 'extends' clause of a conditional type.
  
    4 │ type TV1 = `${infer X}`;
    5 │ type T61<T> = (infer A) extends infer B ? infer C : infer D;
  > 6 │ type A = {a: infer T}
      │              ^^^^^^^
    7 │ type A = () => infer T;
    8 │ let s: (infer string)[] = symbol();
  
--
ts_infer_type_not_allowed.ts:7:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'infer' declarations are only permitted in the 'extends' clause of a conditional type.
  
    5 │ type T61<T> = (infer A) extends infer B ? infer C : infer D;
    6 │ type A = {a: infer T}
  > 7 │ type A = () => infer T;
      │                ^^^^^^^
    8 │ let s: (infer string)[] = symbol();
    9 │ let s: unique (infer string);
  
--
ts_infer_type_not_allowed.ts:8:9 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'infer' declarations are only permitted in the 'extends' clause of a conditional type.
  
     6 │ type A = {a: infer T}
     7 │ type A = () => infer T;
   > 8 │ let s: (infer string)[] = symbol();
       │         ^^^^^^^^^^^^
     9 │ let s: unique (infer string);
    10 │ let s: [number, ...infer string]
  
--
ts_infer_type_not_allowed.ts:9:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'infer' declarations are only permitted in the 'extends' clause of a conditional type.
  
     7 │ type A = () => infer T;
     8 │ let s: (infer string)[] = symbol();
   > 9 │ let s: unique (infer string);
       │                ^^^^^^^^^^^^
    10 │ let s: [number, ...infer string]
    11 │ let s: [(infer string)?]
  
--
ts_infer_type_not_allowed.ts:10:20 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'infer' declarations are only permitted in the 'extends' clause of a conditional type.
  
     8 │ let s: (infer string)[] = symbol();
     9 │ let s: unique (infer string);
  > 10 │ let s: [number, ...infer string]
       │                    ^^^^^^^^^^^^
    11 │ let s: [(infer string)?]
    12 │ let s: (infer string)[a]
  
--
ts_infer_type_not_allowed.ts:11:10 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'infer' declarations are only permitted in the 'extends' clause of a conditional type.
  
     9 │ let s: unique (infer string);
    10 │ let s: [number, ...infer string]
  > 11 │ let s: [(infer string)?]
       │          ^^^^^^^^^^^^
    12 │ let s: (infer string)[a]
    13 │ let s: a[(infer string)]
  
--
ts_infer_type_not_allowed.ts:12:9 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'infer' declarations are only permitted in the 'extends' clause of a conditional type.
  
    10 │ let s: [number, ...infer string]
    11 │ let s: [(infer string)?]
  > 12 │ let s: (infer string)[a]
       │         ^^^^^^^^^^^^
    13 │ let s: a[(infer string)]
    14 │ 
  
--
ts_infer_type_not_allowed.ts:13:11 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'infer' declarations are only permitted in the 'extends' clause of a conditional type.
  
    11 │ let s: [(infer string)?]
    12 │ let s: (infer string)[a]
  > 13 │ let s: a[(infer string)]
       │           ^^^^^^^^^^^^
    14 │ 
  
--
type WithSelectors<S> = S extends { getState: () => infer T }
  ? { use: { [K in keyof infer /*error*/ T]: () => T[K] } }
  : never;
type TV1 = `${infer X}`;
type T61<T> = (infer A) extends infer B ? infer C : infer D;
type A = {a: infer T}
type A = () => infer T;
let s: (infer string)[] = symbol();
let s: unique (infer string);
let s: [number, ...infer string]
let s: [(infer string)?]
let s: (infer string)[a]
let s: a[(infer string)]
