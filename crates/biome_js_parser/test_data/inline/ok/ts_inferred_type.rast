JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@0..5 "type" [] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@5..7 "A" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@7..9 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@9..11 "A" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                extends_token: EXTENDS_KW@11..19 "extends" [] [Whitespace(" ")],
                extends_type: TsInferType {
                    infer_token: INFER_KW@19..25 "infer" [] [Whitespace(" ")],
                    name: TsTypeParameterName {
                        ident_token: IDENT@25..27 "B" [] [Whitespace(" ")],
                    },
                    constraint: missing (optional),
                },
                question_mark_token: QUESTION@27..29 "?" [] [Whitespace(" ")],
                true_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@29..31 "B" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                colon_token: COLON@31..33 ":" [] [Whitespace(" ")],
                false_type: TsNeverType {
                    never_token: NEVER_KW@33..38 "never" [] [],
                },
            },
            semicolon_token: SEMICOLON@38..39 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@39..45 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@45..47 "B" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@47..49 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@49..51 "A" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                extends_token: EXTENDS_KW@51..59 "extends" [] [Whitespace(" ")],
                extends_type: TsObjectType {
                    l_curly_token: L_CURLY@59..61 "{" [] [Whitespace(" ")],
                    members: TsTypeMemberList [
                        TsPropertySignatureTypeMember {
                            readonly_token: missing (optional),
                            name: JsLiteralMemberName {
                                value: IDENT@61..62 "a" [] [],
                            },
                            optional_token: missing (optional),
                            type_annotation: TsTypeAnnotation {
                                colon_token: COLON@62..64 ":" [] [Whitespace(" ")],
                                ty: TsInferType {
                                    infer_token: INFER_KW@64..70 "infer" [] [Whitespace(" ")],
                                    name: TsTypeParameterName {
                                        ident_token: IDENT@70..71 "U" [] [],
                                    },
                                    constraint: missing (optional),
                                },
                            },
                            separator_token: SEMICOLON@71..73 ";" [] [Whitespace(" ")],
                        },
                        TsPropertySignatureTypeMember {
                            readonly_token: missing (optional),
                            name: JsLiteralMemberName {
                                value: IDENT@73..74 "b" [] [],
                            },
                            optional_token: missing (optional),
                            type_annotation: TsTypeAnnotation {
                                colon_token: COLON@74..76 ":" [] [Whitespace(" ")],
                                ty: TsInferType {
                                    infer_token: INFER_KW@76..82 "infer" [] [Whitespace(" ")],
                                    name: TsTypeParameterName {
                                        ident_token: IDENT@82..83 "U" [] [],
                                    },
                                    constraint: missing (optional),
                                },
                            },
                            separator_token: missing (optional),
                        },
                    ],
                    r_curly_token: R_CURLY@83..85 "}" [] [Whitespace(" ")],
                },
                question_mark_token: QUESTION@85..87 "?" [] [Whitespace(" ")],
                true_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@87..89 "U" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                colon_token: COLON@89..91 ":" [] [Whitespace(" ")],
                false_type: TsNeverType {
                    never_token: NEVER_KW@91..96 "never" [] [],
                },
            },
            semicolon_token: SEMICOLON@96..97 ";" [] [],
        },
    ],
    eof_token: EOF@97..98 "" [Newline("\n")] [],
}

0: JS_MODULE@0..98
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..97
    0: TS_TYPE_ALIAS_DECLARATION@0..39
      0: TYPE_KW@0..5 "type" [] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@5..7
        0: IDENT@5..7 "A" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@7..9 "=" [] [Whitespace(" ")]
      4: TS_CONDITIONAL_TYPE@9..38
        0: TS_REFERENCE_TYPE@9..11
          0: JS_REFERENCE_IDENTIFIER@9..11
            0: IDENT@9..11 "A" [] [Whitespace(" ")]
          1: (empty)
        1: EXTENDS_KW@11..19 "extends" [] [Whitespace(" ")]
        2: TS_INFER_TYPE@19..27
          0: INFER_KW@19..25 "infer" [] [Whitespace(" ")]
          1: TS_TYPE_PARAMETER_NAME@25..27
            0: IDENT@25..27 "B" [] [Whitespace(" ")]
          2: (empty)
        3: QUESTION@27..29 "?" [] [Whitespace(" ")]
        4: TS_REFERENCE_TYPE@29..31
          0: JS_REFERENCE_IDENTIFIER@29..31
            0: IDENT@29..31 "B" [] [Whitespace(" ")]
          1: (empty)
        5: COLON@31..33 ":" [] [Whitespace(" ")]
        6: TS_NEVER_TYPE@33..38
          0: NEVER_KW@33..38 "never" [] []
      5: SEMICOLON@38..39 ";" [] []
    1: TS_TYPE_ALIAS_DECLARATION@39..97
      0: TYPE_KW@39..45 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@45..47
        0: IDENT@45..47 "B" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@47..49 "=" [] [Whitespace(" ")]
      4: TS_CONDITIONAL_TYPE@49..96
        0: TS_REFERENCE_TYPE@49..51
          0: JS_REFERENCE_IDENTIFIER@49..51
            0: IDENT@49..51 "A" [] [Whitespace(" ")]
          1: (empty)
        1: EXTENDS_KW@51..59 "extends" [] [Whitespace(" ")]
        2: TS_OBJECT_TYPE@59..85
          0: L_CURLY@59..61 "{" [] [Whitespace(" ")]
          1: TS_TYPE_MEMBER_LIST@61..83
            0: TS_PROPERTY_SIGNATURE_TYPE_MEMBER@61..73
              0: (empty)
              1: JS_LITERAL_MEMBER_NAME@61..62
                0: IDENT@61..62 "a" [] []
              2: (empty)
              3: TS_TYPE_ANNOTATION@62..71
                0: COLON@62..64 ":" [] [Whitespace(" ")]
                1: TS_INFER_TYPE@64..71
                  0: INFER_KW@64..70 "infer" [] [Whitespace(" ")]
                  1: TS_TYPE_PARAMETER_NAME@70..71
                    0: IDENT@70..71 "U" [] []
                  2: (empty)
              4: SEMICOLON@71..73 ";" [] [Whitespace(" ")]
            1: TS_PROPERTY_SIGNATURE_TYPE_MEMBER@73..83
              0: (empty)
              1: JS_LITERAL_MEMBER_NAME@73..74
                0: IDENT@73..74 "b" [] []
              2: (empty)
              3: TS_TYPE_ANNOTATION@74..83
                0: COLON@74..76 ":" [] [Whitespace(" ")]
                1: TS_INFER_TYPE@76..83
                  0: INFER_KW@76..82 "infer" [] [Whitespace(" ")]
                  1: TS_TYPE_PARAMETER_NAME@82..83
                    0: IDENT@82..83 "U" [] []
                  2: (empty)
              4: (empty)
          2: R_CURLY@83..85 "}" [] [Whitespace(" ")]
        3: QUESTION@85..87 "?" [] [Whitespace(" ")]
        4: TS_REFERENCE_TYPE@87..89
          0: JS_REFERENCE_IDENTIFIER@87..89
            0: IDENT@87..89 "U" [] [Whitespace(" ")]
          1: (empty)
        5: COLON@89..91 ":" [] [Whitespace(" ")]
        6: TS_NEVER_TYPE@91..96
          0: NEVER_KW@91..96 "never" [] []
      5: SEMICOLON@96..97 ";" [] []
  3: EOF@97..98 "" [Newline("\n")] []
