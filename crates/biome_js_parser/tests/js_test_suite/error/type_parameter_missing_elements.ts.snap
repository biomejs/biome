---
source: crates/biome_js_parser/tests/spec_test.rs
assertion_line: 177
expression: snapshot
---
## Input

```ts
type Foo<, A> = A;

type Foo<A, , B> = A & B;

```


## AST

```
JsModule {
    bom_token: missing (optional),
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsBogusStatement {
            items: [
                TYPE_KW@0..5 "type" [] [Whitespace(" ")],
                TsIdentifierBinding {
                    name_token: IDENT@5..8 "Foo" [] [],
                },
                JsBogus {
                    items: [
                        L_ANGLE@8..9 "<" [] [],
                        JsBogus {
                            items: [
                                TsTypeParameterModifierList [],
                            ],
                        },
                    ],
                },
            ],
        },
        JsBogusStatement {
            items: [
                COMMA@9..11 "," [] [Whitespace(" ")],
                IDENT@11..12 "A" [] [],
                R_ANGLE@12..14 ">" [] [Whitespace(" ")],
                EQ@14..16 "=" [] [Whitespace(" ")],
                IDENT@16..17 "A" [] [],
            ],
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@17..18 ";" [] [],
        },
        JsBogusStatement {
            items: [
                TYPE_KW@18..25 "type" [Newline("\n"), Newline("\n")] [Whitespace(" ")],
                TsIdentifierBinding {
                    name_token: IDENT@25..28 "Foo" [] [],
                },
                JsBogus {
                    items: [
                        L_ANGLE@28..29 "<" [] [],
                        JsBogus {
                            items: [
                                TsTypeParameter {
                                    modifiers: TsTypeParameterModifierList [],
                                    name: TsTypeParameterName {
                                        ident_token: IDENT@29..30 "A" [] [],
                                    },
                                    constraint: missing (optional),
                                    default: missing (optional),
                                },
                                COMMA@30..32 "," [] [Whitespace(" ")],
                                TsTypeParameterModifierList [],
                            ],
                        },
                    ],
                },
            ],
        },
        JsBogusStatement {
            items: [
                COMMA@32..34 "," [] [Whitespace(" ")],
                IDENT@34..35 "B" [] [],
                R_ANGLE@35..37 ">" [] [Whitespace(" ")],
                EQ@37..39 "=" [] [Whitespace(" ")],
                IDENT@39..41 "A" [] [Whitespace(" ")],
                AMP@41..43 "&" [] [Whitespace(" ")],
                IDENT@43..44 "B" [] [],
            ],
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@44..45 ";" [] [],
        },
    ],
    eof_token: EOF@45..46 "" [Newline("\n")] [],
}
```

## CST

```
0: JS_MODULE@0..46
  0: (empty)
  1: (empty)
  2: JS_DIRECTIVE_LIST@0..0
  3: JS_MODULE_ITEM_LIST@0..45
    0: JS_BOGUS_STATEMENT@0..9
      0: TYPE_KW@0..5 "type" [] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@5..8
        0: IDENT@5..8 "Foo" [] []
      2: JS_BOGUS@8..9
        0: L_ANGLE@8..9 "<" [] []
        1: JS_BOGUS@9..9
          0: TS_TYPE_PARAMETER_MODIFIER_LIST@9..9
    1: JS_BOGUS_STATEMENT@9..17
      0: COMMA@9..11 "," [] [Whitespace(" ")]
      1: IDENT@11..12 "A" [] []
      2: R_ANGLE@12..14 ">" [] [Whitespace(" ")]
      3: EQ@14..16 "=" [] [Whitespace(" ")]
      4: IDENT@16..17 "A" [] []
    2: JS_EMPTY_STATEMENT@17..18
      0: SEMICOLON@17..18 ";" [] []
    3: JS_BOGUS_STATEMENT@18..32
      0: TYPE_KW@18..25 "type" [Newline("\n"), Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@25..28
        0: IDENT@25..28 "Foo" [] []
      2: JS_BOGUS@28..32
        0: L_ANGLE@28..29 "<" [] []
        1: JS_BOGUS@29..32
          0: TS_TYPE_PARAMETER@29..30
            0: TS_TYPE_PARAMETER_MODIFIER_LIST@29..29
            1: TS_TYPE_PARAMETER_NAME@29..30
              0: IDENT@29..30 "A" [] []
            2: (empty)
            3: (empty)
          1: COMMA@30..32 "," [] [Whitespace(" ")]
          2: TS_TYPE_PARAMETER_MODIFIER_LIST@32..32
    4: JS_BOGUS_STATEMENT@32..44
      0: COMMA@32..34 "," [] [Whitespace(" ")]
      1: IDENT@34..35 "B" [] []
      2: R_ANGLE@35..37 ">" [] [Whitespace(" ")]
      3: EQ@37..39 "=" [] [Whitespace(" ")]
      4: IDENT@39..41 "A" [] [Whitespace(" ")]
      5: AMP@41..43 "&" [] [Whitespace(" ")]
      6: IDENT@43..44 "B" [] []
    5: JS_EMPTY_STATEMENT@44..45
      0: SEMICOLON@44..45 ";" [] []
  4: EOF@45..46 "" [Newline("\n")] []

```

## Diagnostics

```
type_parameter_missing_elements.ts:1:10 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a type parameter but instead found ','.
  
  > 1 │ type Foo<, A> = A;
      │          ^
    2 │ 
    3 │ type Foo<A, , B> = A & B;
  
  i Expected a type parameter here.
  
  > 1 │ type Foo<, A> = A;
      │          ^
    2 │ 
    3 │ type Foo<A, , B> = A & B;
  
type_parameter_missing_elements.ts:3:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a type parameter but instead found ','.
  
    1 │ type Foo<, A> = A;
    2 │ 
  > 3 │ type Foo<A, , B> = A & B;
      │             ^
    4 │ 
  
  i Expected a type parameter here.
  
    1 │ type Foo<, A> = A;
    2 │ 
  > 3 │ type Foo<A, , B> = A & B;
      │             ^
    4 │ 
  
```
