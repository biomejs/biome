---
source: crates/biome_js_parser/tests/spec_test.rs
expression: snapshot
snapshot_kind: text
---
## Input

```jsx
const v = \u1¡1
```


## AST

```
JsModule {
    bom_token: missing (optional),
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsBogusStatement {
            items: [
                JsBogus {
                    items: [
                        CONST_KW@0..6 "const" [] [Whitespace(" ")],
                        JsBogus {
                            items: [
                                JsBogus {
                                    items: [
                                        JsIdentifierBinding {
                                            name_token: IDENT@6..8 "v" [] [Whitespace(" ")],
                                        },
                                        JsBogus {
                                            items: [
                                                EQ@8..10 "=" [] [Whitespace(" ")],
                                                JsBogus {
                                                    items: [
                                                        ERROR_TOKEN@10..15 "\\u1¡" [] [],
                                                    ],
                                                },
                                            ],
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
            ],
        },
        JsExpressionStatement {
            expression: JsNumberLiteralExpression {
                value_token: JS_NUMBER_LITERAL@15..16 "1" [] [],
            },
            semicolon_token: missing (optional),
        },
    ],
    eof_token: EOF@16..16 "" [] [],
}
```

## CST

```
0: JS_MODULE@0..16
  0: (empty)
  1: (empty)
  2: JS_DIRECTIVE_LIST@0..0
  3: JS_MODULE_ITEM_LIST@0..16
    0: JS_BOGUS_STATEMENT@0..15
      0: JS_BOGUS@0..15
        0: CONST_KW@0..6 "const" [] [Whitespace(" ")]
        1: JS_BOGUS@6..15
          0: JS_BOGUS@6..15
            0: JS_IDENTIFIER_BINDING@6..8
              0: IDENT@6..8 "v" [] [Whitespace(" ")]
            1: JS_BOGUS@8..15
              0: EQ@8..10 "=" [] [Whitespace(" ")]
              1: JS_BOGUS@10..15
                0: ERROR_TOKEN@10..15 "\\u1¡" [] []
    1: JS_EXPRESSION_STATEMENT@15..16
      0: JS_NUMBER_LITERAL_EXPRESSION@15..16
        0: JS_NUMBER_LITERAL@15..16 "1" [] []
      1: (empty)
  4: EOF@16..16 "" [] []

```

## Diagnostics

```
unicode_escape_with_unicode_char.js:1:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Invalid digit in unicode escape sequence.
  
  > 1 │ const v = \u1¡1
      │              ^
  
  i Expected a valid unicode escape sequence.
  
unicode_escape_with_unicode_char.js:1:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
  > 1 │ const v = \u1¡1
      │               ^
  
  i An explicit or implicit semicolon is expected here...
  
  > 1 │ const v = \u1¡1
      │               ^
  
  i ...Which is required to end this statement
  
  > 1 │ const v = \u1¡1
      │ ^^^^^^^^^^^^^^
  
```
