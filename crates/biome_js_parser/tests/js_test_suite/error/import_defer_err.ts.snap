---
source: crates/biome_js_parser/tests/spec_test.rs
expression: snapshot
---
## Input

```ts
import defer { doSomething } from "some-module1";
import defer defaultExport from "some-module2";
import type defer { doSomething } from "some-module3"
import defer type * as foo from "bar";
```


## AST

```
JsModule {
    bom_token: missing (optional),
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsImport {
            import_token: IMPORT_KW@0..7 "import" [] [Whitespace(" ")],
            import_clause: JsImportCombinedClause {
                default_specifier: JsDefaultImportSpecifier {
                    local_name: JsIdentifierBinding {
                        name_token: IDENT@7..13 "defer" [] [Whitespace(" ")],
                    },
                },
                comma_token: missing (required),
                specifier: JsNamedImportSpecifiers {
                    l_curly_token: L_CURLY@13..15 "{" [] [Whitespace(" ")],
                    specifiers: JsNamedImportSpecifierList [
                        JsShorthandNamedImportSpecifier {
                            type_token: missing (optional),
                            local_name: JsIdentifierBinding {
                                name_token: IDENT@15..27 "doSomething" [] [Whitespace(" ")],
                            },
                        },
                    ],
                    r_curly_token: R_CURLY@27..29 "}" [] [Whitespace(" ")],
                },
                from_token: FROM_KW@29..34 "from" [] [Whitespace(" ")],
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@34..48 "\"some-module1\"" [] [],
                },
                assertion: missing (optional),
            },
            semicolon_token: SEMICOLON@48..49 ";" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@49..57 "import" [Newline("\n")] [Whitespace(" ")],
            import_clause: JsImportDefaultClause {
                type_token: missing (optional),
                default_specifier: JsDefaultImportSpecifier {
                    local_name: JsIdentifierBinding {
                        name_token: IDENT@57..63 "defer" [] [Whitespace(" ")],
                    },
                },
                from_token: missing (required),
                source: missing (required),
                assertion: missing (optional),
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@63..77 "defaultExport" [] [Whitespace(" ")],
                },
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@77..82 "from" [] [Whitespace(" ")],
                },
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsStringLiteralExpression {
                value_token: JS_STRING_LITERAL@82..96 "\"some-module2\"" [] [],
            },
            semicolon_token: SEMICOLON@96..97 ";" [] [],
        },
        JsBogusStatement {
            items: [
                IMPORT_KW@97..105 "import" [Newline("\n")] [Whitespace(" ")],
                JsBogus {
                    items: [
                        TYPE_KW@105..110 "type" [] [Whitespace(" ")],
                        JsDefaultImportSpecifier {
                            local_name: JsIdentifierBinding {
                                name_token: IDENT@110..116 "defer" [] [Whitespace(" ")],
                            },
                        },
                        JsNamedImportSpecifiers {
                            l_curly_token: L_CURLY@116..118 "{" [] [Whitespace(" ")],
                            specifiers: JsNamedImportSpecifierList [
                                JsShorthandNamedImportSpecifier {
                                    type_token: missing (optional),
                                    local_name: JsIdentifierBinding {
                                        name_token: IDENT@118..130 "doSomething" [] [Whitespace(" ")],
                                    },
                                },
                            ],
                            r_curly_token: R_CURLY@130..132 "}" [] [Whitespace(" ")],
                        },
                        FROM_KW@132..137 "from" [] [Whitespace(" ")],
                        JsModuleSource {
                            value_token: JS_STRING_LITERAL@137..151 "\"some-module3\"" [] [],
                        },
                    ],
                },
            ],
        },
        JsImport {
            import_token: IMPORT_KW@151..159 "import" [Newline("\n")] [Whitespace(" ")],
            import_clause: JsImportDefaultClause {
                type_token: missing (optional),
                default_specifier: JsDefaultImportSpecifier {
                    local_name: JsIdentifierBinding {
                        name_token: IDENT@159..165 "defer" [] [Whitespace(" ")],
                    },
                },
                from_token: missing (required),
                source: missing (required),
                assertion: missing (optional),
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@165..170 "type" [] [Whitespace(" ")],
                    },
                },
                operator_token: STAR@170..172 "*" [] [Whitespace(" ")],
                right: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@172..175 "as" [] [Whitespace(" ")],
                    },
                },
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@175..179 "foo" [] [Whitespace(" ")],
                },
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@179..184 "from" [] [Whitespace(" ")],
                },
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsStringLiteralExpression {
                value_token: JS_STRING_LITERAL@184..189 "\"bar\"" [] [],
            },
            semicolon_token: SEMICOLON@189..190 ";" [] [],
        },
    ],
    eof_token: EOF@190..190 "" [] [],
}
```

## CST

```
0: JS_MODULE@0..190
  0: (empty)
  1: (empty)
  2: JS_DIRECTIVE_LIST@0..0
  3: JS_MODULE_ITEM_LIST@0..190
    0: JS_IMPORT@0..49
      0: IMPORT_KW@0..7 "import" [] [Whitespace(" ")]
      1: JS_IMPORT_COMBINED_CLAUSE@7..48
        0: JS_DEFAULT_IMPORT_SPECIFIER@7..13
          0: JS_IDENTIFIER_BINDING@7..13
            0: IDENT@7..13 "defer" [] [Whitespace(" ")]
        1: (empty)
        2: JS_NAMED_IMPORT_SPECIFIERS@13..29
          0: L_CURLY@13..15 "{" [] [Whitespace(" ")]
          1: JS_NAMED_IMPORT_SPECIFIER_LIST@15..27
            0: JS_SHORTHAND_NAMED_IMPORT_SPECIFIER@15..27
              0: (empty)
              1: JS_IDENTIFIER_BINDING@15..27
                0: IDENT@15..27 "doSomething" [] [Whitespace(" ")]
          2: R_CURLY@27..29 "}" [] [Whitespace(" ")]
        3: FROM_KW@29..34 "from" [] [Whitespace(" ")]
        4: JS_MODULE_SOURCE@34..48
          0: JS_STRING_LITERAL@34..48 "\"some-module1\"" [] []
        5: (empty)
      2: SEMICOLON@48..49 ";" [] []
    1: JS_IMPORT@49..63
      0: IMPORT_KW@49..57 "import" [Newline("\n")] [Whitespace(" ")]
      1: JS_IMPORT_DEFAULT_CLAUSE@57..63
        0: (empty)
        1: JS_DEFAULT_IMPORT_SPECIFIER@57..63
          0: JS_IDENTIFIER_BINDING@57..63
            0: IDENT@57..63 "defer" [] [Whitespace(" ")]
        2: (empty)
        3: (empty)
        4: (empty)
      2: (empty)
    2: JS_EXPRESSION_STATEMENT@63..77
      0: JS_IDENTIFIER_EXPRESSION@63..77
        0: JS_REFERENCE_IDENTIFIER@63..77
          0: IDENT@63..77 "defaultExport" [] [Whitespace(" ")]
      1: (empty)
    3: JS_EXPRESSION_STATEMENT@77..82
      0: JS_IDENTIFIER_EXPRESSION@77..82
        0: JS_REFERENCE_IDENTIFIER@77..82
          0: IDENT@77..82 "from" [] [Whitespace(" ")]
      1: (empty)
    4: JS_EXPRESSION_STATEMENT@82..97
      0: JS_STRING_LITERAL_EXPRESSION@82..96
        0: JS_STRING_LITERAL@82..96 "\"some-module2\"" [] []
      1: SEMICOLON@96..97 ";" [] []
    5: JS_BOGUS_STATEMENT@97..151
      0: IMPORT_KW@97..105 "import" [Newline("\n")] [Whitespace(" ")]
      1: JS_BOGUS@105..151
        0: TYPE_KW@105..110 "type" [] [Whitespace(" ")]
        1: JS_DEFAULT_IMPORT_SPECIFIER@110..116
          0: JS_IDENTIFIER_BINDING@110..116
            0: IDENT@110..116 "defer" [] [Whitespace(" ")]
        2: JS_NAMED_IMPORT_SPECIFIERS@116..132
          0: L_CURLY@116..118 "{" [] [Whitespace(" ")]
          1: JS_NAMED_IMPORT_SPECIFIER_LIST@118..130
            0: JS_SHORTHAND_NAMED_IMPORT_SPECIFIER@118..130
              0: (empty)
              1: JS_IDENTIFIER_BINDING@118..130
                0: IDENT@118..130 "doSomething" [] [Whitespace(" ")]
          2: R_CURLY@130..132 "}" [] [Whitespace(" ")]
        3: FROM_KW@132..137 "from" [] [Whitespace(" ")]
        4: JS_MODULE_SOURCE@137..151
          0: JS_STRING_LITERAL@137..151 "\"some-module3\"" [] []
    6: JS_IMPORT@151..165
      0: IMPORT_KW@151..159 "import" [Newline("\n")] [Whitespace(" ")]
      1: JS_IMPORT_DEFAULT_CLAUSE@159..165
        0: (empty)
        1: JS_DEFAULT_IMPORT_SPECIFIER@159..165
          0: JS_IDENTIFIER_BINDING@159..165
            0: IDENT@159..165 "defer" [] [Whitespace(" ")]
        2: (empty)
        3: (empty)
        4: (empty)
      2: (empty)
    7: JS_EXPRESSION_STATEMENT@165..175
      0: JS_BINARY_EXPRESSION@165..175
        0: JS_IDENTIFIER_EXPRESSION@165..170
          0: JS_REFERENCE_IDENTIFIER@165..170
            0: IDENT@165..170 "type" [] [Whitespace(" ")]
        1: STAR@170..172 "*" [] [Whitespace(" ")]
        2: JS_IDENTIFIER_EXPRESSION@172..175
          0: JS_REFERENCE_IDENTIFIER@172..175
            0: IDENT@172..175 "as" [] [Whitespace(" ")]
      1: (empty)
    8: JS_EXPRESSION_STATEMENT@175..179
      0: JS_IDENTIFIER_EXPRESSION@175..179
        0: JS_REFERENCE_IDENTIFIER@175..179
          0: IDENT@175..179 "foo" [] [Whitespace(" ")]
      1: (empty)
    9: JS_EXPRESSION_STATEMENT@179..184
      0: JS_IDENTIFIER_EXPRESSION@179..184
        0: JS_REFERENCE_IDENTIFIER@179..184
          0: IDENT@179..184 "from" [] [Whitespace(" ")]
      1: (empty)
    10: JS_EXPRESSION_STATEMENT@184..190
      0: JS_STRING_LITERAL_EXPRESSION@184..189
        0: JS_STRING_LITERAL@184..189 "\"bar\"" [] []
      1: SEMICOLON@189..190 ";" [] []
  4: EOF@190..190 "" [] []

```

## Diagnostics

```
import_defer_err.ts:1:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `{`
  
  > 1 │ import defer { doSomething } from "some-module1";
      │              ^
    2 │ import defer defaultExport from "some-module2";
    3 │ import type defer { doSomething } from "some-module3"
  
  i Remove {
  
import_defer_err.ts:2:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `from` but instead found `defaultExport`
  
    1 │ import defer { doSomething } from "some-module1";
  > 2 │ import defer defaultExport from "some-module2";
      │              ^^^^^^^^^^^^^
    3 │ import type defer { doSomething } from "some-module3"
    4 │ import defer type * as foo from "bar";
  
  i Remove defaultExport
  
import_defer_err.ts:2:28 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ import defer { doSomething } from "some-module1";
  > 2 │ import defer defaultExport from "some-module2";
      │                            ^^^^
    3 │ import type defer { doSomething } from "some-module3"
    4 │ import defer type * as foo from "bar";
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ import defer { doSomething } from "some-module1";
  > 2 │ import defer defaultExport from "some-module2";
      │                            ^^^^
    3 │ import type defer { doSomething } from "some-module3"
    4 │ import defer type * as foo from "bar";
  
  i ...Which is required to end this statement
  
    1 │ import defer { doSomething } from "some-module1";
  > 2 │ import defer defaultExport from "some-module2";
      │              ^^^^^^^^^^^^^^^^^^
    3 │ import type defer { doSomething } from "some-module3"
    4 │ import defer type * as foo from "bar";
  
import_defer_err.ts:2:33 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ import defer { doSomething } from "some-module1";
  > 2 │ import defer defaultExport from "some-module2";
      │                                 ^^^^^^^^^^^^^^
    3 │ import type defer { doSomething } from "some-module3"
    4 │ import defer type * as foo from "bar";
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ import defer { doSomething } from "some-module1";
  > 2 │ import defer defaultExport from "some-module2";
      │                                 ^^^^^^^^^^^^^^
    3 │ import type defer { doSomething } from "some-module3"
    4 │ import defer type * as foo from "bar";
  
  i ...Which is required to end this statement
  
    1 │ import defer { doSomething } from "some-module1";
  > 2 │ import defer defaultExport from "some-module2";
      │                            ^^^^^^^^^^^^^^^^^^^
    3 │ import type defer { doSomething } from "some-module3"
    4 │ import defer type * as foo from "bar";
  
import_defer_err.ts:3:19 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `{`
  
    1 │ import defer { doSomething } from "some-module1";
    2 │ import defer defaultExport from "some-module2";
  > 3 │ import type defer { doSomething } from "some-module3"
      │                   ^
    4 │ import defer type * as foo from "bar";
  
  i Remove {
  
import_defer_err.ts:3:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × A type-only import can specify a default import or named bindings, but not both.
  
    1 │ import defer { doSomething } from "some-module1";
    2 │ import defer defaultExport from "some-module2";
  > 3 │ import type defer { doSomething } from "some-module3"
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    4 │ import defer type * as foo from "bar";
  
import_defer_err.ts:4:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `from` but instead found `type`
  
    2 │ import defer defaultExport from "some-module2";
    3 │ import type defer { doSomething } from "some-module3"
  > 4 │ import defer type * as foo from "bar";
      │              ^^^^
  
  i Remove type
  
import_defer_err.ts:4:24 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    2 │ import defer defaultExport from "some-module2";
    3 │ import type defer { doSomething } from "some-module3"
  > 4 │ import defer type * as foo from "bar";
      │                        ^^^
  
  i An explicit or implicit semicolon is expected here...
  
    2 │ import defer defaultExport from "some-module2";
    3 │ import type defer { doSomething } from "some-module3"
  > 4 │ import defer type * as foo from "bar";
      │                        ^^^
  
  i ...Which is required to end this statement
  
    2 │ import defer defaultExport from "some-module2";
    3 │ import type defer { doSomething } from "some-module3"
  > 4 │ import defer type * as foo from "bar";
      │              ^^^^^^^^^^^^^
  
import_defer_err.ts:4:28 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    2 │ import defer defaultExport from "some-module2";
    3 │ import type defer { doSomething } from "some-module3"
  > 4 │ import defer type * as foo from "bar";
      │                            ^^^^
  
  i An explicit or implicit semicolon is expected here...
  
    2 │ import defer defaultExport from "some-module2";
    3 │ import type defer { doSomething } from "some-module3"
  > 4 │ import defer type * as foo from "bar";
      │                            ^^^^
  
  i ...Which is required to end this statement
  
    2 │ import defer defaultExport from "some-module2";
    3 │ import type defer { doSomething } from "some-module3"
  > 4 │ import defer type * as foo from "bar";
      │                        ^^^^^^^^
  
import_defer_err.ts:4:33 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    2 │ import defer defaultExport from "some-module2";
    3 │ import type defer { doSomething } from "some-module3"
  > 4 │ import defer type * as foo from "bar";
      │                                 ^^^^^
  
  i An explicit or implicit semicolon is expected here...
  
    2 │ import defer defaultExport from "some-module2";
    3 │ import type defer { doSomething } from "some-module3"
  > 4 │ import defer type * as foo from "bar";
      │                                 ^^^^^
  
  i ...Which is required to end this statement
  
    2 │ import defer defaultExport from "some-module2";
    3 │ import type defer { doSomething } from "some-module3"
  > 4 │ import defer type * as foo from "bar";
      │                            ^^^^^^^^^^
  
```
