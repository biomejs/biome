---
source: crates/biome_js_parser/tests/spec_test.rs
assertion_line: 177
expression: snapshot
---
## Input

```ts
func<>();
type Foo = Bar<>;
type Foo = Bar<,>;

```


## AST

```
JsModule {
    bom_token: missing (optional),
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsExpressionStatement {
            expression: JsCallExpression {
                callee: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@0..4 "func" [] [],
                    },
                },
                optional_chain_token: missing (optional),
                type_arguments: TsTypeArguments {
                    l_angle_token: L_ANGLE@4..5 "<" [] [],
                    ts_type_argument_list: TsTypeArgumentList [],
                    r_angle_token: R_ANGLE@5..6 ">" [] [],
                },
                arguments: JsCallArguments {
                    l_paren_token: L_PAREN@6..7 "(" [] [],
                    args: JsCallArgumentList [],
                    r_paren_token: R_PAREN@7..8 ")" [] [],
                },
            },
            semicolon_token: SEMICOLON@8..9 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@9..15 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@15..19 "Foo" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@19..21 "=" [] [Whitespace(" ")],
            ty: TsReferenceType {
                name: JsReferenceIdentifier {
                    value_token: IDENT@21..24 "Bar" [] [],
                },
                type_arguments: TsTypeArguments {
                    l_angle_token: L_ANGLE@24..25 "<" [] [],
                    ts_type_argument_list: TsTypeArgumentList [],
                    r_angle_token: R_ANGLE@25..26 ">" [] [],
                },
            },
            semicolon_token: SEMICOLON@26..27 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@27..33 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@33..37 "Foo" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@37..39 "=" [] [Whitespace(" ")],
            ty: TsReferenceType {
                name: JsReferenceIdentifier {
                    value_token: IDENT@39..42 "Bar" [] [],
                },
                type_arguments: TsTypeArguments {
                    l_angle_token: L_ANGLE@42..43 "<" [] [],
                    ts_type_argument_list: TsTypeArgumentList [
                        missing element,
                        COMMA@43..44 "," [] [],
                        missing element,
                    ],
                    r_angle_token: R_ANGLE@44..45 ">" [] [],
                },
            },
            semicolon_token: SEMICOLON@45..46 ";" [] [],
        },
    ],
    eof_token: EOF@46..47 "" [Newline("\n")] [],
}
```

## CST

```
0: JS_MODULE@0..47
  0: (empty)
  1: (empty)
  2: JS_DIRECTIVE_LIST@0..0
  3: JS_MODULE_ITEM_LIST@0..46
    0: JS_EXPRESSION_STATEMENT@0..9
      0: JS_CALL_EXPRESSION@0..8
        0: JS_IDENTIFIER_EXPRESSION@0..4
          0: JS_REFERENCE_IDENTIFIER@0..4
            0: IDENT@0..4 "func" [] []
        1: (empty)
        2: TS_TYPE_ARGUMENTS@4..6
          0: L_ANGLE@4..5 "<" [] []
          1: TS_TYPE_ARGUMENT_LIST@5..5
          2: R_ANGLE@5..6 ">" [] []
        3: JS_CALL_ARGUMENTS@6..8
          0: L_PAREN@6..7 "(" [] []
          1: JS_CALL_ARGUMENT_LIST@7..7
          2: R_PAREN@7..8 ")" [] []
      1: SEMICOLON@8..9 ";" [] []
    1: TS_TYPE_ALIAS_DECLARATION@9..27
      0: TYPE_KW@9..15 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@15..19
        0: IDENT@15..19 "Foo" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@19..21 "=" [] [Whitespace(" ")]
      4: TS_REFERENCE_TYPE@21..26
        0: JS_REFERENCE_IDENTIFIER@21..24
          0: IDENT@21..24 "Bar" [] []
        1: TS_TYPE_ARGUMENTS@24..26
          0: L_ANGLE@24..25 "<" [] []
          1: TS_TYPE_ARGUMENT_LIST@25..25
          2: R_ANGLE@25..26 ">" [] []
      5: SEMICOLON@26..27 ";" [] []
    2: TS_TYPE_ALIAS_DECLARATION@27..46
      0: TYPE_KW@27..33 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@33..37
        0: IDENT@33..37 "Foo" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@37..39 "=" [] [Whitespace(" ")]
      4: TS_REFERENCE_TYPE@39..45
        0: JS_REFERENCE_IDENTIFIER@39..42
          0: IDENT@39..42 "Bar" [] []
        1: TS_TYPE_ARGUMENTS@42..45
          0: L_ANGLE@42..43 "<" [] []
          1: TS_TYPE_ARGUMENT_LIST@43..44
            0: (empty)
            1: COMMA@43..44 "," [] []
            2: (empty)
          2: R_ANGLE@44..45 ">" [] []
      5: SEMICOLON@45..46 ";" [] []
  4: EOF@46..47 "" [Newline("\n")] []

```

## Diagnostics

```
type_arguments_missing.ts:1:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a type argument but instead found '>'.
  
  > 1 │ func<>();
      │      ^
    2 │ type Foo = Bar<>;
    3 │ type Foo = Bar<,>;
  
  i Expected a type argument here.
  
  > 1 │ func<>();
      │      ^
    2 │ type Foo = Bar<>;
    3 │ type Foo = Bar<,>;
  
type_arguments_missing.ts:2:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a type argument but instead found '>'.
  
    1 │ func<>();
  > 2 │ type Foo = Bar<>;
      │                ^
    3 │ type Foo = Bar<,>;
    4 │ 
  
  i Expected a type argument here.
  
    1 │ func<>();
  > 2 │ type Foo = Bar<>;
      │                ^
    3 │ type Foo = Bar<,>;
    4 │ 
  
type_arguments_missing.ts:3:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a type argument but instead found '>'.
  
    1 │ func<>();
    2 │ type Foo = Bar<>;
  > 3 │ type Foo = Bar<,>;
      │                 ^
    4 │ 
  
  i Expected a type argument here.
  
    1 │ func<>();
    2 │ type Foo = Bar<>;
  > 3 │ type Foo = Bar<,>;
      │                 ^
    4 │ 
  
```
