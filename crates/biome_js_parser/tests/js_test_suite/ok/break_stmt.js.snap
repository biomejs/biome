---
source: crates/biome_js_parser/tests/spec_test.rs
expression: snapshot
---
## Input

```jsx
while (true) {
  break;
  foo: {
   break foo;
  }
}
out: while (true) {
  break out;
}

```


## AST

```
JsModule {
    bom_token: missing (optional),
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsWhileStatement {
            while_token: WHILE_KW@0..6 "while" [] [Whitespace(" ")],
            l_paren_token: L_PAREN@6..7 "(" [] [],
            test: JsBooleanLiteralExpression {
                value_token: TRUE_KW@7..11 "true" [] [],
            },
            r_paren_token: R_PAREN@11..13 ")" [] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@13..14 "{" [] [],
                statements: JsStatementList [
                    JsBreakStatement {
                        break_token: BREAK_KW@14..22 "break" [Newline("\n"), Whitespace("  ")] [],
                        label: missing (optional),
                        semicolon_token: SEMICOLON@22..23 ";" [] [],
                    },
                    JsLabeledStatement {
                        label: JsLabel {
                            value_token: IDENT@23..29 "foo" [Newline("\n"), Whitespace("  ")] [],
                        },
                        colon_token: COLON@29..31 ":" [] [Whitespace(" ")],
                        body: JsBlockStatement {
                            l_curly_token: L_CURLY@31..32 "{" [] [],
                            statements: JsStatementList [
                                JsBreakStatement {
                                    break_token: BREAK_KW@32..42 "break" [Newline("\n"), Whitespace("   ")] [Whitespace(" ")],
                                    label: JsLabel {
                                        value_token: IDENT@42..45 "foo" [] [],
                                    },
                                    semicolon_token: SEMICOLON@45..46 ";" [] [],
                                },
                            ],
                            r_curly_token: R_CURLY@46..50 "}" [Newline("\n"), Whitespace("  ")] [],
                        },
                    },
                ],
                r_curly_token: R_CURLY@50..52 "}" [Newline("\n")] [],
            },
        },
        JsLabeledStatement {
            label: JsLabel {
                value_token: IDENT@52..56 "out" [Newline("\n")] [],
            },
            colon_token: COLON@56..58 ":" [] [Whitespace(" ")],
            body: JsWhileStatement {
                while_token: WHILE_KW@58..64 "while" [] [Whitespace(" ")],
                l_paren_token: L_PAREN@64..65 "(" [] [],
                test: JsBooleanLiteralExpression {
                    value_token: TRUE_KW@65..69 "true" [] [],
                },
                r_paren_token: R_PAREN@69..71 ")" [] [Whitespace(" ")],
                body: JsBlockStatement {
                    l_curly_token: L_CURLY@71..72 "{" [] [],
                    statements: JsStatementList [
                        JsBreakStatement {
                            break_token: BREAK_KW@72..81 "break" [Newline("\n"), Whitespace("  ")] [Whitespace(" ")],
                            label: JsLabel {
                                value_token: IDENT@81..84 "out" [] [],
                            },
                            semicolon_token: SEMICOLON@84..85 ";" [] [],
                        },
                    ],
                    r_curly_token: R_CURLY@85..87 "}" [Newline("\n")] [],
                },
            },
        },
    ],
    eof_token: EOF@87..88 "" [Newline("\n")] [],
}
```

## CST

```
0: JS_MODULE@0..88
  0: (empty)
  1: (empty)
  2: JS_DIRECTIVE_LIST@0..0
  3: JS_MODULE_ITEM_LIST@0..87
    0: JS_WHILE_STATEMENT@0..52
      0: WHILE_KW@0..6 "while" [] [Whitespace(" ")]
      1: L_PAREN@6..7 "(" [] []
      2: JS_BOOLEAN_LITERAL_EXPRESSION@7..11
        0: TRUE_KW@7..11 "true" [] []
      3: R_PAREN@11..13 ")" [] [Whitespace(" ")]
      4: JS_BLOCK_STATEMENT@13..52
        0: L_CURLY@13..14 "{" [] []
        1: JS_STATEMENT_LIST@14..50
          0: JS_BREAK_STATEMENT@14..23
            0: BREAK_KW@14..22 "break" [Newline("\n"), Whitespace("  ")] []
            1: (empty)
            2: SEMICOLON@22..23 ";" [] []
          1: JS_LABELED_STATEMENT@23..50
            0: JS_LABEL@23..29
              0: IDENT@23..29 "foo" [Newline("\n"), Whitespace("  ")] []
            1: COLON@29..31 ":" [] [Whitespace(" ")]
            2: JS_BLOCK_STATEMENT@31..50
              0: L_CURLY@31..32 "{" [] []
              1: JS_STATEMENT_LIST@32..46
                0: JS_BREAK_STATEMENT@32..46
                  0: BREAK_KW@32..42 "break" [Newline("\n"), Whitespace("   ")] [Whitespace(" ")]
                  1: JS_LABEL@42..45
                    0: IDENT@42..45 "foo" [] []
                  2: SEMICOLON@45..46 ";" [] []
              2: R_CURLY@46..50 "}" [Newline("\n"), Whitespace("  ")] []
        2: R_CURLY@50..52 "}" [Newline("\n")] []
    1: JS_LABELED_STATEMENT@52..87
      0: JS_LABEL@52..56
        0: IDENT@52..56 "out" [Newline("\n")] []
      1: COLON@56..58 ":" [] [Whitespace(" ")]
      2: JS_WHILE_STATEMENT@58..87
        0: WHILE_KW@58..64 "while" [] [Whitespace(" ")]
        1: L_PAREN@64..65 "(" [] []
        2: JS_BOOLEAN_LITERAL_EXPRESSION@65..69
          0: TRUE_KW@65..69 "true" [] []
        3: R_PAREN@69..71 ")" [] [Whitespace(" ")]
        4: JS_BLOCK_STATEMENT@71..87
          0: L_CURLY@71..72 "{" [] []
          1: JS_STATEMENT_LIST@72..85
            0: JS_BREAK_STATEMENT@72..85
              0: BREAK_KW@72..81 "break" [Newline("\n"), Whitespace("  ")] [Whitespace(" ")]
              1: JS_LABEL@81..84
                0: IDENT@81..84 "out" [] []
              2: SEMICOLON@84..85 ";" [] []
          2: R_CURLY@85..87 "}" [Newline("\n")] []
  4: EOF@87..88 "" [Newline("\n")] []

```
