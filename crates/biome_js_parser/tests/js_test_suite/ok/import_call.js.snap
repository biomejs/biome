---
source: crates/biome_js_parser/tests/spec_test.rs
expression: snapshot
---
## Input

```js
import("foo")
import("foo", { with: { type: 'json' } })
import("foo", { with: { 'resolution-mode': 'import' } })

```


## AST

```
JsModule {
    bom_token: missing (optional),
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsExpressionStatement {
            expression: JsImportCallExpression {
                import_token: IMPORT_KW@0..6 "import" [] [],
                arguments: JsImportCallArguments {
                    l_paren_token: L_PAREN@6..7 "(" [] [],
                    argument: JsStringLiteralExpression {
                        value_token: JS_STRING_LITERAL@7..12 "\"foo\"" [] [],
                    },
                    comma_token: missing (optional),
                    js_import_call_assertion_block: missing (optional),
                    r_paren_token: R_PAREN@12..13 ")" [] [],
                },
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsImportCallExpression {
                import_token: IMPORT_KW@13..20 "import" [Newline("\n")] [],
                arguments: JsImportCallArguments {
                    l_paren_token: L_PAREN@20..21 "(" [] [],
                    argument: JsStringLiteralExpression {
                        value_token: JS_STRING_LITERAL@21..26 "\"foo\"" [] [],
                    },
                    comma_token: COMMA@26..28 "," [] [Whitespace(" ")],
                    js_import_call_assertion_block: JsImportCallAssertionBlock {
                        l_curly_token: L_CURLY@28..30 "{" [] [Whitespace(" ")],
                        assertion: JsImportCallAssertion {
                            with_token: WITH_KW@30..34 "with" [] [],
                            colon_token: COLON@34..36 ":" [] [Whitespace(" ")],
                            l_curly_token: L_CURLY@36..38 "{" [] [Whitespace(" ")],
                            assertions: JsImportAssertionEntryList [
                                JsImportAssertionEntry {
                                    key: IDENT@38..42 "type" [] [],
                                    colon_token: COLON@42..44 ":" [] [Whitespace(" ")],
                                    value_token: JS_STRING_LITERAL@44..51 "'json'" [] [Whitespace(" ")],
                                },
                            ],
                            r_curly_token: R_CURLY@51..53 "}" [] [Whitespace(" ")],
                        },
                        r_curly_token: R_CURLY@53..54 "}" [] [],
                    },
                    r_paren_token: R_PAREN@54..55 ")" [] [],
                },
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsImportCallExpression {
                import_token: IMPORT_KW@55..62 "import" [Newline("\n")] [],
                arguments: JsImportCallArguments {
                    l_paren_token: L_PAREN@62..63 "(" [] [],
                    argument: JsStringLiteralExpression {
                        value_token: JS_STRING_LITERAL@63..68 "\"foo\"" [] [],
                    },
                    comma_token: COMMA@68..70 "," [] [Whitespace(" ")],
                    js_import_call_assertion_block: JsImportCallAssertionBlock {
                        l_curly_token: L_CURLY@70..72 "{" [] [Whitespace(" ")],
                        assertion: JsImportCallAssertion {
                            with_token: WITH_KW@72..76 "with" [] [],
                            colon_token: COLON@76..78 ":" [] [Whitespace(" ")],
                            l_curly_token: L_CURLY@78..80 "{" [] [Whitespace(" ")],
                            assertions: JsImportAssertionEntryList [
                                JsImportAssertionEntry {
                                    key: JS_STRING_LITERAL@80..97 "'resolution-mode'" [] [],
                                    colon_token: COLON@97..99 ":" [] [Whitespace(" ")],
                                    value_token: JS_STRING_LITERAL@99..108 "'import'" [] [Whitespace(" ")],
                                },
                            ],
                            r_curly_token: R_CURLY@108..110 "}" [] [Whitespace(" ")],
                        },
                        r_curly_token: R_CURLY@110..111 "}" [] [],
                    },
                    r_paren_token: R_PAREN@111..112 ")" [] [],
                },
            },
            semicolon_token: missing (optional),
        },
    ],
    eof_token: EOF@112..113 "" [Newline("\n")] [],
}
```

## CST

```
0: JS_MODULE@0..113
  0: (empty)
  1: (empty)
  2: JS_DIRECTIVE_LIST@0..0
  3: JS_MODULE_ITEM_LIST@0..112
    0: JS_EXPRESSION_STATEMENT@0..13
      0: JS_IMPORT_CALL_EXPRESSION@0..13
        0: IMPORT_KW@0..6 "import" [] []
        1: JS_IMPORT_CALL_ARGUMENTS@6..13
          0: L_PAREN@6..7 "(" [] []
          1: JS_STRING_LITERAL_EXPRESSION@7..12
            0: JS_STRING_LITERAL@7..12 "\"foo\"" [] []
          2: (empty)
          3: (empty)
          4: R_PAREN@12..13 ")" [] []
      1: (empty)
    1: JS_EXPRESSION_STATEMENT@13..55
      0: JS_IMPORT_CALL_EXPRESSION@13..55
        0: IMPORT_KW@13..20 "import" [Newline("\n")] []
        1: JS_IMPORT_CALL_ARGUMENTS@20..55
          0: L_PAREN@20..21 "(" [] []
          1: JS_STRING_LITERAL_EXPRESSION@21..26
            0: JS_STRING_LITERAL@21..26 "\"foo\"" [] []
          2: COMMA@26..28 "," [] [Whitespace(" ")]
          3: JS_IMPORT_CALL_ASSERTION_BLOCK@28..54
            0: L_CURLY@28..30 "{" [] [Whitespace(" ")]
            1: JS_IMPORT_CALL_ASSERTION@30..53
              0: WITH_KW@30..34 "with" [] []
              1: COLON@34..36 ":" [] [Whitespace(" ")]
              2: L_CURLY@36..38 "{" [] [Whitespace(" ")]
              3: JS_IMPORT_ASSERTION_ENTRY_LIST@38..51
                0: JS_IMPORT_ASSERTION_ENTRY@38..51
                  0: IDENT@38..42 "type" [] []
                  1: COLON@42..44 ":" [] [Whitespace(" ")]
                  2: JS_STRING_LITERAL@44..51 "'json'" [] [Whitespace(" ")]
              4: R_CURLY@51..53 "}" [] [Whitespace(" ")]
            2: R_CURLY@53..54 "}" [] []
          4: R_PAREN@54..55 ")" [] []
      1: (empty)
    2: JS_EXPRESSION_STATEMENT@55..112
      0: JS_IMPORT_CALL_EXPRESSION@55..112
        0: IMPORT_KW@55..62 "import" [Newline("\n")] []
        1: JS_IMPORT_CALL_ARGUMENTS@62..112
          0: L_PAREN@62..63 "(" [] []
          1: JS_STRING_LITERAL_EXPRESSION@63..68
            0: JS_STRING_LITERAL@63..68 "\"foo\"" [] []
          2: COMMA@68..70 "," [] [Whitespace(" ")]
          3: JS_IMPORT_CALL_ASSERTION_BLOCK@70..111
            0: L_CURLY@70..72 "{" [] [Whitespace(" ")]
            1: JS_IMPORT_CALL_ASSERTION@72..110
              0: WITH_KW@72..76 "with" [] []
              1: COLON@76..78 ":" [] [Whitespace(" ")]
              2: L_CURLY@78..80 "{" [] [Whitespace(" ")]
              3: JS_IMPORT_ASSERTION_ENTRY_LIST@80..108
                0: JS_IMPORT_ASSERTION_ENTRY@80..108
                  0: JS_STRING_LITERAL@80..97 "'resolution-mode'" [] []
                  1: COLON@97..99 ":" [] [Whitespace(" ")]
                  2: JS_STRING_LITERAL@99..108 "'import'" [] [Whitespace(" ")]
              4: R_CURLY@108..110 "}" [] [Whitespace(" ")]
            2: R_CURLY@110..111 "}" [] []
          4: R_PAREN@111..112 ")" [] []
      1: (empty)
  4: EOF@112..113 "" [Newline("\n")] []

```
