---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```jsx
var r = /[👍]/;
var r = /[\uD83D\uDC4D]/;
var r = /[👍]\\a/;
var r = /(?<=[👍])/;
var r = /[Á]/;
var r = /[Á]/u;
var r = /[\u0041\u0301]/;
var r = /[\u0041\u0301]/u;
var r = /[\u{41}\u{301}]/u;
var r = /[❇️]/;
var r = /[❇️]/u;
var r = /[\u2747\uFE0F]/;
var r = /[\u2747\uFE0F]/u;
var r = /[\u{2747}\u{FE0F}]/u;
var r = /[👶🏻]/;
var r = /[👶🏻]/u;
var r = /[\uD83D\uDC76\uD83C\uDFFB]/u;
var r = /[\u{1F476}\u{1F3FB}]/u;
var r = /[🇯🇵]/;
var r = /[🇯🇵]/i;
var r = /[🇯🇵]/u;
var r = /[\uD83C\uDDEF\uD83C\uDDF5]/u;
var r = /[\u{1F1EF}\u{1F1F5}]/u;
var r = /[👨‍👩‍👦]/;
var r = /[👨‍👩‍👦]/u;
var r = /[\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66]/u;
var r = /[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]/u;
var r = new RegExp("[👍]", "");
var r = new RegExp('[👍]', ``);
var r = new RegExp("[👍]", flags);
var r = new RegExp("[\uD83D\uDC4D]", "");
var r = new RegExp("/(?<=[👍])", "");
var r = new RegExp("[Á]", "");
var r = new RegExp("[Á]", "u");
var r = new RegExp("[\u0041\u0301]", "");
var r = new RegExp("[\u0041\u0301]", "u");
var r = new RegExp("[\u{41}\u{301}]", "u");
var r = new RegExp("[❇️]", "");
var r = new RegExp("[❇️]", "u");
var r = new RegExp("[\u2747\uFE0F]", "");
var r = new RegExp("[\u2747\uFE0F]", "u");
var r = new RegExp("[\u{2747}\u{FE0F}]", "u");
var r = new RegExp("[👶🏻]", "");
var r = new RegExp("[👶🏻]", "u");
var r = new RegExp("[\uD83D\uDC76\uD83C\uDFFB]", "u");
var r = new RegExp("[\u{1F476}\u{1F3FB}]", "u");
var r = new RegExp("[🇯🇵]", "");
var r = new RegExp("[🇯🇵]", "i");
var r = new RegExp('[🇯🇵]', `i`);
var r = new RegExp('[🇯🇵]', `${foo}`);
var r = new RegExp("[🇯🇵]");
var r = new RegExp("[🇯🇵]",);
var r = new RegExp("[🇯🇵]", "u");
var r = new RegExp("[\uD83C\uDDEF\uD83C\uDDF5]", "u");
var r = new RegExp("[\u{1F1EF}\u{1F1F5}]", "u");
var r = new RegExp("[👨‍👩‍👦]", "");
var r = new RegExp("[👨‍👩‍👦]", "u");
var r = new RegExp("[\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66]", "u");
var r = new RegExp("[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]", "u");
var r = new globalThis.RegExp("[❇️]", "");
var r = new globalThis.RegExp("[👶🏻]", "u");
var r = new globalThis.RegExp("[🇯🇵]", "");
var r = new globalThis.RegExp("[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]", "u");
var r = new window.RegExp("[❇️]", "");
var r = new window.RegExp("[👍]", "");
var r = new global.RegExp("[❇️]", "");
var r = new global.RegExp("[👍]", "");
var r = new globalThis.globalThis.globalThis.RegExp("[❇️]", "");
var r = new globalThis.globalThis.globalThis.RegExp("[👍]", "");
var r = RegExp("[👍]", "");
var r = window.RegExp("[👍]", "");
var r = global.RegExp("[👍]", "");
var r = globalThis.RegExp("[👍]", "");

/[\]👍]/;
```

# Diagnostics
```
invalid.js:1:11 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
  > 1 │ var r = /[👍]/;
      │           ^^
    2 │ var r = /[\uD83D\uDC4D]/;
    3 │ var r = /[👍]\\a/;
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    1 │ var·r·=·/[👍]/u;
      │               + 

```

```
invalid.js:2:11 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    1 │ var r = /[👍]/;
  > 2 │ var r = /[\uD83D\uDC4D]/;
      │           ^^^^^^^^^^^^
    3 │ var r = /[👍]\\a/;
    4 │ var r = /(?<=[👍])/;
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    2 │ var·r·=·/[\uD83D\uDC4D]/u;
      │                         + 

```

```
invalid.js:3:11 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    1 │ var r = /[👍]/;
    2 │ var r = /[\uD83D\uDC4D]/;
  > 3 │ var r = /[👍]\\a/;
      │           ^^
    4 │ var r = /(?<=[👍])/;
    5 │ var r = /[A�]/;
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    3 │ var·r·=·/[👍]\\a/u;
      │                  + 

```

```
invalid.js:4:15 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    2 │ var r = /[\uD83D\uDC4D]/;
    3 │ var r = /[👍]\\a/;
  > 4 │ var r = /(?<=[👍])/;
      │               ^^
    5 │ var r = /[A�]/;
    6 │ var r = /[A�]/u;
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    4 │ var·r·=·/(?<=[👍])/u;
      │                    + 

```

```
invalid.js:5:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    3 │ var r = /[👍]\\a/;
    4 │ var r = /(?<=[👍])/;
  > 5 │ var r = /[A�]/;
      │           ^
    6 │ var r = /[A�]/u;
    7 │ var r = /[\u0041\u0301]/;
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:6:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    4 │ var r = /(?<=[👍])/;
    5 │ var r = /[A�]/;
  > 6 │ var r = /[A�]/u;
      │           ^
    7 │ var r = /[\u0041\u0301]/;
    8 │ var r = /[\u0041\u0301]/u;
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:7:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    5 │ var r = /[A�]/;
    6 │ var r = /[A�]/u;
  > 7 │ var r = /[\u0041\u0301]/;
      │           ^^^^^^^^^^^^
    8 │ var r = /[\u0041\u0301]/u;
    9 │ var r = /[\u{41}\u{301}]/u;
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:8:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
     6 │ var r = /[A�]/u;
     7 │ var r = /[\u0041\u0301]/;
   > 8 │ var r = /[\u0041\u0301]/u;
       │           ^^^^^^^^^^^^
     9 │ var r = /[\u{41}\u{301}]/u;
    10 │ var r = /[❇�]/;
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:9:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
     7 │ var r = /[\u0041\u0301]/;
     8 │ var r = /[\u0041\u0301]/u;
   > 9 │ var r = /[\u{41}\u{301}]/u;
       │           ^^^^^^^^^^^^^
    10 │ var r = /[❇�]/;
    11 │ var r = /[❇�]/u;
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:10:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
     8 │ var r = /[\u0041\u0301]/u;
     9 │ var r = /[\u{41}\u{301}]/u;
  > 10 │ var r = /[❇�]/;
       │           ^
    11 │ var r = /[❇�]/u;
    12 │ var r = /[\u2747\uFE0F]/;
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:11:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
     9 │ var r = /[\u{41}\u{301}]/u;
    10 │ var r = /[❇�]/;
  > 11 │ var r = /[❇�]/u;
       │           ^
    12 │ var r = /[\u2747\uFE0F]/;
    13 │ var r = /[\u2747\uFE0F]/u;
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:12:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    10 │ var r = /[❇�]/;
    11 │ var r = /[❇�]/u;
  > 12 │ var r = /[\u2747\uFE0F]/;
       │           ^^^^^^^^^^^^
    13 │ var r = /[\u2747\uFE0F]/u;
    14 │ var r = /[\u{2747}\u{FE0F}]/u;
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:13:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    11 │ var r = /[❇�]/u;
    12 │ var r = /[\u2747\uFE0F]/;
  > 13 │ var r = /[\u2747\uFE0F]/u;
       │           ^^^^^^^^^^^^
    14 │ var r = /[\u{2747}\u{FE0F}]/u;
    15 │ var r = /[👶🏻]/;
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:14:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    12 │ var r = /[\u2747\uFE0F]/;
    13 │ var r = /[\u2747\uFE0F]/u;
  > 14 │ var r = /[\u{2747}\u{FE0F}]/u;
       │           ^^^^^^^^^^^^^^^^
    15 │ var r = /[👶🏻]/;
    16 │ var r = /[👶🏻]/u;
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:15:11 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    13 │ var r = /[\u2747\uFE0F]/u;
    14 │ var r = /[\u{2747}\u{FE0F}]/u;
  > 15 │ var r = /[👶🏻]/;
       │           ^^
    16 │ var r = /[👶🏻]/u;
    17 │ var r = /[\uD83D\uDC76\uD83C\uDFFB]/u;
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    15 │ var·r·=·/[👶🏻]/u;
       │                 + 

```

```
invalid.js:16:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match an emoji with a skin tone modifier.
  
    14 │ var r = /[\u{2747}\u{FE0F}]/u;
    15 │ var r = /[👶🏻]/;
  > 16 │ var r = /[👶🏻]/u;
       │           ^^^^
    17 │ var r = /[\uD83D\uDC76\uD83C\uDFFB]/u;
    18 │ var r = /[\u{1F476}\u{1F3FB}]/u;
  
  i Replace the character class with an alternation.
  

```

```
invalid.js:17:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match an emoji with a skin tone modifier.
  
    15 │ var r = /[👶🏻]/;
    16 │ var r = /[👶🏻]/u;
  > 17 │ var r = /[\uD83D\uDC76\uD83C\uDFFB]/u;
       │           ^^^^^^^^^^^^^^^^^^^^^^^^
    18 │ var r = /[\u{1F476}\u{1F3FB}]/u;
    19 │ var r = /[🇯🇵]/;
  
  i Replace the character class with an alternation.
  

```

```
invalid.js:18:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match an emoji with a skin tone modifier.
  
    16 │ var r = /[👶🏻]/u;
    17 │ var r = /[\uD83D\uDC76\uD83C\uDFFB]/u;
  > 18 │ var r = /[\u{1F476}\u{1F3FB}]/u;
       │           ^^^^^^^^^^^^^^^^^^
    19 │ var r = /[🇯🇵]/;
    20 │ var r = /[🇯🇵]/i;
  
  i Replace the character class with an alternation.
  

```

```
invalid.js:19:11 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    17 │ var r = /[\uD83D\uDC76\uD83C\uDFFB]/u;
    18 │ var r = /[\u{1F476}\u{1F3FB}]/u;
  > 19 │ var r = /[🇯🇵]/;
       │           ^
    20 │ var r = /[🇯🇵]/i;
    21 │ var r = /[🇯🇵]/u;
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    19 │ var·r·=·/[🇯🇵]/u;
       │               + 

```

```
invalid.js:20:11 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    18 │ var r = /[\u{1F476}\u{1F3FB}]/u;
    19 │ var r = /[🇯🇵]/;
  > 20 │ var r = /[🇯🇵]/i;
       │           ^
    21 │ var r = /[🇯🇵]/u;
    22 │ var r = /[\uD83C\uDDEF\uD83C\uDDF5]/u;
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    18 18 │   var r = /[\u{1F476}\u{1F3FB}]/u;
    19 19 │   var r = /[🇯🇵]/;
    20    │ - var·r·=·/[🇯🇵]/i;
       20 │ + var·r·=·/[🇯🇵]/iu;
    21 21 │   var r = /[🇯🇵]/u;
    22 22 │   var r = /[\uD83C\uDDEF\uD83C\uDDF5]/u;
  

```

```
invalid.js:21:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a pair of regional indicator symbols.
  
    19 │ var r = /[🇯🇵]/;
    20 │ var r = /[🇯🇵]/i;
  > 21 │ var r = /[🇯🇵]/u;
       │           ^^
    22 │ var r = /[\uD83C\uDDEF\uD83C\uDDF5]/u;
    23 │ var r = /[\u{1F1EF}\u{1F1F5}]/u;
  
  i A pair of regional indicator symbols encodes a country code. Replace the character class with an alternation.
  

```

```
invalid.js:22:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a pair of regional indicator symbols.
  
    20 │ var r = /[🇯🇵]/i;
    21 │ var r = /[🇯🇵]/u;
  > 22 │ var r = /[\uD83C\uDDEF\uD83C\uDDF5]/u;
       │           ^^^^^^^^^^^^^^^^^^^^^^^^
    23 │ var r = /[\u{1F1EF}\u{1F1F5}]/u;
    24 │ var r = /[👨�👩�👦]/;
  
  i A pair of regional indicator symbols encodes a country code. Replace the character class with an alternation.
  

```

```
invalid.js:23:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a pair of regional indicator symbols.
  
    21 │ var r = /[🇯🇵]/u;
    22 │ var r = /[\uD83C\uDDEF\uD83C\uDDF5]/u;
  > 23 │ var r = /[\u{1F1EF}\u{1F1F5}]/u;
       │           ^^^^^^^^^^^^^^^^^^
    24 │ var r = /[👨�👩�👦]/;
    25 │ var r = /[👨�👩�👦]/u;
  
  i A pair of regional indicator symbols encodes a country code. Replace the character class with an alternation.
  

```

```
invalid.js:24:11 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    22 │ var r = /[\uD83C\uDDEF\uD83C\uDDF5]/u;
    23 │ var r = /[\u{1F1EF}\u{1F1F5}]/u;
  > 24 │ var r = /[👨�👩�👦]/;
       │           ^^
    25 │ var r = /[👨�👩�👦]/u;
    26 │ var r = /[\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66]/u;
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    24 │ var·r·=·/[👨�👩�👦]/u;
       │                   + 

```

```
invalid.js:25:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a joined character sequence.
  
    23 │ var r = /[\u{1F1EF}\u{1F1F5}]/u;
    24 │ var r = /[👨�👩�👦]/;
  > 25 │ var r = /[👨�👩�👦]/u;
       │           ^^^^
    26 │ var r = /[\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66]/u;
    27 │ var r = /[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]/u;
  
  i A zero width joiner composes several emojis into a new one. Replace the character class with an alternation.
  

```

```
invalid.js:26:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a joined character sequence.
  
    24 │ var r = /[👨�👩�👦]/;
    25 │ var r = /[👨�👩�👦]/u;
  > 26 │ var r = /[\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66]/u;
       │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    27 │ var r = /[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]/u;
    28 │ var r = new RegExp("[👍]", "");
  
  i A zero width joiner composes several emojis into a new one. Replace the character class with an alternation.
  

```

```
invalid.js:27:11 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a joined character sequence.
  
    25 │ var r = /[👨�👩�👦]/u;
    26 │ var r = /[\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66]/u;
  > 27 │ var r = /[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]/u;
       │           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    28 │ var r = new RegExp("[👍]", "");
    29 │ var r = new RegExp('[👍]', ``);
  
  i A zero width joiner composes several emojis into a new one. Replace the character class with an alternation.
  

```

```
invalid.js:28:22 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    26 │ var r = /[\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66]/u;
    27 │ var r = /[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]/u;
  > 28 │ var r = new RegExp("[👍]", "");
       │                      ^^
    29 │ var r = new RegExp('[👍]', ``);
    30 │ var r = new RegExp("[👍]", flags);
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    28 │ var·r·=·new·RegExp("[👍]",·"u");
       │                             +   

```

```
invalid.js:29:22 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    27 │ var r = /[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]/u;
    28 │ var r = new RegExp("[👍]", "");
  > 29 │ var r = new RegExp('[👍]', ``);
       │                      ^^
    30 │ var r = new RegExp("[👍]", flags);
    31 │ var r = new RegExp("[\uD83D\uDC4D]", "");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    29 │ var·r·=·new·RegExp('[👍]',·`u`);
       │                             +   

```

```
invalid.js:30:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    28 │ var r = new RegExp("[👍]", "");
    29 │ var r = new RegExp('[👍]', ``);
  > 30 │ var r = new RegExp("[👍]", flags);
       │                      ^^
    31 │ var r = new RegExp("[\uD83D\uDC4D]", "");
    32 │ var r = new RegExp("/(?<=[👍])", "");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  

```

```
invalid.js:31:22 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    29 │ var r = new RegExp('[👍]', ``);
    30 │ var r = new RegExp("[👍]", flags);
  > 31 │ var r = new RegExp("[\uD83D\uDC4D]", "");
       │                      ^^^^^^^^^^^^
    32 │ var r = new RegExp("/(?<=[👍])", "");
    33 │ var r = new RegExp("[A�]", "");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    31 │ var·r·=·new·RegExp("[\uD83D\uDC4D]",·"u");
       │                                       +   

```

```
invalid.js:32:27 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    30 │ var r = new RegExp("[👍]", flags);
    31 │ var r = new RegExp("[\uD83D\uDC4D]", "");
  > 32 │ var r = new RegExp("/(?<=[👍])", "");
       │                           ^^
    33 │ var r = new RegExp("[A�]", "");
    34 │ var r = new RegExp("[A�]", "u");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    32 │ var·r·=·new·RegExp("/(?<=[👍])",·"u");
       │                                   +   

```

```
invalid.js:33:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    31 │ var r = new RegExp("[\uD83D\uDC4D]", "");
    32 │ var r = new RegExp("/(?<=[👍])", "");
  > 33 │ var r = new RegExp("[A�]", "");
       │                      ^
    34 │ var r = new RegExp("[A�]", "u");
    35 │ var r = new RegExp("[\u0041\u0301]", "");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:34:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    32 │ var r = new RegExp("/(?<=[👍])", "");
    33 │ var r = new RegExp("[A�]", "");
  > 34 │ var r = new RegExp("[A�]", "u");
       │                      ^
    35 │ var r = new RegExp("[\u0041\u0301]", "");
    36 │ var r = new RegExp("[\u0041\u0301]", "u");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:35:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    33 │ var r = new RegExp("[A�]", "");
    34 │ var r = new RegExp("[A�]", "u");
  > 35 │ var r = new RegExp("[\u0041\u0301]", "");
       │                      ^^^^^^^^^^^^
    36 │ var r = new RegExp("[\u0041\u0301]", "u");
    37 │ var r = new RegExp("[\u{41}\u{301}]", "u");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:36:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    34 │ var r = new RegExp("[A�]", "u");
    35 │ var r = new RegExp("[\u0041\u0301]", "");
  > 36 │ var r = new RegExp("[\u0041\u0301]", "u");
       │                      ^^^^^^^^^^^^
    37 │ var r = new RegExp("[\u{41}\u{301}]", "u");
    38 │ var r = new RegExp("[❇�]", "");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:37:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    35 │ var r = new RegExp("[\u0041\u0301]", "");
    36 │ var r = new RegExp("[\u0041\u0301]", "u");
  > 37 │ var r = new RegExp("[\u{41}\u{301}]", "u");
       │                      ^^^^^^^^^^^^^
    38 │ var r = new RegExp("[❇�]", "");
    39 │ var r = new RegExp("[❇�]", "u");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:38:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    36 │ var r = new RegExp("[\u0041\u0301]", "u");
    37 │ var r = new RegExp("[\u{41}\u{301}]", "u");
  > 38 │ var r = new RegExp("[❇�]", "");
       │                      ^
    39 │ var r = new RegExp("[❇�]", "u");
    40 │ var r = new RegExp("[\u2747\uFE0F]", "");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:39:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    37 │ var r = new RegExp("[\u{41}\u{301}]", "u");
    38 │ var r = new RegExp("[❇�]", "");
  > 39 │ var r = new RegExp("[❇�]", "u");
       │                      ^
    40 │ var r = new RegExp("[\u2747\uFE0F]", "");
    41 │ var r = new RegExp("[\u2747\uFE0F]", "u");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:40:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    38 │ var r = new RegExp("[❇�]", "");
    39 │ var r = new RegExp("[❇�]", "u");
  > 40 │ var r = new RegExp("[\u2747\uFE0F]", "");
       │                      ^^^^^^^^^^^^
    41 │ var r = new RegExp("[\u2747\uFE0F]", "u");
    42 │ var r = new RegExp("[\u{2747}\u{FE0F}]", "u");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:41:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    39 │ var r = new RegExp("[❇�]", "u");
    40 │ var r = new RegExp("[\u2747\uFE0F]", "");
  > 41 │ var r = new RegExp("[\u2747\uFE0F]", "u");
       │                      ^^^^^^^^^^^^
    42 │ var r = new RegExp("[\u{2747}\u{FE0F}]", "u");
    43 │ var r = new RegExp("[👶🏻]", "");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:42:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    40 │ var r = new RegExp("[\u2747\uFE0F]", "");
    41 │ var r = new RegExp("[\u2747\uFE0F]", "u");
  > 42 │ var r = new RegExp("[\u{2747}\u{FE0F}]", "u");
       │                      ^^^^^^^^^^^^^^^^
    43 │ var r = new RegExp("[👶🏻]", "");
    44 │ var r = new RegExp("[👶🏻]", "u");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:43:22 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    41 │ var r = new RegExp("[\u2747\uFE0F]", "u");
    42 │ var r = new RegExp("[\u{2747}\u{FE0F}]", "u");
  > 43 │ var r = new RegExp("[👶🏻]", "");
       │                      ^^
    44 │ var r = new RegExp("[👶🏻]", "u");
    45 │ var r = new RegExp("[\uD83D\uDC76\uD83C\uDFFB]", "u");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    43 │ var·r·=·new·RegExp("[👶🏻]",·"u");
       │                               +   

```

```
invalid.js:44:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match an emoji with a skin tone modifier.
  
    42 │ var r = new RegExp("[\u{2747}\u{FE0F}]", "u");
    43 │ var r = new RegExp("[👶🏻]", "");
  > 44 │ var r = new RegExp("[👶🏻]", "u");
       │                      ^^^^
    45 │ var r = new RegExp("[\uD83D\uDC76\uD83C\uDFFB]", "u");
    46 │ var r = new RegExp("[\u{1F476}\u{1F3FB}]", "u");
  
  i Replace the character class with an alternation.
  

```

```
invalid.js:45:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match an emoji with a skin tone modifier.
  
    43 │ var r = new RegExp("[👶🏻]", "");
    44 │ var r = new RegExp("[👶🏻]", "u");
  > 45 │ var r = new RegExp("[\uD83D\uDC76\uD83C\uDFFB]", "u");
       │                      ^^^^^^^^^^^^^^^^^^^^^^^^
    46 │ var r = new RegExp("[\u{1F476}\u{1F3FB}]", "u");
    47 │ var r = new RegExp("[🇯🇵]", "");
  
  i Replace the character class with an alternation.
  

```

```
invalid.js:46:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match an emoji with a skin tone modifier.
  
    44 │ var r = new RegExp("[👶🏻]", "u");
    45 │ var r = new RegExp("[\uD83D\uDC76\uD83C\uDFFB]", "u");
  > 46 │ var r = new RegExp("[\u{1F476}\u{1F3FB}]", "u");
       │                      ^^^^^^^^^^^^^^^^^^
    47 │ var r = new RegExp("[🇯🇵]", "");
    48 │ var r = new RegExp("[🇯🇵]", "i");
  
  i Replace the character class with an alternation.
  

```

```
invalid.js:47:22 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    45 │ var r = new RegExp("[\uD83D\uDC76\uD83C\uDFFB]", "u");
    46 │ var r = new RegExp("[\u{1F476}\u{1F3FB}]", "u");
  > 47 │ var r = new RegExp("[🇯🇵]", "");
       │                      ^
    48 │ var r = new RegExp("[🇯🇵]", "i");
    49 │ var r = new RegExp('[🇯🇵]', `i`);
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    47 │ var·r·=·new·RegExp("[🇯🇵]",·"u");
       │                             +   

```

```
invalid.js:48:22 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    46 │ var r = new RegExp("[\u{1F476}\u{1F3FB}]", "u");
    47 │ var r = new RegExp("[🇯🇵]", "");
  > 48 │ var r = new RegExp("[🇯🇵]", "i");
       │                      ^
    49 │ var r = new RegExp('[🇯🇵]', `i`);
    50 │ var r = new RegExp('[🇯🇵]', `${foo}`);
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    46 46 │   var r = new RegExp("[\u{1F476}\u{1F3FB}]", "u");
    47 47 │   var r = new RegExp("[🇯🇵]", "");
    48    │ - var·r·=·new·RegExp("[🇯🇵]",·"i");
       48 │ + var·r·=·new·RegExp("[🇯🇵]",·"iu");
    49 49 │   var r = new RegExp('[🇯🇵]', `i`);
    50 50 │   var r = new RegExp('[🇯🇵]', `${foo}`);
  

```

```
invalid.js:49:22 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    47 │ var r = new RegExp("[🇯🇵]", "");
    48 │ var r = new RegExp("[🇯🇵]", "i");
  > 49 │ var r = new RegExp('[🇯🇵]', `i`);
       │                      ^
    50 │ var r = new RegExp('[🇯🇵]', `${foo}`);
    51 │ var r = new RegExp("[🇯🇵]");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    47 47 │   var r = new RegExp("[🇯🇵]", "");
    48 48 │   var r = new RegExp("[🇯🇵]", "i");
    49    │ - var·r·=·new·RegExp('[🇯🇵]',·`i`);
       49 │ + var·r·=·new·RegExp('[🇯🇵]',·`iu`);
    50 50 │   var r = new RegExp('[🇯🇵]', `${foo}`);
    51 51 │   var r = new RegExp("[🇯🇵]");
  

```

```
invalid.js:50:22 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    48 │ var r = new RegExp("[🇯🇵]", "i");
    49 │ var r = new RegExp('[🇯🇵]', `i`);
  > 50 │ var r = new RegExp('[🇯🇵]', `${foo}`);
       │                      ^
    51 │ var r = new RegExp("[🇯🇵]");
    52 │ var r = new RegExp("[🇯🇵]",);
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    50 │ var·r·=·new·RegExp('[🇯🇵]',·`${foo}u`);
       │                                   +   

```

```
invalid.js:51:22 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    49 │ var r = new RegExp('[🇯🇵]', `i`);
    50 │ var r = new RegExp('[🇯🇵]', `${foo}`);
  > 51 │ var r = new RegExp("[🇯🇵]");
       │                      ^
    52 │ var r = new RegExp("[🇯🇵]",);
    53 │ var r = new RegExp("[🇯🇵]", "u");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    51 │ var·r·=·new·RegExp("[🇯🇵]",·"u");
       │                          +++++  

```

```
invalid.js:52:22 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    50 │ var r = new RegExp('[🇯🇵]', `${foo}`);
    51 │ var r = new RegExp("[🇯🇵]");
  > 52 │ var r = new RegExp("[🇯🇵]",);
       │                      ^
    53 │ var r = new RegExp("[🇯🇵]", "u");
    54 │ var r = new RegExp("[\uD83C\uDDEF\uD83C\uDDF5]", "u");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    52 │ var·r·=·new·RegExp("[🇯🇵]",·"u");
       │                           ++++  

```

```
invalid.js:53:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a pair of regional indicator symbols.
  
    51 │ var r = new RegExp("[🇯🇵]");
    52 │ var r = new RegExp("[🇯🇵]",);
  > 53 │ var r = new RegExp("[🇯🇵]", "u");
       │                      ^^
    54 │ var r = new RegExp("[\uD83C\uDDEF\uD83C\uDDF5]", "u");
    55 │ var r = new RegExp("[\u{1F1EF}\u{1F1F5}]", "u");
  
  i A pair of regional indicator symbols encodes a country code. Replace the character class with an alternation.
  

```

```
invalid.js:54:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a pair of regional indicator symbols.
  
    52 │ var r = new RegExp("[🇯🇵]",);
    53 │ var r = new RegExp("[🇯🇵]", "u");
  > 54 │ var r = new RegExp("[\uD83C\uDDEF\uD83C\uDDF5]", "u");
       │                      ^^^^^^^^^^^^^^^^^^^^^^^^
    55 │ var r = new RegExp("[\u{1F1EF}\u{1F1F5}]", "u");
    56 │ var r = new RegExp("[👨�👩�👦]", "");
  
  i A pair of regional indicator symbols encodes a country code. Replace the character class with an alternation.
  

```

```
invalid.js:55:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a pair of regional indicator symbols.
  
    53 │ var r = new RegExp("[🇯🇵]", "u");
    54 │ var r = new RegExp("[\uD83C\uDDEF\uD83C\uDDF5]", "u");
  > 55 │ var r = new RegExp("[\u{1F1EF}\u{1F1F5}]", "u");
       │                      ^^^^^^^^^^^^^^^^^^
    56 │ var r = new RegExp("[👨�👩�👦]", "");
    57 │ var r = new RegExp("[👨�👩�👦]", "u");
  
  i A pair of regional indicator symbols encodes a country code. Replace the character class with an alternation.
  

```

```
invalid.js:56:22 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    54 │ var r = new RegExp("[\uD83C\uDDEF\uD83C\uDDF5]", "u");
    55 │ var r = new RegExp("[\u{1F1EF}\u{1F1F5}]", "u");
  > 56 │ var r = new RegExp("[👨�👩�👦]", "");
       │                      ^^
    57 │ var r = new RegExp("[👨�👩�👦]", "u");
    58 │ var r = new RegExp("[\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66]", "u");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    56 │ var·r·=·new·RegExp("[👨�👩�👦]",·"u");
       │                                 +   

```

```
invalid.js:57:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a joined character sequence.
  
    55 │ var r = new RegExp("[\u{1F1EF}\u{1F1F5}]", "u");
    56 │ var r = new RegExp("[👨�👩�👦]", "");
  > 57 │ var r = new RegExp("[👨�👩�👦]", "u");
       │                      ^^^^
    58 │ var r = new RegExp("[\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66]", "u");
    59 │ var r = new RegExp("[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]", "u");
  
  i A zero width joiner composes several emojis into a new one. Replace the character class with an alternation.
  

```

```
invalid.js:58:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a joined character sequence.
  
    56 │ var r = new RegExp("[👨�👩�👦]", "");
    57 │ var r = new RegExp("[👨�👩�👦]", "u");
  > 58 │ var r = new RegExp("[\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66]", "u");
       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    59 │ var r = new RegExp("[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]", "u");
    60 │ var r = new globalThis.RegExp("[❇�]", "");
  
  i A zero width joiner composes several emojis into a new one. Replace the character class with an alternation.
  

```

```
invalid.js:59:22 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a joined character sequence.
  
    57 │ var r = new RegExp("[👨�👩�👦]", "u");
    58 │ var r = new RegExp("[\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66]", "u");
  > 59 │ var r = new RegExp("[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]", "u");
       │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    60 │ var r = new globalThis.RegExp("[❇�]", "");
    61 │ var r = new globalThis.RegExp("[👶🏻]", "u");
  
  i A zero width joiner composes several emojis into a new one. Replace the character class with an alternation.
  

```

```
invalid.js:60:33 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    58 │ var r = new RegExp("[\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66]", "u");
    59 │ var r = new RegExp("[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]", "u");
  > 60 │ var r = new globalThis.RegExp("[❇�]", "");
       │                                 ^
    61 │ var r = new globalThis.RegExp("[👶🏻]", "u");
    62 │ var r = new globalThis.RegExp("[🇯🇵]", "");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:61:33 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match an emoji with a skin tone modifier.
  
    59 │ var r = new RegExp("[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]", "u");
    60 │ var r = new globalThis.RegExp("[❇�]", "");
  > 61 │ var r = new globalThis.RegExp("[👶🏻]", "u");
       │                                 ^^^^
    62 │ var r = new globalThis.RegExp("[🇯🇵]", "");
    63 │ var r = new globalThis.RegExp("[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]", "u");
  
  i Replace the character class with an alternation.
  

```

```
invalid.js:62:33 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    60 │ var r = new globalThis.RegExp("[❇�]", "");
    61 │ var r = new globalThis.RegExp("[👶🏻]", "u");
  > 62 │ var r = new globalThis.RegExp("[🇯🇵]", "");
       │                                 ^
    63 │ var r = new globalThis.RegExp("[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]", "u");
    64 │ var r = new window.RegExp("[❇�]", "");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    62 │ var·r·=·new·globalThis.RegExp("[🇯🇵]",·"u");
       │                                        +   

```

```
invalid.js:63:33 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a joined character sequence.
  
    61 │ var r = new globalThis.RegExp("[👶🏻]", "u");
    62 │ var r = new globalThis.RegExp("[🇯🇵]", "");
  > 63 │ var r = new globalThis.RegExp("[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]", "u");
       │                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    64 │ var r = new window.RegExp("[❇�]", "");
    65 │ var r = new window.RegExp("[👍]", "");
  
  i A zero width joiner composes several emojis into a new one. Replace the character class with an alternation.
  

```

```
invalid.js:64:29 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    62 │ var r = new globalThis.RegExp("[🇯🇵]", "");
    63 │ var r = new globalThis.RegExp("[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]", "u");
  > 64 │ var r = new window.RegExp("[❇�]", "");
       │                             ^
    65 │ var r = new window.RegExp("[👍]", "");
    66 │ var r = new global.RegExp("[❇�]", "");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:65:29 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    63 │ var r = new globalThis.RegExp("[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]", "u");
    64 │ var r = new window.RegExp("[❇�]", "");
  > 65 │ var r = new window.RegExp("[👍]", "");
       │                             ^^
    66 │ var r = new global.RegExp("[❇�]", "");
    67 │ var r = new global.RegExp("[👍]", "");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    65 │ var·r·=·new·window.RegExp("[👍]",·"u");
       │                                    +   

```

```
invalid.js:66:29 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    64 │ var r = new window.RegExp("[❇�]", "");
    65 │ var r = new window.RegExp("[👍]", "");
  > 66 │ var r = new global.RegExp("[❇�]", "");
       │                             ^
    67 │ var r = new global.RegExp("[👍]", "");
    68 │ var r = new globalThis.globalThis.globalThis.RegExp("[❇�]", "");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:67:29 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    65 │ var r = new window.RegExp("[👍]", "");
    66 │ var r = new global.RegExp("[❇�]", "");
  > 67 │ var r = new global.RegExp("[👍]", "");
       │                             ^^
    68 │ var r = new globalThis.globalThis.globalThis.RegExp("[❇�]", "");
    69 │ var r = new globalThis.globalThis.globalThis.RegExp("[👍]", "");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    67 │ var·r·=·new·global.RegExp("[👍]",·"u");
       │                                    +   

```

```
invalid.js:68:55 lint/suspicious/noMisleadingCharacterClass ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a character and a combining character.
  
    66 │ var r = new global.RegExp("[❇�]", "");
    67 │ var r = new global.RegExp("[👍]", "");
  > 68 │ var r = new globalThis.globalThis.globalThis.RegExp("[❇�]", "");
       │                                                       ^
    69 │ var r = new globalThis.globalThis.globalThis.RegExp("[👍]", "");
    70 │ var r = RegExp("[👍]", "");
  
  i A character and a combining character forms a new character. Replace the character class with an alternation.
  

```

```
invalid.js:69:55 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    67 │ var r = new global.RegExp("[👍]", "");
    68 │ var r = new globalThis.globalThis.globalThis.RegExp("[❇�]", "");
  > 69 │ var r = new globalThis.globalThis.globalThis.RegExp("[👍]", "");
       │                                                       ^^
    70 │ var r = RegExp("[👍]", "");
    71 │ var r = window.RegExp("[👍]", "");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    69 │ var·r·=·new·globalThis.globalThis.globalThis.RegExp("[👍]",·"u");
       │                                                              +   

```

```
invalid.js:70:18 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    68 │ var r = new globalThis.globalThis.globalThis.RegExp("[❇�]", "");
    69 │ var r = new globalThis.globalThis.globalThis.RegExp("[👍]", "");
  > 70 │ var r = RegExp("[👍]", "");
       │                  ^^
    71 │ var r = window.RegExp("[👍]", "");
    72 │ var r = global.RegExp("[👍]", "");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    70 │ var·r·=·RegExp("[👍]",·"u");
       │                         +   

```

```
invalid.js:71:25 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    69 │ var r = new globalThis.globalThis.globalThis.RegExp("[👍]", "");
    70 │ var r = RegExp("[👍]", "");
  > 71 │ var r = window.RegExp("[👍]", "");
       │                         ^^
    72 │ var r = global.RegExp("[👍]", "");
    73 │ var r = globalThis.RegExp("[👍]", "");
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    71 │ var·r·=·window.RegExp("[👍]",·"u");
       │                                +   

```

```
invalid.js:72:25 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    70 │ var r = RegExp("[👍]", "");
    71 │ var r = window.RegExp("[👍]", "");
  > 72 │ var r = global.RegExp("[👍]", "");
       │                         ^^
    73 │ var r = globalThis.RegExp("[👍]", "");
    74 │ 
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    72 │ var·r·=·global.RegExp("[👍]",·"u");
       │                                +   

```

```
invalid.js:73:29 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    71 │ var r = window.RegExp("[👍]", "");
    72 │ var r = global.RegExp("[👍]", "");
  > 73 │ var r = globalThis.RegExp("[👍]", "");
       │                             ^^
    74 │ 
    75 │ /[\]👍]/;
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    73 │ var·r·=·globalThis.RegExp("[👍]",·"u");
       │                                    +   

```

```
invalid.js:75:5 lint/suspicious/noMisleadingCharacterClass  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! A character class cannot match a surrogate pair. Add the 'u' unicode flag to match against them.
  
    73 │ var r = globalThis.RegExp("[👍]", "");
    74 │ 
  > 75 │ /[\]👍]/;
       │     ^^
  
  i A surrogate pair forms a single codepoint, but is encoded as a pair of two characters. Without the unicode flag, the regex matches a single surrogate character.
  
  i Safe fix: Add unicode u flag to regex
  
    73 73 │   var r = globalThis.RegExp("[👍]", "");
    74 74 │   
    75    │ - /[\]👍]/;
       75 │ + 
       76 │ + 
       77 │ + /[\]👍]/u;
  

```
