---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```js
[].forEach((a) => {
    return a.fn();
});
[].forEach(function(a) {
    return a.fn();
});
[].forEach((a) => {
    if (a) {
        return a.fn();
    }
});
[].forEach((a) => {
    if (a) {
        return;
    }
    return a.fn();
});
[].forEach((a) => {
    if (a) {
        return;
    }
    return a.fn();
});
[].forEach((a) => {
    if (a) {
        throw new Error();
    }
    return a.fn();
});
Array.from([], () => {});
Array.from([], function() {});
Array.from([], () => {
    return;
});
Array.from([], function() {
    return;
});
Array.from([], () => void null);
[].every(() => {
    return;
});
[].every(function() {
    return;
});
[].every(() => {});
[].every(function() {});
[].every(() => {
    try {
        // ok
    } finally {
        // ok
    }
});
[].every(() => {
    try {
        // ok
    } catch (e) {
        // ok
    } finally {
        // ok
    }
});
[].every(() => {
    try {
        return true;
    } catch (e) {
        // ok
    } finally {
        // ok
    }
});
[].every(() => {
    try {
        return true;
    } catch (e) {
        return true;
    }
});
[].every(() => {
    try {
        return true;
    } catch (e) {
        return true;
    } finally {}
});
[].every(() => void null);
[].filter(() => {
    return;
});
[].filter(function() {
    return;
});
[].filter(() => {});
[].filter(function() {});
[].filter(() => void null);
[].find(() => {
    return;
});
[].find(function() {
    return;
});
[].find(() => {});
[].find(function() {});
[].find(() => void null);
[].findIndex(() => {
    return;
});
[].findIndex(function() {
    return;
});
[].findIndex(() => {});
[].findIndex(function() {});
[].findIndex(() => void null);
[].findLast(() => {
    return;
});
[].findLast(function() {
    return;
});
[].findLast(() => {});
[].findLast(function() {});
[].findLast(() => void null);
[].findLastIndex(() => {
    return;
});
[].findLastIndex(function() {
    return;
});
[].findLastIndex(() => {});
[].findLastIndex(function() {});
[].findLastIndex(() => void null);
[].some(() => {
    return;
});
[].some(function() {
    return;
});
[].some(() => {});
[].some(function() {});
[].some(() => void null);
[].flatMap(() => {
    return;
});
[].flatMap(function() {
    return;
});
[].flatMap(() => {});
[].flatMap(function() {});
[].flatMap(() => void null);
[].map(() => {
    return;
});
[].map(function() {
    return;
});
[].map(() => {});
[].map(function() {});
[].map(() => void null);
[].reduce((a, b) => {
    return;
});
[].reduce(function(a, b) {
    return;
});
[].reduce((a, b) => {});
[].reduce(function(a, b) {});
[].reduce(() => void null);
[].reduceRight((a, b) => {
    return;
});
[].reduceRight(function(a, b) {
    return;
});
[].reduceRight((a, b) => {});
[].reduceRight(function(a, b) {});
[].reduceRight(() => void null);
[].sort((a, b) => {
    return;
});
[].sort(function(a, b) {
    return;
});
[].sort((a, b) => {});
[].sort(function(a, b) {});
[].sort(() => void null);
[].toSorted((a, b) => {
    return;
});
[].toSorted(function(a, b) {
    return;
});
[].toSorted((a, b) => {
    if (a > b) {
        return;
    } else if (a < b) {
        return;
    } else {
        return 1;
    }
});
[].toSorted((a, b) => {
    if (a > b) {
        return;
    } else if (a < b) {
        return;
    }
});
[].toSorted((a, b) => {
    if (a > b) {
        throw new Error();
    } else if (a < b) {
        return;
    }
});
[].toSorted(() => void null);

```

# Diagnostics
```
invalid.js:1:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to forEach() iterable method should not return a value.
  
  > 1 │ [].forEach((a) => {
      │    ^^^^^^^
    2 │     return a.fn();
    3 │ });
  
  i Either remove this return or remove the returned value.
  
  > 1 │ [].forEach((a) => {
      │                    
  > 2 │     return a.fn();
      │     ^^^^^^^
    3 │ });
    4 │ [].forEach(function(a) {
  

```

```
invalid.js:4:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to forEach() iterable method should not return a value.
  
    2 │     return a.fn();
    3 │ });
  > 4 │ [].forEach(function(a) {
      │    ^^^^^^^
    5 │     return a.fn();
    6 │ });
  
  i Either remove this return or remove the returned value.
  
    2 │     return a.fn();
    3 │ });
  > 4 │ [].forEach(function(a) {
      │                         
  > 5 │     return a.fn();
      │     ^^^^^^^
    6 │ });
    7 │ [].forEach((a) => {
  

```

```
invalid.js:7:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to forEach() iterable method should not return a value.
  
    5 │     return a.fn();
    6 │ });
  > 7 │ [].forEach((a) => {
      │    ^^^^^^^
    8 │     if (a) {
    9 │         return a.fn();
  
  i Either remove this return or remove the returned value.
  
     6 │ });
     7 │ [].forEach((a) => {
   > 8 │     if (a) {
       │             
   > 9 │         return a.fn();
       │         ^^^^^^^
    10 │     }
    11 │ });
  

```

```
invalid.js:12:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to forEach() iterable method should not return a value.
  
    10 │     }
    11 │ });
  > 12 │ [].forEach((a) => {
       │    ^^^^^^^
    13 │     if (a) {
    14 │         return;
  
  i Either remove this return or remove the returned value.
  
    13 │     if (a) {
    14 │         return;
  > 15 │     }
       │      
  > 16 │     return a.fn();
       │     ^^^^^^^
    17 │ });
    18 │ [].forEach((a) => {
  

```

```
invalid.js:18:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to forEach() iterable method should not return a value.
  
    16 │     return a.fn();
    17 │ });
  > 18 │ [].forEach((a) => {
       │    ^^^^^^^
    19 │     if (a) {
    20 │         return;
  
  i Either remove this return or remove the returned value.
  
    19 │     if (a) {
    20 │         return;
  > 21 │     }
       │      
  > 22 │     return a.fn();
       │     ^^^^^^^
    23 │ });
    24 │ [].forEach((a) => {
  

```

```
invalid.js:24:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to forEach() iterable method should not return a value.
  
    22 │     return a.fn();
    23 │ });
  > 24 │ [].forEach((a) => {
       │    ^^^^^^^
    25 │     if (a) {
    26 │         throw new Error();
  
  i Either remove this return or remove the returned value.
  
    25 │     if (a) {
    26 │         throw new Error();
  > 27 │     }
       │      
  > 28 │     return a.fn();
       │     ^^^^^^^
    29 │ });
    30 │ Array.from([], () => {});
  

```

```
invalid.js:30:7 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to Array.from() method should always return a value.
  
    28 │     return a.fn();
    29 │ });
  > 30 │ Array.from([], () => {});
       │       ^^^^
    31 │ Array.from([], function() {});
    32 │ Array.from([], () => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:31:7 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to Array.from() method should always return a value.
  
    29 │ });
    30 │ Array.from([], () => {});
  > 31 │ Array.from([], function() {});
       │       ^^^^
    32 │ Array.from([], () => {
    33 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:32:7 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to Array.from() method should always return a value.
  
    30 │ Array.from([], () => {});
    31 │ Array.from([], function() {});
  > 32 │ Array.from([], () => {
       │       ^^^^
    33 │     return;
    34 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:35:7 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to Array.from() method should always return a value.
  
    33 │     return;
    34 │ });
  > 35 │ Array.from([], function() {
       │       ^^^^
    36 │     return;
    37 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:38:7 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to Array.from() method should always return a value.
  
    36 │     return;
    37 │ });
  > 38 │ Array.from([], () => void null);
       │       ^^^^
    39 │ [].every(() => {
    40 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:39:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    37 │ });
    38 │ Array.from([], () => void null);
  > 39 │ [].every(() => {
       │    ^^^^^
    40 │     return;
    41 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:42:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    40 │     return;
    41 │ });
  > 42 │ [].every(function() {
       │    ^^^^^
    43 │     return;
    44 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:45:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    43 │     return;
    44 │ });
  > 45 │ [].every(() => {});
       │    ^^^^^
    46 │ [].every(function() {});
    47 │ [].every(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:46:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    44 │ });
    45 │ [].every(() => {});
  > 46 │ [].every(function() {});
       │    ^^^^^
    47 │ [].every(() => {
    48 │     try {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:47:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    45 │ [].every(() => {});
    46 │ [].every(function() {});
  > 47 │ [].every(() => {
       │    ^^^^^
    48 │     try {
    49 │         // ok
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:54:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    52 │     }
    53 │ });
  > 54 │ [].every(() => {
       │    ^^^^^
    55 │     try {
    56 │         // ok
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:63:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    61 │     }
    62 │ });
  > 63 │ [].every(() => {
       │    ^^^^^
    64 │     try {
    65 │         return true;
  
  i Add missing return statements so that this callback returns a value on all execution paths.
  

```

```
invalid.js:86:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    84 │     } finally {}
    85 │ });
  > 86 │ [].every(() => void null);
       │    ^^^^^
    87 │ [].filter(() => {
    88 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:87:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to filter() iterable method should always return a value.
  
    85 │ });
    86 │ [].every(() => void null);
  > 87 │ [].filter(() => {
       │    ^^^^^^
    88 │     return;
    89 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:90:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to filter() iterable method should always return a value.
  
    88 │     return;
    89 │ });
  > 90 │ [].filter(function() {
       │    ^^^^^^
    91 │     return;
    92 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:93:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to filter() iterable method should always return a value.
  
    91 │     return;
    92 │ });
  > 93 │ [].filter(() => {});
       │    ^^^^^^
    94 │ [].filter(function() {});
    95 │ [].filter(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:94:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to filter() iterable method should always return a value.
  
    92 │ });
    93 │ [].filter(() => {});
  > 94 │ [].filter(function() {});
       │    ^^^^^^
    95 │ [].filter(() => void null);
    96 │ [].find(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:95:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to filter() iterable method should always return a value.
  
    93 │ [].filter(() => {});
    94 │ [].filter(function() {});
  > 95 │ [].filter(() => void null);
       │    ^^^^^^
    96 │ [].find(() => {
    97 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:96:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to find() iterable method should always return a value.
  
    94 │ [].filter(function() {});
    95 │ [].filter(() => void null);
  > 96 │ [].find(() => {
       │    ^^^^
    97 │     return;
    98 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:99:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to find() iterable method should always return a value.
  
     97 │     return;
     98 │ });
   > 99 │ [].find(function() {
        │    ^^^^
    100 │     return;
    101 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:102:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to find() iterable method should always return a value.
  
    100 │     return;
    101 │ });
  > 102 │ [].find(() => {});
        │    ^^^^
    103 │ [].find(function() {});
    104 │ [].find(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:103:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to find() iterable method should always return a value.
  
    101 │ });
    102 │ [].find(() => {});
  > 103 │ [].find(function() {});
        │    ^^^^
    104 │ [].find(() => void null);
    105 │ [].findIndex(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:104:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to find() iterable method should always return a value.
  
    102 │ [].find(() => {});
    103 │ [].find(function() {});
  > 104 │ [].find(() => void null);
        │    ^^^^
    105 │ [].findIndex(() => {
    106 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:105:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findIndex() iterable method should always return a value.
  
    103 │ [].find(function() {});
    104 │ [].find(() => void null);
  > 105 │ [].findIndex(() => {
        │    ^^^^^^^^^
    106 │     return;
    107 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:108:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findIndex() iterable method should always return a value.
  
    106 │     return;
    107 │ });
  > 108 │ [].findIndex(function() {
        │    ^^^^^^^^^
    109 │     return;
    110 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:111:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findIndex() iterable method should always return a value.
  
    109 │     return;
    110 │ });
  > 111 │ [].findIndex(() => {});
        │    ^^^^^^^^^
    112 │ [].findIndex(function() {});
    113 │ [].findIndex(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:112:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findIndex() iterable method should always return a value.
  
    110 │ });
    111 │ [].findIndex(() => {});
  > 112 │ [].findIndex(function() {});
        │    ^^^^^^^^^
    113 │ [].findIndex(() => void null);
    114 │ [].findLast(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:113:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findIndex() iterable method should always return a value.
  
    111 │ [].findIndex(() => {});
    112 │ [].findIndex(function() {});
  > 113 │ [].findIndex(() => void null);
        │    ^^^^^^^^^
    114 │ [].findLast(() => {
    115 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:114:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLast() iterable method should always return a value.
  
    112 │ [].findIndex(function() {});
    113 │ [].findIndex(() => void null);
  > 114 │ [].findLast(() => {
        │    ^^^^^^^^
    115 │     return;
    116 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:117:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLast() iterable method should always return a value.
  
    115 │     return;
    116 │ });
  > 117 │ [].findLast(function() {
        │    ^^^^^^^^
    118 │     return;
    119 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:120:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLast() iterable method should always return a value.
  
    118 │     return;
    119 │ });
  > 120 │ [].findLast(() => {});
        │    ^^^^^^^^
    121 │ [].findLast(function() {});
    122 │ [].findLast(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:121:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLast() iterable method should always return a value.
  
    119 │ });
    120 │ [].findLast(() => {});
  > 121 │ [].findLast(function() {});
        │    ^^^^^^^^
    122 │ [].findLast(() => void null);
    123 │ [].findLastIndex(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:122:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLast() iterable method should always return a value.
  
    120 │ [].findLast(() => {});
    121 │ [].findLast(function() {});
  > 122 │ [].findLast(() => void null);
        │    ^^^^^^^^
    123 │ [].findLastIndex(() => {
    124 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:123:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLastIndex() iterable method should always return a value.
  
    121 │ [].findLast(function() {});
    122 │ [].findLast(() => void null);
  > 123 │ [].findLastIndex(() => {
        │    ^^^^^^^^^^^^^
    124 │     return;
    125 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:126:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLastIndex() iterable method should always return a value.
  
    124 │     return;
    125 │ });
  > 126 │ [].findLastIndex(function() {
        │    ^^^^^^^^^^^^^
    127 │     return;
    128 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:129:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLastIndex() iterable method should always return a value.
  
    127 │     return;
    128 │ });
  > 129 │ [].findLastIndex(() => {});
        │    ^^^^^^^^^^^^^
    130 │ [].findLastIndex(function() {});
    131 │ [].findLastIndex(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:130:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLastIndex() iterable method should always return a value.
  
    128 │ });
    129 │ [].findLastIndex(() => {});
  > 130 │ [].findLastIndex(function() {});
        │    ^^^^^^^^^^^^^
    131 │ [].findLastIndex(() => void null);
    132 │ [].some(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:131:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLastIndex() iterable method should always return a value.
  
    129 │ [].findLastIndex(() => {});
    130 │ [].findLastIndex(function() {});
  > 131 │ [].findLastIndex(() => void null);
        │    ^^^^^^^^^^^^^
    132 │ [].some(() => {
    133 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:132:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to some() iterable method should always return a value.
  
    130 │ [].findLastIndex(function() {});
    131 │ [].findLastIndex(() => void null);
  > 132 │ [].some(() => {
        │    ^^^^
    133 │     return;
    134 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:135:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to some() iterable method should always return a value.
  
    133 │     return;
    134 │ });
  > 135 │ [].some(function() {
        │    ^^^^
    136 │     return;
    137 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:138:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to some() iterable method should always return a value.
  
    136 │     return;
    137 │ });
  > 138 │ [].some(() => {});
        │    ^^^^
    139 │ [].some(function() {});
    140 │ [].some(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:139:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to some() iterable method should always return a value.
  
    137 │ });
    138 │ [].some(() => {});
  > 139 │ [].some(function() {});
        │    ^^^^
    140 │ [].some(() => void null);
    141 │ [].flatMap(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:140:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to some() iterable method should always return a value.
  
    138 │ [].some(() => {});
    139 │ [].some(function() {});
  > 140 │ [].some(() => void null);
        │    ^^^^
    141 │ [].flatMap(() => {
    142 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:141:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to flatMap() iterable method should always return a value.
  
    139 │ [].some(function() {});
    140 │ [].some(() => void null);
  > 141 │ [].flatMap(() => {
        │    ^^^^^^^
    142 │     return;
    143 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:144:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to flatMap() iterable method should always return a value.
  
    142 │     return;
    143 │ });
  > 144 │ [].flatMap(function() {
        │    ^^^^^^^
    145 │     return;
    146 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:147:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to flatMap() iterable method should always return a value.
  
    145 │     return;
    146 │ });
  > 147 │ [].flatMap(() => {});
        │    ^^^^^^^
    148 │ [].flatMap(function() {});
    149 │ [].flatMap(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:148:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to flatMap() iterable method should always return a value.
  
    146 │ });
    147 │ [].flatMap(() => {});
  > 148 │ [].flatMap(function() {});
        │    ^^^^^^^
    149 │ [].flatMap(() => void null);
    150 │ [].map(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:149:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to flatMap() iterable method should always return a value.
  
    147 │ [].flatMap(() => {});
    148 │ [].flatMap(function() {});
  > 149 │ [].flatMap(() => void null);
        │    ^^^^^^^
    150 │ [].map(() => {
    151 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:150:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to map() iterable method should always return a value.
  
    148 │ [].flatMap(function() {});
    149 │ [].flatMap(() => void null);
  > 150 │ [].map(() => {
        │    ^^^
    151 │     return;
    152 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:153:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to map() iterable method should always return a value.
  
    151 │     return;
    152 │ });
  > 153 │ [].map(function() {
        │    ^^^
    154 │     return;
    155 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:156:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to map() iterable method should always return a value.
  
    154 │     return;
    155 │ });
  > 156 │ [].map(() => {});
        │    ^^^
    157 │ [].map(function() {});
    158 │ [].map(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:157:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to map() iterable method should always return a value.
  
    155 │ });
    156 │ [].map(() => {});
  > 157 │ [].map(function() {});
        │    ^^^
    158 │ [].map(() => void null);
    159 │ [].reduce((a, b) => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:158:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to map() iterable method should always return a value.
  
    156 │ [].map(() => {});
    157 │ [].map(function() {});
  > 158 │ [].map(() => void null);
        │    ^^^
    159 │ [].reduce((a, b) => {
    160 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:159:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduce() iterable method should always return a value.
  
    157 │ [].map(function() {});
    158 │ [].map(() => void null);
  > 159 │ [].reduce((a, b) => {
        │    ^^^^^^
    160 │     return;
    161 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:162:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduce() iterable method should always return a value.
  
    160 │     return;
    161 │ });
  > 162 │ [].reduce(function(a, b) {
        │    ^^^^^^
    163 │     return;
    164 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:165:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduce() iterable method should always return a value.
  
    163 │     return;
    164 │ });
  > 165 │ [].reduce((a, b) => {});
        │    ^^^^^^
    166 │ [].reduce(function(a, b) {});
    167 │ [].reduce(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:166:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduce() iterable method should always return a value.
  
    164 │ });
    165 │ [].reduce((a, b) => {});
  > 166 │ [].reduce(function(a, b) {});
        │    ^^^^^^
    167 │ [].reduce(() => void null);
    168 │ [].reduceRight((a, b) => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:167:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduce() iterable method should always return a value.
  
    165 │ [].reduce((a, b) => {});
    166 │ [].reduce(function(a, b) {});
  > 167 │ [].reduce(() => void null);
        │    ^^^^^^
    168 │ [].reduceRight((a, b) => {
    169 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:168:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduceRight() iterable method should always return a value.
  
    166 │ [].reduce(function(a, b) {});
    167 │ [].reduce(() => void null);
  > 168 │ [].reduceRight((a, b) => {
        │    ^^^^^^^^^^^
    169 │     return;
    170 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:171:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduceRight() iterable method should always return a value.
  
    169 │     return;
    170 │ });
  > 171 │ [].reduceRight(function(a, b) {
        │    ^^^^^^^^^^^
    172 │     return;
    173 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:174:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduceRight() iterable method should always return a value.
  
    172 │     return;
    173 │ });
  > 174 │ [].reduceRight((a, b) => {});
        │    ^^^^^^^^^^^
    175 │ [].reduceRight(function(a, b) {});
    176 │ [].reduceRight(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:175:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduceRight() iterable method should always return a value.
  
    173 │ });
    174 │ [].reduceRight((a, b) => {});
  > 175 │ [].reduceRight(function(a, b) {});
        │    ^^^^^^^^^^^
    176 │ [].reduceRight(() => void null);
    177 │ [].sort((a, b) => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:176:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduceRight() iterable method should always return a value.
  
    174 │ [].reduceRight((a, b) => {});
    175 │ [].reduceRight(function(a, b) {});
  > 176 │ [].reduceRight(() => void null);
        │    ^^^^^^^^^^^
    177 │ [].sort((a, b) => {
    178 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:177:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to sort() iterable method should always return a value.
  
    175 │ [].reduceRight(function(a, b) {});
    176 │ [].reduceRight(() => void null);
  > 177 │ [].sort((a, b) => {
        │    ^^^^
    178 │     return;
    179 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:180:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to sort() iterable method should always return a value.
  
    178 │     return;
    179 │ });
  > 180 │ [].sort(function(a, b) {
        │    ^^^^
    181 │     return;
    182 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:183:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to sort() iterable method should always return a value.
  
    181 │     return;
    182 │ });
  > 183 │ [].sort((a, b) => {});
        │    ^^^^
    184 │ [].sort(function(a, b) {});
    185 │ [].sort(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:184:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to sort() iterable method should always return a value.
  
    182 │ });
    183 │ [].sort((a, b) => {});
  > 184 │ [].sort(function(a, b) {});
        │    ^^^^
    185 │ [].sort(() => void null);
    186 │ [].toSorted((a, b) => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:185:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to sort() iterable method should always return a value.
  
    183 │ [].sort((a, b) => {});
    184 │ [].sort(function(a, b) {});
  > 185 │ [].sort(() => void null);
        │    ^^^^
    186 │ [].toSorted((a, b) => {
    187 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:186:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to toSorted() iterable method should always return a value.
  
    184 │ [].sort(function(a, b) {});
    185 │ [].sort(() => void null);
  > 186 │ [].toSorted((a, b) => {
        │    ^^^^^^^^
    187 │     return;
    188 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:189:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to toSorted() iterable method should always return a value.
  
    187 │     return;
    188 │ });
  > 189 │ [].toSorted(function(a, b) {
        │    ^^^^^^^^
    190 │     return;
    191 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:192:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to toSorted() iterable method should always return a value.
  
    190 │     return;
    191 │ });
  > 192 │ [].toSorted((a, b) => {
        │    ^^^^^^^^
    193 │     if (a > b) {
    194 │         return;
  
  i Change this return so that it returns a value.
  
    193 │     if (a > b) {
    194 │         return;
  > 195 │     } else if (a < b) {
        │                        
  > 196 │         return;
        │         ^^^^^^
    197 │     } else {
    198 │         return 1;
  
  i Change this return so that it returns a value.
  
    191 │ });
    192 │ [].toSorted((a, b) => {
  > 193 │     if (a > b) {
        │                 
  > 194 │         return;
        │         ^^^^^^
    195 │     } else if (a < b) {
    196 │         return;
  

```

```
invalid.js:201:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to toSorted() iterable method should always return a value.
  
    199 │     }
    200 │ });
  > 201 │ [].toSorted((a, b) => {
        │    ^^^^^^^^
    202 │     if (a > b) {
    203 │         return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:208:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to toSorted() iterable method should always return a value.
  
    206 │     }
    207 │ });
  > 208 │ [].toSorted((a, b) => {
        │    ^^^^^^^^
    209 │     if (a > b) {
    210 │         throw new Error();
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:215:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to toSorted() iterable method should always return a value.
  
    213 │     }
    214 │ });
  > 215 │ [].toSorted(() => void null);
        │    ^^^^^^^^
    216 │ 
  
  i Add a return with a value to this callback.
  

```
