---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```js
[].forEach((a) => {
    return a.fn();
});
[].forEach(function(a) {
    return a.fn();
});
[].forEach((a) => {
    if (a) {
        return a.fn();
    }
});
[].forEach((a) => {
    if (a) {
        return;
    }
    return a.fn();
});
[].forEach((a) => {
    if (a) {
        return;
    }
    return a.fn();
});
[].forEach((a) => {
    if (a) {
        throw new Error();
    }
    return a.fn();
});
Array.from([], () => {});
Array.from([], function() {});
Array.from([], () => {
    return;
});
Array.from([], function() {
    return;
});
Array.from([], () => void null);
Array.from([], (a) => void a.fn());
[].every(() => {
    return;
});
[].every(function() {
    return;
});
[].every(() => {});
[].every(function() {});
[].every(() => {
    try {
        // ok
    } finally {
        // ok
    }
});
[].every(() => {
    try {
        // ok
    } catch (e) {
        // ok
    } finally {
        // ok
    }
});
[].every(() => {
    try {
        return true;
    } catch (e) {
        // ok
    } finally {
        // ok
    }
});
[].every(() => {
    try {
        return true;
    } catch (e) {
        return true;
    }
});
[].every(() => {
    try {
        return true;
    } catch (e) {
        return true;
    } finally {}
});
[].every(() => void null);
[].every((a) => void a.fn());
[].filter(() => {
    return;
});
[].filter(function() {
    return;
});
[].filter(() => {});
[].filter(function() {});
[].filter(() => void null);
[].filter((a) => void a.fn());
[].find(() => {
    return;
});
[].find(function() {
    return;
});
[].find(() => {});
[].find(function() {});
[].find(() => void null);
[].find((a) => void a.fn());
[].findIndex(() => {
    return;
});
[].findIndex(function() {
    return;
});
[].findIndex(() => {});
[].findIndex(function() {});
[].findIndex(() => void null);
[].findIndex((a) => void a.fn());
[].findLast(() => {
    return;
});
[].findLast(function() {
    return;
});
[].findLast(() => {});
[].findLast(function() {});
[].findLast(() => void null);
[].findLast((a) => void a.fn());
[].findLastIndex(() => {
    return;
});
[].findLastIndex(function() {
    return;
});
[].findLastIndex(() => {});
[].findLastIndex(function() {});
[].findLastIndex(() => void null);
[].findLastIndex((a) => void a.fn());
[].some(() => {
    return;
});
[].some(function() {
    return;
});
[].some(() => {});
[].some(function() {});
[].some(() => void null);
[].some((a) => void a.fn());
[].flatMap(() => {
    return;
});
[].flatMap(function() {
    return;
});
[].flatMap(() => {});
[].flatMap(function() {});
[].flatMap(() => void null);
[].flatMap((a) => void a.fn());
[].map(() => {
    return;
});
[].map(function() {
    return;
});
[].map(() => {});
[].map(function() {});
[].map(() => void null);
[].map((a) => void a.fn());
[].reduce((a, b) => {
    return;
});
[].reduce(function(a, b) {
    return;
});
[].reduce((a, b) => {});
[].reduce(function(a, b) {});
[].reduce(() => void null);
[].reduce((a, b) => void a.fn());
[].reduceRight((a, b) => {
    return;
});
[].reduceRight(function(a, b) {
    return;
});
[].reduceRight((a, b) => {});
[].reduceRight(function(a, b) {});
[].reduceRight(() => void null);
[].reduceRight((a, b) => void a.fn());
[].sort((a, b) => {
    return;
});
[].sort(function(a, b) {
    return;
});
[].sort((a, b) => {});
[].sort(function(a, b) {});
[].sort(() => void null);
[].sort((a, b) => void a.fn());
[].toSorted((a, b) => {
    return;
});
[].toSorted(function(a, b) {
    return;
});
[].toSorted((a, b) => {
    if (a > b) {
        return;
    } else if (a < b) {
        return;
    } else {
        return 1;
    }
});
[].toSorted((a, b) => {
    if (a > b) {
        return;
    } else if (a < b) {
        return;
    }
});
[].toSorted((a, b) => {
    if (a > b) {
        throw new Error();
    } else if (a < b) {
        return;
    }
});
[].toSorted(() => void null);
[].toSorted((a) => void a.fn());

```

# Diagnostics
```
invalid.js:1:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to forEach() iterable method should not return a value.
  
  > 1 │ [].forEach((a) => {
      │    ^^^^^^^
    2 │     return a.fn();
    3 │ });
  
  i Either remove this return or remove the returned value.
  
  > 1 │ [].forEach((a) => {
      │                    
  > 2 │     return a.fn();
      │     ^^^^^^^
    3 │ });
    4 │ [].forEach(function(a) {
  

```

```
invalid.js:4:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to forEach() iterable method should not return a value.
  
    2 │     return a.fn();
    3 │ });
  > 4 │ [].forEach(function(a) {
      │    ^^^^^^^
    5 │     return a.fn();
    6 │ });
  
  i Either remove this return or remove the returned value.
  
    2 │     return a.fn();
    3 │ });
  > 4 │ [].forEach(function(a) {
      │                         
  > 5 │     return a.fn();
      │     ^^^^^^^
    6 │ });
    7 │ [].forEach((a) => {
  

```

```
invalid.js:7:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to forEach() iterable method should not return a value.
  
    5 │     return a.fn();
    6 │ });
  > 7 │ [].forEach((a) => {
      │    ^^^^^^^
    8 │     if (a) {
    9 │         return a.fn();
  
  i Either remove this return or remove the returned value.
  
     6 │ });
     7 │ [].forEach((a) => {
   > 8 │     if (a) {
       │             
   > 9 │         return a.fn();
       │         ^^^^^^^
    10 │     }
    11 │ });
  

```

```
invalid.js:12:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to forEach() iterable method should not return a value.
  
    10 │     }
    11 │ });
  > 12 │ [].forEach((a) => {
       │    ^^^^^^^
    13 │     if (a) {
    14 │         return;
  
  i Either remove this return or remove the returned value.
  
    13 │     if (a) {
    14 │         return;
  > 15 │     }
       │      
  > 16 │     return a.fn();
       │     ^^^^^^^
    17 │ });
    18 │ [].forEach((a) => {
  

```

```
invalid.js:18:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to forEach() iterable method should not return a value.
  
    16 │     return a.fn();
    17 │ });
  > 18 │ [].forEach((a) => {
       │    ^^^^^^^
    19 │     if (a) {
    20 │         return;
  
  i Either remove this return or remove the returned value.
  
    19 │     if (a) {
    20 │         return;
  > 21 │     }
       │      
  > 22 │     return a.fn();
       │     ^^^^^^^
    23 │ });
    24 │ [].forEach((a) => {
  

```

```
invalid.js:24:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to forEach() iterable method should not return a value.
  
    22 │     return a.fn();
    23 │ });
  > 24 │ [].forEach((a) => {
       │    ^^^^^^^
    25 │     if (a) {
    26 │         throw new Error();
  
  i Either remove this return or remove the returned value.
  
    25 │     if (a) {
    26 │         throw new Error();
  > 27 │     }
       │      
  > 28 │     return a.fn();
       │     ^^^^^^^
    29 │ });
    30 │ Array.from([], () => {});
  

```

```
invalid.js:30:7 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to Array.from() method should always return a value.
  
    28 │     return a.fn();
    29 │ });
  > 30 │ Array.from([], () => {});
       │       ^^^^
    31 │ Array.from([], function() {});
    32 │ Array.from([], () => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:31:7 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to Array.from() method should always return a value.
  
    29 │ });
    30 │ Array.from([], () => {});
  > 31 │ Array.from([], function() {});
       │       ^^^^
    32 │ Array.from([], () => {
    33 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:32:7 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to Array.from() method should always return a value.
  
    30 │ Array.from([], () => {});
    31 │ Array.from([], function() {});
  > 32 │ Array.from([], () => {
       │       ^^^^
    33 │     return;
    34 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:35:7 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to Array.from() method should always return a value.
  
    33 │     return;
    34 │ });
  > 35 │ Array.from([], function() {
       │       ^^^^
    36 │     return;
    37 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:38:7 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to Array.from() method should always return a value.
  
    36 │     return;
    37 │ });
  > 38 │ Array.from([], () => void null);
       │       ^^^^
    39 │ Array.from([], (a) => void a.fn());
    40 │ [].every(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:39:7 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to Array.from() method should always return a value.
  
    37 │ });
    38 │ Array.from([], () => void null);
  > 39 │ Array.from([], (a) => void a.fn());
       │       ^^^^
    40 │ [].every(() => {
    41 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:40:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    38 │ Array.from([], () => void null);
    39 │ Array.from([], (a) => void a.fn());
  > 40 │ [].every(() => {
       │    ^^^^^
    41 │     return;
    42 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:43:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    41 │     return;
    42 │ });
  > 43 │ [].every(function() {
       │    ^^^^^
    44 │     return;
    45 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:46:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    44 │     return;
    45 │ });
  > 46 │ [].every(() => {});
       │    ^^^^^
    47 │ [].every(function() {});
    48 │ [].every(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:47:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    45 │ });
    46 │ [].every(() => {});
  > 47 │ [].every(function() {});
       │    ^^^^^
    48 │ [].every(() => {
    49 │     try {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:48:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    46 │ [].every(() => {});
    47 │ [].every(function() {});
  > 48 │ [].every(() => {
       │    ^^^^^
    49 │     try {
    50 │         // ok
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:55:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    53 │     }
    54 │ });
  > 55 │ [].every(() => {
       │    ^^^^^
    56 │     try {
    57 │         // ok
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:64:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    62 │     }
    63 │ });
  > 64 │ [].every(() => {
       │    ^^^^^
    65 │     try {
    66 │         return true;
  
  i Add missing return statements so that this callback returns a value on all execution paths.
  

```

```
invalid.js:87:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    85 │     } finally {}
    86 │ });
  > 87 │ [].every(() => void null);
       │    ^^^^^
    88 │ [].every((a) => void a.fn());
    89 │ [].filter(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:88:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to every() iterable method should always return a value.
  
    86 │ });
    87 │ [].every(() => void null);
  > 88 │ [].every((a) => void a.fn());
       │    ^^^^^
    89 │ [].filter(() => {
    90 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:89:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to filter() iterable method should always return a value.
  
    87 │ [].every(() => void null);
    88 │ [].every((a) => void a.fn());
  > 89 │ [].filter(() => {
       │    ^^^^^^
    90 │     return;
    91 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:92:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to filter() iterable method should always return a value.
  
    90 │     return;
    91 │ });
  > 92 │ [].filter(function() {
       │    ^^^^^^
    93 │     return;
    94 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:95:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to filter() iterable method should always return a value.
  
    93 │     return;
    94 │ });
  > 95 │ [].filter(() => {});
       │    ^^^^^^
    96 │ [].filter(function() {});
    97 │ [].filter(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:96:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to filter() iterable method should always return a value.
  
    94 │ });
    95 │ [].filter(() => {});
  > 96 │ [].filter(function() {});
       │    ^^^^^^
    97 │ [].filter(() => void null);
    98 │ [].filter((a) => void a.fn());
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:97:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to filter() iterable method should always return a value.
  
    95 │ [].filter(() => {});
    96 │ [].filter(function() {});
  > 97 │ [].filter(() => void null);
       │    ^^^^^^
    98 │ [].filter((a) => void a.fn());
    99 │ [].find(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:98:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to filter() iterable method should always return a value.
  
     96 │ [].filter(function() {});
     97 │ [].filter(() => void null);
   > 98 │ [].filter((a) => void a.fn());
        │    ^^^^^^
     99 │ [].find(() => {
    100 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:99:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to find() iterable method should always return a value.
  
     97 │ [].filter(() => void null);
     98 │ [].filter((a) => void a.fn());
   > 99 │ [].find(() => {
        │    ^^^^
    100 │     return;
    101 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:102:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to find() iterable method should always return a value.
  
    100 │     return;
    101 │ });
  > 102 │ [].find(function() {
        │    ^^^^
    103 │     return;
    104 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:105:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to find() iterable method should always return a value.
  
    103 │     return;
    104 │ });
  > 105 │ [].find(() => {});
        │    ^^^^
    106 │ [].find(function() {});
    107 │ [].find(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:106:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to find() iterable method should always return a value.
  
    104 │ });
    105 │ [].find(() => {});
  > 106 │ [].find(function() {});
        │    ^^^^
    107 │ [].find(() => void null);
    108 │ [].find((a) => void a.fn());
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:107:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to find() iterable method should always return a value.
  
    105 │ [].find(() => {});
    106 │ [].find(function() {});
  > 107 │ [].find(() => void null);
        │    ^^^^
    108 │ [].find((a) => void a.fn());
    109 │ [].findIndex(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:108:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to find() iterable method should always return a value.
  
    106 │ [].find(function() {});
    107 │ [].find(() => void null);
  > 108 │ [].find((a) => void a.fn());
        │    ^^^^
    109 │ [].findIndex(() => {
    110 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:109:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findIndex() iterable method should always return a value.
  
    107 │ [].find(() => void null);
    108 │ [].find((a) => void a.fn());
  > 109 │ [].findIndex(() => {
        │    ^^^^^^^^^
    110 │     return;
    111 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:112:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findIndex() iterable method should always return a value.
  
    110 │     return;
    111 │ });
  > 112 │ [].findIndex(function() {
        │    ^^^^^^^^^
    113 │     return;
    114 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:115:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findIndex() iterable method should always return a value.
  
    113 │     return;
    114 │ });
  > 115 │ [].findIndex(() => {});
        │    ^^^^^^^^^
    116 │ [].findIndex(function() {});
    117 │ [].findIndex(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:116:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findIndex() iterable method should always return a value.
  
    114 │ });
    115 │ [].findIndex(() => {});
  > 116 │ [].findIndex(function() {});
        │    ^^^^^^^^^
    117 │ [].findIndex(() => void null);
    118 │ [].findIndex((a) => void a.fn());
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:117:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findIndex() iterable method should always return a value.
  
    115 │ [].findIndex(() => {});
    116 │ [].findIndex(function() {});
  > 117 │ [].findIndex(() => void null);
        │    ^^^^^^^^^
    118 │ [].findIndex((a) => void a.fn());
    119 │ [].findLast(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:118:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findIndex() iterable method should always return a value.
  
    116 │ [].findIndex(function() {});
    117 │ [].findIndex(() => void null);
  > 118 │ [].findIndex((a) => void a.fn());
        │    ^^^^^^^^^
    119 │ [].findLast(() => {
    120 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:119:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLast() iterable method should always return a value.
  
    117 │ [].findIndex(() => void null);
    118 │ [].findIndex((a) => void a.fn());
  > 119 │ [].findLast(() => {
        │    ^^^^^^^^
    120 │     return;
    121 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:122:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLast() iterable method should always return a value.
  
    120 │     return;
    121 │ });
  > 122 │ [].findLast(function() {
        │    ^^^^^^^^
    123 │     return;
    124 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:125:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLast() iterable method should always return a value.
  
    123 │     return;
    124 │ });
  > 125 │ [].findLast(() => {});
        │    ^^^^^^^^
    126 │ [].findLast(function() {});
    127 │ [].findLast(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:126:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLast() iterable method should always return a value.
  
    124 │ });
    125 │ [].findLast(() => {});
  > 126 │ [].findLast(function() {});
        │    ^^^^^^^^
    127 │ [].findLast(() => void null);
    128 │ [].findLast((a) => void a.fn());
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:127:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLast() iterable method should always return a value.
  
    125 │ [].findLast(() => {});
    126 │ [].findLast(function() {});
  > 127 │ [].findLast(() => void null);
        │    ^^^^^^^^
    128 │ [].findLast((a) => void a.fn());
    129 │ [].findLastIndex(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:128:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLast() iterable method should always return a value.
  
    126 │ [].findLast(function() {});
    127 │ [].findLast(() => void null);
  > 128 │ [].findLast((a) => void a.fn());
        │    ^^^^^^^^
    129 │ [].findLastIndex(() => {
    130 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:129:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLastIndex() iterable method should always return a value.
  
    127 │ [].findLast(() => void null);
    128 │ [].findLast((a) => void a.fn());
  > 129 │ [].findLastIndex(() => {
        │    ^^^^^^^^^^^^^
    130 │     return;
    131 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:132:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLastIndex() iterable method should always return a value.
  
    130 │     return;
    131 │ });
  > 132 │ [].findLastIndex(function() {
        │    ^^^^^^^^^^^^^
    133 │     return;
    134 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:135:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLastIndex() iterable method should always return a value.
  
    133 │     return;
    134 │ });
  > 135 │ [].findLastIndex(() => {});
        │    ^^^^^^^^^^^^^
    136 │ [].findLastIndex(function() {});
    137 │ [].findLastIndex(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:136:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLastIndex() iterable method should always return a value.
  
    134 │ });
    135 │ [].findLastIndex(() => {});
  > 136 │ [].findLastIndex(function() {});
        │    ^^^^^^^^^^^^^
    137 │ [].findLastIndex(() => void null);
    138 │ [].findLastIndex((a) => void a.fn());
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:137:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLastIndex() iterable method should always return a value.
  
    135 │ [].findLastIndex(() => {});
    136 │ [].findLastIndex(function() {});
  > 137 │ [].findLastIndex(() => void null);
        │    ^^^^^^^^^^^^^
    138 │ [].findLastIndex((a) => void a.fn());
    139 │ [].some(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:138:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to findLastIndex() iterable method should always return a value.
  
    136 │ [].findLastIndex(function() {});
    137 │ [].findLastIndex(() => void null);
  > 138 │ [].findLastIndex((a) => void a.fn());
        │    ^^^^^^^^^^^^^
    139 │ [].some(() => {
    140 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:139:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to some() iterable method should always return a value.
  
    137 │ [].findLastIndex(() => void null);
    138 │ [].findLastIndex((a) => void a.fn());
  > 139 │ [].some(() => {
        │    ^^^^
    140 │     return;
    141 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:142:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to some() iterable method should always return a value.
  
    140 │     return;
    141 │ });
  > 142 │ [].some(function() {
        │    ^^^^
    143 │     return;
    144 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:145:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to some() iterable method should always return a value.
  
    143 │     return;
    144 │ });
  > 145 │ [].some(() => {});
        │    ^^^^
    146 │ [].some(function() {});
    147 │ [].some(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:146:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to some() iterable method should always return a value.
  
    144 │ });
    145 │ [].some(() => {});
  > 146 │ [].some(function() {});
        │    ^^^^
    147 │ [].some(() => void null);
    148 │ [].some((a) => void a.fn());
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:147:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to some() iterable method should always return a value.
  
    145 │ [].some(() => {});
    146 │ [].some(function() {});
  > 147 │ [].some(() => void null);
        │    ^^^^
    148 │ [].some((a) => void a.fn());
    149 │ [].flatMap(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:148:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to some() iterable method should always return a value.
  
    146 │ [].some(function() {});
    147 │ [].some(() => void null);
  > 148 │ [].some((a) => void a.fn());
        │    ^^^^
    149 │ [].flatMap(() => {
    150 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:149:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to flatMap() iterable method should always return a value.
  
    147 │ [].some(() => void null);
    148 │ [].some((a) => void a.fn());
  > 149 │ [].flatMap(() => {
        │    ^^^^^^^
    150 │     return;
    151 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:152:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to flatMap() iterable method should always return a value.
  
    150 │     return;
    151 │ });
  > 152 │ [].flatMap(function() {
        │    ^^^^^^^
    153 │     return;
    154 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:155:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to flatMap() iterable method should always return a value.
  
    153 │     return;
    154 │ });
  > 155 │ [].flatMap(() => {});
        │    ^^^^^^^
    156 │ [].flatMap(function() {});
    157 │ [].flatMap(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:156:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to flatMap() iterable method should always return a value.
  
    154 │ });
    155 │ [].flatMap(() => {});
  > 156 │ [].flatMap(function() {});
        │    ^^^^^^^
    157 │ [].flatMap(() => void null);
    158 │ [].flatMap((a) => void a.fn());
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:157:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to flatMap() iterable method should always return a value.
  
    155 │ [].flatMap(() => {});
    156 │ [].flatMap(function() {});
  > 157 │ [].flatMap(() => void null);
        │    ^^^^^^^
    158 │ [].flatMap((a) => void a.fn());
    159 │ [].map(() => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:158:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to flatMap() iterable method should always return a value.
  
    156 │ [].flatMap(function() {});
    157 │ [].flatMap(() => void null);
  > 158 │ [].flatMap((a) => void a.fn());
        │    ^^^^^^^
    159 │ [].map(() => {
    160 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:159:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to map() iterable method should always return a value.
  
    157 │ [].flatMap(() => void null);
    158 │ [].flatMap((a) => void a.fn());
  > 159 │ [].map(() => {
        │    ^^^
    160 │     return;
    161 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:162:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to map() iterable method should always return a value.
  
    160 │     return;
    161 │ });
  > 162 │ [].map(function() {
        │    ^^^
    163 │     return;
    164 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:165:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to map() iterable method should always return a value.
  
    163 │     return;
    164 │ });
  > 165 │ [].map(() => {});
        │    ^^^
    166 │ [].map(function() {});
    167 │ [].map(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:166:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to map() iterable method should always return a value.
  
    164 │ });
    165 │ [].map(() => {});
  > 166 │ [].map(function() {});
        │    ^^^
    167 │ [].map(() => void null);
    168 │ [].map((a) => void a.fn());
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:167:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to map() iterable method should always return a value.
  
    165 │ [].map(() => {});
    166 │ [].map(function() {});
  > 167 │ [].map(() => void null);
        │    ^^^
    168 │ [].map((a) => void a.fn());
    169 │ [].reduce((a, b) => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:168:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to map() iterable method should always return a value.
  
    166 │ [].map(function() {});
    167 │ [].map(() => void null);
  > 168 │ [].map((a) => void a.fn());
        │    ^^^
    169 │ [].reduce((a, b) => {
    170 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:169:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduce() iterable method should always return a value.
  
    167 │ [].map(() => void null);
    168 │ [].map((a) => void a.fn());
  > 169 │ [].reduce((a, b) => {
        │    ^^^^^^
    170 │     return;
    171 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:172:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduce() iterable method should always return a value.
  
    170 │     return;
    171 │ });
  > 172 │ [].reduce(function(a, b) {
        │    ^^^^^^
    173 │     return;
    174 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:175:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduce() iterable method should always return a value.
  
    173 │     return;
    174 │ });
  > 175 │ [].reduce((a, b) => {});
        │    ^^^^^^
    176 │ [].reduce(function(a, b) {});
    177 │ [].reduce(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:176:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduce() iterable method should always return a value.
  
    174 │ });
    175 │ [].reduce((a, b) => {});
  > 176 │ [].reduce(function(a, b) {});
        │    ^^^^^^
    177 │ [].reduce(() => void null);
    178 │ [].reduce((a, b) => void a.fn());
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:177:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduce() iterable method should always return a value.
  
    175 │ [].reduce((a, b) => {});
    176 │ [].reduce(function(a, b) {});
  > 177 │ [].reduce(() => void null);
        │    ^^^^^^
    178 │ [].reduce((a, b) => void a.fn());
    179 │ [].reduceRight((a, b) => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:178:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduce() iterable method should always return a value.
  
    176 │ [].reduce(function(a, b) {});
    177 │ [].reduce(() => void null);
  > 178 │ [].reduce((a, b) => void a.fn());
        │    ^^^^^^
    179 │ [].reduceRight((a, b) => {
    180 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:179:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduceRight() iterable method should always return a value.
  
    177 │ [].reduce(() => void null);
    178 │ [].reduce((a, b) => void a.fn());
  > 179 │ [].reduceRight((a, b) => {
        │    ^^^^^^^^^^^
    180 │     return;
    181 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:182:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduceRight() iterable method should always return a value.
  
    180 │     return;
    181 │ });
  > 182 │ [].reduceRight(function(a, b) {
        │    ^^^^^^^^^^^
    183 │     return;
    184 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:185:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduceRight() iterable method should always return a value.
  
    183 │     return;
    184 │ });
  > 185 │ [].reduceRight((a, b) => {});
        │    ^^^^^^^^^^^
    186 │ [].reduceRight(function(a, b) {});
    187 │ [].reduceRight(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:186:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduceRight() iterable method should always return a value.
  
    184 │ });
    185 │ [].reduceRight((a, b) => {});
  > 186 │ [].reduceRight(function(a, b) {});
        │    ^^^^^^^^^^^
    187 │ [].reduceRight(() => void null);
    188 │ [].reduceRight((a, b) => void a.fn());
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:187:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduceRight() iterable method should always return a value.
  
    185 │ [].reduceRight((a, b) => {});
    186 │ [].reduceRight(function(a, b) {});
  > 187 │ [].reduceRight(() => void null);
        │    ^^^^^^^^^^^
    188 │ [].reduceRight((a, b) => void a.fn());
    189 │ [].sort((a, b) => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:188:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to reduceRight() iterable method should always return a value.
  
    186 │ [].reduceRight(function(a, b) {});
    187 │ [].reduceRight(() => void null);
  > 188 │ [].reduceRight((a, b) => void a.fn());
        │    ^^^^^^^^^^^
    189 │ [].sort((a, b) => {
    190 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:189:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to sort() iterable method should always return a value.
  
    187 │ [].reduceRight(() => void null);
    188 │ [].reduceRight((a, b) => void a.fn());
  > 189 │ [].sort((a, b) => {
        │    ^^^^
    190 │     return;
    191 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:192:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to sort() iterable method should always return a value.
  
    190 │     return;
    191 │ });
  > 192 │ [].sort(function(a, b) {
        │    ^^^^
    193 │     return;
    194 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:195:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to sort() iterable method should always return a value.
  
    193 │     return;
    194 │ });
  > 195 │ [].sort((a, b) => {});
        │    ^^^^
    196 │ [].sort(function(a, b) {});
    197 │ [].sort(() => void null);
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:196:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to sort() iterable method should always return a value.
  
    194 │ });
    195 │ [].sort((a, b) => {});
  > 196 │ [].sort(function(a, b) {});
        │    ^^^^
    197 │ [].sort(() => void null);
    198 │ [].sort((a, b) => void a.fn());
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:197:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to sort() iterable method should always return a value.
  
    195 │ [].sort((a, b) => {});
    196 │ [].sort(function(a, b) {});
  > 197 │ [].sort(() => void null);
        │    ^^^^
    198 │ [].sort((a, b) => void a.fn());
    199 │ [].toSorted((a, b) => {
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:198:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to sort() iterable method should always return a value.
  
    196 │ [].sort(function(a, b) {});
    197 │ [].sort(() => void null);
  > 198 │ [].sort((a, b) => void a.fn());
        │    ^^^^
    199 │ [].toSorted((a, b) => {
    200 │     return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:199:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to toSorted() iterable method should always return a value.
  
    197 │ [].sort(() => void null);
    198 │ [].sort((a, b) => void a.fn());
  > 199 │ [].toSorted((a, b) => {
        │    ^^^^^^^^
    200 │     return;
    201 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:202:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to toSorted() iterable method should always return a value.
  
    200 │     return;
    201 │ });
  > 202 │ [].toSorted(function(a, b) {
        │    ^^^^^^^^
    203 │     return;
    204 │ });
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:205:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to toSorted() iterable method should always return a value.
  
    203 │     return;
    204 │ });
  > 205 │ [].toSorted((a, b) => {
        │    ^^^^^^^^
    206 │     if (a > b) {
    207 │         return;
  
  i Change this return so that it returns a value.
  
    206 │     if (a > b) {
    207 │         return;
  > 208 │     } else if (a < b) {
        │                        
  > 209 │         return;
        │         ^^^^^^
    210 │     } else {
    211 │         return 1;
  
  i Change this return so that it returns a value.
  
    204 │ });
    205 │ [].toSorted((a, b) => {
  > 206 │     if (a > b) {
        │                 
  > 207 │         return;
        │         ^^^^^^
    208 │     } else if (a < b) {
    209 │         return;
  

```

```
invalid.js:214:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to toSorted() iterable method should always return a value.
  
    212 │     }
    213 │ });
  > 214 │ [].toSorted((a, b) => {
        │    ^^^^^^^^
    215 │     if (a > b) {
    216 │         return;
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:221:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to toSorted() iterable method should always return a value.
  
    219 │     }
    220 │ });
  > 221 │ [].toSorted((a, b) => {
        │    ^^^^^^^^
    222 │     if (a > b) {
    223 │         throw new Error();
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:228:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to toSorted() iterable method should always return a value.
  
    226 │     }
    227 │ });
  > 228 │ [].toSorted(() => void null);
        │    ^^^^^^^^
    229 │ [].toSorted((a) => void a.fn());
    230 │ 
  
  i Add a return with a value to this callback.
  

```

```
invalid.js:229:4 lint/suspicious/useIterableCallbackReturn ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This callback passed to toSorted() iterable method should always return a value.
  
    227 │ });
    228 │ [].toSorted(() => void null);
  > 229 │ [].toSorted((a) => void a.fn());
        │    ^^^^^^^^
    230 │ 
  
  i Add a return with a value to this callback.
  

```
