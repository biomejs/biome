---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.jsonc
---
# Input
```js
delete a.b;
```

# Diagnostics
```
invalid.jsonc:1:1 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
  > 1 │ delete a.b;
      │ ^^^^^^^^^^
  
  i Unsafe fix: Use an undefined assignment instead.
  
  - delete·a.b;
  + a.b·=·undefined;
  

```

# Input
```js
delete a?.b;
```

# Diagnostics
```
invalid.jsonc:1:1 lint/performance/noDelete ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
  > 1 │ delete a?.b;
      │ ^^^^^^^^^^^
  

```

# Input
```js
delete a['b'];
```

# Diagnostics
```
invalid.jsonc:1:1 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
  > 1 │ delete a['b'];
      │ ^^^^^^^^^^^^^
  
  i Unsafe fix: Use an undefined assignment instead.
  
  - delete·a['b'];
  + a['b']·=·undefined;
  

```

# Input
```js
delete a?.['b'];
```

# Diagnostics
```
invalid.jsonc:1:1 lint/performance/noDelete ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
  > 1 │ delete a?.['b'];
      │ ^^^^^^^^^^^^^^^
  

```

# Input
```js
delete a.b.c;
```

# Diagnostics
```
invalid.jsonc:1:1 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
  > 1 │ delete a.b.c;
      │ ^^^^^^^^^^^^
  
  i Unsafe fix: Use an undefined assignment instead.
  
  - delete·a.b.c;
  + a.b.c·=·undefined;
  

```

# Input
```js
delete a.b?.c;
```

# Diagnostics
```
invalid.jsonc:1:1 lint/performance/noDelete ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
  > 1 │ delete a.b?.c;
      │ ^^^^^^^^^^^^^
  

```

# Input
```js
delete a.b['c'];
```

# Diagnostics
```
invalid.jsonc:1:1 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
  > 1 │ delete a.b['c'];
      │ ^^^^^^^^^^^^^^^
  
  i Unsafe fix: Use an undefined assignment instead.
  
  - delete·a.b['c'];
  + a.b['c']·=·undefined;
  

```

# Input
```js
delete a.b?.['c'];
```

# Diagnostics
```
invalid.jsonc:1:1 lint/performance/noDelete ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
  > 1 │ delete a.b?.['c'];
      │ ^^^^^^^^^^^^^^^^^
  

```

# Input
```js
delete a?.b.c;
```

# Diagnostics
```
invalid.jsonc:1:1 lint/performance/noDelete ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
  > 1 │ delete a?.b.c;
      │ ^^^^^^^^^^^^^
  

```

# Input
```js
delete a?.b?.c;
```

# Diagnostics
```
invalid.jsonc:1:1 lint/performance/noDelete ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
  > 1 │ delete a?.b?.c;
      │ ^^^^^^^^^^^^^^
  

```

# Input
```js
delete a?.b['c'];
```

# Diagnostics
```
invalid.jsonc:1:1 lint/performance/noDelete ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
  > 1 │ delete a?.b['c'];
      │ ^^^^^^^^^^^^^^^^
  

```

# Input
```js
delete a?.b?.['c'];
```

# Diagnostics
```
invalid.jsonc:1:1 lint/performance/noDelete ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
  > 1 │ delete a?.b?.['c'];
      │ ^^^^^^^^^^^^^^^^^^
  

```


