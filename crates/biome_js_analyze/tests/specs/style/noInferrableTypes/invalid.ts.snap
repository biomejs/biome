---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.ts
---
# Input
```ts
// const contexts
const x/*before*/: /*inside*/ 1 /*after*/ = (1);

const x: 1n = 1n;
const x: -1n = -1n;
const x: false = false;
const x: false = !true;
const x: false = !1;
const x: true = true;
const x: true = !false;
const x: true = !0;
const x: 1 = +1;
const x: -1 = -1;
const x: 1e-5 = 1e-5;
const x: RegExp = /a/;
const x: "str" = "str";
const x: "str" = `str`; // constant template string
const x: "str2" = `str${f()}`;

class X {
	readonly x: 1 = 1;
}

class X {
	constructor(readonly x: 1 = 1) {}
}

// non-const contexts
let x /*before*/: /*inside*/ number /*after*/ = (1);

let x: bigint = 1n;
let x: bigint = -1n;
let x: boolean = false;
let x: boolean = true;
let x: boolean = !false;
let x: boolean = !true;
let x: number = +1;
let x: number = -1;
let x: number = 1e-5;
let x: RegExp = /a/;
let x: string = "str";
let x: string = `str`;
let x: string = `str${f()}`;
let x: number = +"";
let x: boolean = !"";

function f(x: number = 1) {}

class X {
	x: number = 1;
}

class X {
	constructor(protected x: number = 1) {}
}

```

# Diagnostics
```
invalid.ts:2:18 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    1 │ // const contexts
  > 2 │ const x/*before*/: /*inside*/ 1 /*after*/ = (1);
      │                  ^^^^^^^^^^^^^^
    3 │ 
    4 │ const x: 1n = 1n;
  
  i Safe fix: Remove the type annotation.
  
     1  1 │   // const contexts
     2    │ - const·x/*before*/:·/*inside*/·1·/*after*/·=·(1);
        2 │ + const·x/*before*/·/*after*/·=·(1);
     3  3 │   
     4  4 │   const x: 1n = 1n;
  

```

```
invalid.ts:4:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    2 │ const x/*before*/: /*inside*/ 1 /*after*/ = (1);
    3 │ 
  > 4 │ const x: 1n = 1n;
      │        ^^^^
    5 │ const x: -1n = -1n;
    6 │ const x: false = false;
  
  i Safe fix: Remove the type annotation.
  
     2  2 │   const x/*before*/: /*inside*/ 1 /*after*/ = (1);
     3  3 │   
     4    │ - const·x:·1n·=·1n;
        4 │ + const·x·=·1n;
     5  5 │   const x: -1n = -1n;
     6  6 │   const x: false = false;
  

```

```
invalid.ts:5:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    4 │ const x: 1n = 1n;
  > 5 │ const x: -1n = -1n;
      │        ^^^^^
    6 │ const x: false = false;
    7 │ const x: false = !true;
  
  i Safe fix: Remove the type annotation.
  
     3  3 │   
     4  4 │   const x: 1n = 1n;
     5    │ - const·x:·-1n·=·-1n;
        5 │ + const·x·=·-1n;
     6  6 │   const x: false = false;
     7  7 │   const x: false = !true;
  

```

```
invalid.ts:6:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    4 │ const x: 1n = 1n;
    5 │ const x: -1n = -1n;
  > 6 │ const x: false = false;
      │        ^^^^^^^
    7 │ const x: false = !true;
    8 │ const x: false = !1;
  
  i Safe fix: Remove the type annotation.
  
     4  4 │   const x: 1n = 1n;
     5  5 │   const x: -1n = -1n;
     6    │ - const·x:·false·=·false;
        6 │ + const·x·=·false;
     7  7 │   const x: false = !true;
     8  8 │   const x: false = !1;
  

```

```
invalid.ts:7:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    5 │ const x: -1n = -1n;
    6 │ const x: false = false;
  > 7 │ const x: false = !true;
      │        ^^^^^^^
    8 │ const x: false = !1;
    9 │ const x: true = true;
  
  i Safe fix: Remove the type annotation.
  
     5  5 │   const x: -1n = -1n;
     6  6 │   const x: false = false;
     7    │ - const·x:·false·=·!true;
        7 │ + const·x·=·!true;
     8  8 │   const x: false = !1;
     9  9 │   const x: true = true;
  

```

```
invalid.ts:8:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
     6 │ const x: false = false;
     7 │ const x: false = !true;
   > 8 │ const x: false = !1;
       │        ^^^^^^^
     9 │ const x: true = true;
    10 │ const x: true = !false;
  
  i Safe fix: Remove the type annotation.
  
     6  6 │   const x: false = false;
     7  7 │   const x: false = !true;
     8    │ - const·x:·false·=·!1;
        8 │ + const·x·=·!1;
     9  9 │   const x: true = true;
    10 10 │   const x: true = !false;
  

```

```
invalid.ts:9:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
     7 │ const x: false = !true;
     8 │ const x: false = !1;
   > 9 │ const x: true = true;
       │        ^^^^^^
    10 │ const x: true = !false;
    11 │ const x: true = !0;
  
  i Safe fix: Remove the type annotation.
  
     7  7 │   const x: false = !true;
     8  8 │   const x: false = !1;
     9    │ - const·x:·true·=·true;
        9 │ + const·x·=·true;
    10 10 │   const x: true = !false;
    11 11 │   const x: true = !0;
  

```

```
invalid.ts:10:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
     8 │ const x: false = !1;
     9 │ const x: true = true;
  > 10 │ const x: true = !false;
       │        ^^^^^^
    11 │ const x: true = !0;
    12 │ const x: 1 = +1;
  
  i Safe fix: Remove the type annotation.
  
     8  8 │   const x: false = !1;
     9  9 │   const x: true = true;
    10    │ - const·x:·true·=·!false;
       10 │ + const·x·=·!false;
    11 11 │   const x: true = !0;
    12 12 │   const x: 1 = +1;
  

```

```
invalid.ts:11:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
     9 │ const x: true = true;
    10 │ const x: true = !false;
  > 11 │ const x: true = !0;
       │        ^^^^^^
    12 │ const x: 1 = +1;
    13 │ const x: -1 = -1;
  
  i Safe fix: Remove the type annotation.
  
     9  9 │   const x: true = true;
    10 10 │   const x: true = !false;
    11    │ - const·x:·true·=·!0;
       11 │ + const·x·=·!0;
    12 12 │   const x: 1 = +1;
    13 13 │   const x: -1 = -1;
  

```

```
invalid.ts:12:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    10 │ const x: true = !false;
    11 │ const x: true = !0;
  > 12 │ const x: 1 = +1;
       │        ^^^
    13 │ const x: -1 = -1;
    14 │ const x: 1e-5 = 1e-5;
  
  i Safe fix: Remove the type annotation.
  
    10 10 │   const x: true = !false;
    11 11 │   const x: true = !0;
    12    │ - const·x:·1·=·+1;
       12 │ + const·x·=·+1;
    13 13 │   const x: -1 = -1;
    14 14 │   const x: 1e-5 = 1e-5;
  

```

```
invalid.ts:13:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    11 │ const x: true = !0;
    12 │ const x: 1 = +1;
  > 13 │ const x: -1 = -1;
       │        ^^^^
    14 │ const x: 1e-5 = 1e-5;
    15 │ const x: RegExp = /a/;
  
  i Safe fix: Remove the type annotation.
  
    11 11 │   const x: true = !0;
    12 12 │   const x: 1 = +1;
    13    │ - const·x:·-1·=·-1;
       13 │ + const·x·=·-1;
    14 14 │   const x: 1e-5 = 1e-5;
    15 15 │   const x: RegExp = /a/;
  

```

```
invalid.ts:14:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    12 │ const x: 1 = +1;
    13 │ const x: -1 = -1;
  > 14 │ const x: 1e-5 = 1e-5;
       │        ^^^^^^
    15 │ const x: RegExp = /a/;
    16 │ const x: "str" = "str";
  
  i Safe fix: Remove the type annotation.
  
    12 12 │   const x: 1 = +1;
    13 13 │   const x: -1 = -1;
    14    │ - const·x:·1e-5·=·1e-5;
       14 │ + const·x·=·1e-5;
    15 15 │   const x: RegExp = /a/;
    16 16 │   const x: "str" = "str";
  

```

```
invalid.ts:16:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    14 │ const x: 1e-5 = 1e-5;
    15 │ const x: RegExp = /a/;
  > 16 │ const x: "str" = "str";
       │        ^^^^^^^
    17 │ const x: "str" = `str`; // constant template string
    18 │ const x: "str2" = `str${f()}`;
  
  i Safe fix: Remove the type annotation.
  
    14 14 │   const x: 1e-5 = 1e-5;
    15 15 │   const x: RegExp = /a/;
    16    │ - const·x:·"str"·=·"str";
       16 │ + const·x·=·"str";
    17 17 │   const x: "str" = `str`; // constant template string
    18 18 │   const x: "str2" = `str${f()}`;
  

```

```
invalid.ts:17:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    15 │ const x: RegExp = /a/;
    16 │ const x: "str" = "str";
  > 17 │ const x: "str" = `str`; // constant template string
       │        ^^^^^^^
    18 │ const x: "str2" = `str${f()}`;
    19 │ 
  
  i Safe fix: Remove the type annotation.
  
    15 15 │   const x: RegExp = /a/;
    16 16 │   const x: "str" = "str";
    17    │ - const·x:·"str"·=·`str`;·//·constant·template·string
       17 │ + const·x·=·`str`;·//·constant·template·string
    18 18 │   const x: "str2" = `str${f()}`;
    19 19 │   
  

```

```
invalid.ts:18:8 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    16 │ const x: "str" = "str";
    17 │ const x: "str" = `str`; // constant template string
  > 18 │ const x: "str2" = `str${f()}`;
       │        ^^^^^^^^
    19 │ 
    20 │ class X {
  
  i Safe fix: Remove the type annotation.
  
    16 16 │   const x: "str" = "str";
    17 17 │   const x: "str" = `str`; // constant template string
    18    │ - const·x:·"str2"·=·`str${f()}`;
       18 │ + const·x·=·`str${f()}`;
    19 19 │   
    20 20 │   class X {
  

```

```
invalid.ts:21:12 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    20 │ class X {
  > 21 │ 	readonly x: 1 = 1;
       │ 	          ^^^
    22 │ }
    23 │ 
  
  i Safe fix: Remove the type annotation.
  
    19 19 │   
    20 20 │   class X {
    21    │ - → readonly·x:·1·=·1;
       21 │ + → readonly·x·=·1;
    22 22 │   }
    23 23 │   
  

```

```
invalid.ts:25:24 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    24 │ class X {
  > 25 │ 	constructor(readonly x: 1 = 1) {}
       │ 	                      ^^^
    26 │ }
    27 │ 
  
  i Safe fix: Remove the type annotation.
  
    23 23 │   
    24 24 │   class X {
    25    │ - → constructor(readonly·x:·1·=·1)·{}
       25 │ + → constructor(readonly·x·=·1)·{}
    26 26 │   }
    27 27 │   
  

```

```
invalid.ts:29:17 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    28 │ // non-const contexts
  > 29 │ let x /*before*/: /*inside*/ number /*after*/ = (1);
       │                 ^^^^^^^^^^^^^^^^^^^
    30 │ 
    31 │ let x: bigint = 1n;
  
  i Safe fix: Remove the type annotation.
  
    27 27 │   
    28 28 │   // non-const contexts
    29    │ - let·x·/*before*/:·/*inside*/·number·/*after*/·=·(1);
       29 │ + let·x·/*before*/·/*after*/·=·(1);
    30 30 │   
    31 31 │   let x: bigint = 1n;
  

```

```
invalid.ts:31:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    29 │ let x /*before*/: /*inside*/ number /*after*/ = (1);
    30 │ 
  > 31 │ let x: bigint = 1n;
       │      ^^^^^^^^
    32 │ let x: bigint = -1n;
    33 │ let x: boolean = false;
  
  i Safe fix: Remove the type annotation.
  
    29 29 │   let x /*before*/: /*inside*/ number /*after*/ = (1);
    30 30 │   
    31    │ - let·x:·bigint·=·1n;
       31 │ + let·x·=·1n;
    32 32 │   let x: bigint = -1n;
    33 33 │   let x: boolean = false;
  

```

```
invalid.ts:32:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    31 │ let x: bigint = 1n;
  > 32 │ let x: bigint = -1n;
       │      ^^^^^^^^
    33 │ let x: boolean = false;
    34 │ let x: boolean = true;
  
  i Safe fix: Remove the type annotation.
  
    30 30 │   
    31 31 │   let x: bigint = 1n;
    32    │ - let·x:·bigint·=·-1n;
       32 │ + let·x·=·-1n;
    33 33 │   let x: boolean = false;
    34 34 │   let x: boolean = true;
  

```

```
invalid.ts:33:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    31 │ let x: bigint = 1n;
    32 │ let x: bigint = -1n;
  > 33 │ let x: boolean = false;
       │      ^^^^^^^^^
    34 │ let x: boolean = true;
    35 │ let x: boolean = !false;
  
  i Safe fix: Remove the type annotation.
  
    31 31 │   let x: bigint = 1n;
    32 32 │   let x: bigint = -1n;
    33    │ - let·x:·boolean·=·false;
       33 │ + let·x·=·false;
    34 34 │   let x: boolean = true;
    35 35 │   let x: boolean = !false;
  

```

```
invalid.ts:34:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    32 │ let x: bigint = -1n;
    33 │ let x: boolean = false;
  > 34 │ let x: boolean = true;
       │      ^^^^^^^^^
    35 │ let x: boolean = !false;
    36 │ let x: boolean = !true;
  
  i Safe fix: Remove the type annotation.
  
    32 32 │   let x: bigint = -1n;
    33 33 │   let x: boolean = false;
    34    │ - let·x:·boolean·=·true;
       34 │ + let·x·=·true;
    35 35 │   let x: boolean = !false;
    36 36 │   let x: boolean = !true;
  

```

```
invalid.ts:35:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    33 │ let x: boolean = false;
    34 │ let x: boolean = true;
  > 35 │ let x: boolean = !false;
       │      ^^^^^^^^^
    36 │ let x: boolean = !true;
    37 │ let x: number = +1;
  
  i Safe fix: Remove the type annotation.
  
    33 33 │   let x: boolean = false;
    34 34 │   let x: boolean = true;
    35    │ - let·x:·boolean·=·!false;
       35 │ + let·x·=·!false;
    36 36 │   let x: boolean = !true;
    37 37 │   let x: number = +1;
  

```

```
invalid.ts:36:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    34 │ let x: boolean = true;
    35 │ let x: boolean = !false;
  > 36 │ let x: boolean = !true;
       │      ^^^^^^^^^
    37 │ let x: number = +1;
    38 │ let x: number = -1;
  
  i Safe fix: Remove the type annotation.
  
    34 34 │   let x: boolean = true;
    35 35 │   let x: boolean = !false;
    36    │ - let·x:·boolean·=·!true;
       36 │ + let·x·=·!true;
    37 37 │   let x: number = +1;
    38 38 │   let x: number = -1;
  

```

```
invalid.ts:37:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    35 │ let x: boolean = !false;
    36 │ let x: boolean = !true;
  > 37 │ let x: number = +1;
       │      ^^^^^^^^
    38 │ let x: number = -1;
    39 │ let x: number = 1e-5;
  
  i Safe fix: Remove the type annotation.
  
    35 35 │   let x: boolean = !false;
    36 36 │   let x: boolean = !true;
    37    │ - let·x:·number·=·+1;
       37 │ + let·x·=·+1;
    38 38 │   let x: number = -1;
    39 39 │   let x: number = 1e-5;
  

```

```
invalid.ts:38:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    36 │ let x: boolean = !true;
    37 │ let x: number = +1;
  > 38 │ let x: number = -1;
       │      ^^^^^^^^
    39 │ let x: number = 1e-5;
    40 │ let x: RegExp = /a/;
  
  i Safe fix: Remove the type annotation.
  
    36 36 │   let x: boolean = !true;
    37 37 │   let x: number = +1;
    38    │ - let·x:·number·=·-1;
       38 │ + let·x·=·-1;
    39 39 │   let x: number = 1e-5;
    40 40 │   let x: RegExp = /a/;
  

```

```
invalid.ts:39:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    37 │ let x: number = +1;
    38 │ let x: number = -1;
  > 39 │ let x: number = 1e-5;
       │      ^^^^^^^^
    40 │ let x: RegExp = /a/;
    41 │ let x: string = "str";
  
  i Safe fix: Remove the type annotation.
  
    37 37 │   let x: number = +1;
    38 38 │   let x: number = -1;
    39    │ - let·x:·number·=·1e-5;
       39 │ + let·x·=·1e-5;
    40 40 │   let x: RegExp = /a/;
    41 41 │   let x: string = "str";
  

```

```
invalid.ts:41:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    39 │ let x: number = 1e-5;
    40 │ let x: RegExp = /a/;
  > 41 │ let x: string = "str";
       │      ^^^^^^^^
    42 │ let x: string = `str`;
    43 │ let x: string = `str${f()}`;
  
  i Safe fix: Remove the type annotation.
  
    39 39 │   let x: number = 1e-5;
    40 40 │   let x: RegExp = /a/;
    41    │ - let·x:·string·=·"str";
       41 │ + let·x·=·"str";
    42 42 │   let x: string = `str`;
    43 43 │   let x: string = `str${f()}`;
  

```

```
invalid.ts:42:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    40 │ let x: RegExp = /a/;
    41 │ let x: string = "str";
  > 42 │ let x: string = `str`;
       │      ^^^^^^^^
    43 │ let x: string = `str${f()}`;
    44 │ let x: number = +"";
  
  i Safe fix: Remove the type annotation.
  
    40 40 │   let x: RegExp = /a/;
    41 41 │   let x: string = "str";
    42    │ - let·x:·string·=·`str`;
       42 │ + let·x·=·`str`;
    43 43 │   let x: string = `str${f()}`;
    44 44 │   let x: number = +"";
  

```

```
invalid.ts:43:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    41 │ let x: string = "str";
    42 │ let x: string = `str`;
  > 43 │ let x: string = `str${f()}`;
       │      ^^^^^^^^
    44 │ let x: number = +"";
    45 │ let x: boolean = !"";
  
  i Safe fix: Remove the type annotation.
  
    41 41 │   let x: string = "str";
    42 42 │   let x: string = `str`;
    43    │ - let·x:·string·=·`str${f()}`;
       43 │ + let·x·=·`str${f()}`;
    44 44 │   let x: number = +"";
    45 45 │   let x: boolean = !"";
  

```

```
invalid.ts:44:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    42 │ let x: string = `str`;
    43 │ let x: string = `str${f()}`;
  > 44 │ let x: number = +"";
       │      ^^^^^^^^
    45 │ let x: boolean = !"";
    46 │ 
  
  i Safe fix: Remove the type annotation.
  
    42 42 │   let x: string = `str`;
    43 43 │   let x: string = `str${f()}`;
    44    │ - let·x:·number·=·+"";
       44 │ + let·x·=·+"";
    45 45 │   let x: boolean = !"";
    46 46 │   
  

```

```
invalid.ts:45:6 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    43 │ let x: string = `str${f()}`;
    44 │ let x: number = +"";
  > 45 │ let x: boolean = !"";
       │      ^^^^^^^^^
    46 │ 
    47 │ function f(x: number = 1) {}
  
  i Safe fix: Remove the type annotation.
  
    43 43 │   let x: string = `str${f()}`;
    44 44 │   let x: number = +"";
    45    │ - let·x:·boolean·=·!"";
       45 │ + let·x·=·!"";
    46 46 │   
    47 47 │   function f(x: number = 1) {}
  

```

```
invalid.ts:47:13 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    45 │ let x: boolean = !"";
    46 │ 
  > 47 │ function f(x: number = 1) {}
       │             ^^^^^^^^
    48 │ 
    49 │ class X {
  
  i Safe fix: Remove the type annotation.
  
    45 45 │   let x: boolean = !"";
    46 46 │   
    47    │ - function·f(x:·number·=·1)·{}
       47 │ + function·f(x·=·1)·{}
    48 48 │   
    49 49 │   class X {
  

```

```
invalid.ts:50:3 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    49 │ class X {
  > 50 │ 	x: number = 1;
       │ 	 ^^^^^^^^
    51 │ }
    52 │ 
  
  i Safe fix: Remove the type annotation.
  
    48 48 │   
    49 49 │   class X {
    50    │ - → x:·number·=·1;
       50 │ + → x·=·1;
    51 51 │   }
    52 52 │   
  

```

```
invalid.ts:54:25 lint/style/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    53 │ class X {
  > 54 │ 	constructor(protected x: number = 1) {}
       │ 	                       ^^^^^^^^
    55 │ }
    56 │ 
  
  i Safe fix: Remove the type annotation.
  
    52 52 │   
    53 53 │   class X {
    54    │ - → constructor(protected·x:·number·=·1)·{}
       54 │ + → constructor(protected·x·=·1)·{}
    55 55 │   }
    56 56 │   
  

```
