---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.ts
---
# Input
```ts
import { type T1, V1 } from "./mod.ts";
export { T1, V1 };

import type { T2, T3 } from "./mod.ts";
export { T2, T3 };

import type T4 from "./mod.ts";
export { T4 };

import type * as ns from "./mod.ts";
export { ns };

interface Interface {}
type TypeAlias = {}
enum Enum {}
function func() {}
class Class {}
export { Interface, TypeAlias, Enum, func as f, Class };

export /*0*/ { /*1*/ type /*2*/ func /*3*/, /*4*/ type Class as C /*5*/ } /*6*/;

export {}

```

# Diagnostics
```
invalid.ts:2:10 lint/style/useExportType  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Several exports are only types and should thus use export type.
  
    1 │ import { type T1, V1 } from "./mod.ts";
  > 2 │ export { T1, V1 };
      │          ^^
    3 │ 
    4 │ import type { T2, T3 } from "./mod.ts";
  
  i Using export type allows transpilers to safely drop exports of types without looking for their definition.
  
  i Safe fix: Use inline type exports.
  
    2 │ export·{·type·T1,·V1·};
      │          +++++         

```

```
invalid.ts:5:8 lint/style/useExportType  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! All exports are only types and should thus use export type.
  
    4 │ import type { T2, T3 } from "./mod.ts";
  > 5 │ export { T2, T3 };
      │        ^^^^^^^^^^^
    6 │ 
    7 │ import type T4 from "./mod.ts";
  
  i Using export type allows transpilers to safely drop exports of types without looking for their definition.
  
  i Safe fix: Use a grouped export type.
  
    5 │ export·type·{·T2,·T3·};
      │        +++++           

```

```
invalid.ts:8:8 lint/style/useExportType  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! All exports are only types and should thus use export type.
  
     7 │ import type T4 from "./mod.ts";
   > 8 │ export { T4 };
       │        ^^^^^^^
     9 │ 
    10 │ import type * as ns from "./mod.ts";
  
  i Using export type allows transpilers to safely drop exports of types without looking for their definition.
  
  i Safe fix: Use a grouped export type.
  
    8 │ export·type·{·T4·};
      │        +++++       

```

```
invalid.ts:11:8 lint/style/useExportType  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! All exports are only types and should thus use export type.
  
    10 │ import type * as ns from "./mod.ts";
  > 11 │ export { ns };
       │        ^^^^^^^
    12 │ 
    13 │ interface Interface {}
  
  i Using export type allows transpilers to safely drop exports of types without looking for their definition.
  
  i Safe fix: Use a grouped export type.
  
    11 │ export·type·{·ns·};
       │        +++++       

```

```
invalid.ts:18:10 lint/style/useExportType  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Several exports are only types and should thus use export type.
  
    16 │ function func() {}
    17 │ class Class {}
  > 18 │ export { Interface, TypeAlias, Enum, func as f, Class };
       │          ^^^^^^^^^^^^^^^^^^^^
    19 │ 
    20 │ export /*0*/ { /*1*/ type /*2*/ func /*3*/, /*4*/ type Class as C /*5*/ } /*6*/;
  
  i Using export type allows transpilers to safely drop exports of types without looking for their definition.
  
  i Safe fix: Use inline type exports.
  
    18 │ export·{·type·Interface,·type·TypeAlias,·Enum,·func·as·f,·Class·};
       │          +++++           +++++                                    

```

```
invalid.ts:20:14 lint/style/useExportType  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! All exports are only types and should thus use export type.
  
    18 │ export { Interface, TypeAlias, Enum, func as f, Class };
    19 │ 
  > 20 │ export /*0*/ { /*1*/ type /*2*/ func /*3*/, /*4*/ type Class as C /*5*/ } /*6*/;
       │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    21 │ 
    22 │ export {}
  
  i Using export type allows transpilers to safely drop exports of types without looking for their definition.
  
  i Safe fix: Use a grouped export type.
  
    18 18 │   export { Interface, TypeAlias, Enum, func as f, Class };
    19 19 │   
    20    │ - export·/*0*/·{·/*1*/·type·/*2*/·func·/*3*/,·/*4*/·type·Class·as·C·/*5*/·}·/*6*/;
       20 │ + export·/*0*/·type·{·/*1*/·/*2*/·func·/*3*/,·/*4*/·Class·as·C·/*5*/·}·/*6*/;
    21 21 │   
    22 22 │   export {}
  

```

```
invalid.ts:22:8 lint/style/useExportType  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! All exports are only types and should thus use export type.
  
    20 │ export /*0*/ { /*1*/ type /*2*/ func /*3*/, /*4*/ type Class as C /*5*/ } /*6*/;
    21 │ 
  > 22 │ export {}
       │        ^^
    23 │ 
  
  i Using export type allows transpilers to safely drop exports of types without looking for their definition.
  
  i Safe fix: Use a grouped export type.
  
    22 │ export·type·{}
       │        +++++  

```


