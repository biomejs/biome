---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalidLocalVariable.js
---
# Input
```jsx
export default function () {
    const CONSTANT_CASE_CONST = 0

    let CONSTANT_CASE_LET

    var CONSTANT_CASE_VAR

    const { prop: Unknown_Style } = obj
}

export function f() {
    const a_var = 0;
    console.log(a_var);
    return a_var;
}

```

# Diagnostics
```
invalidLocalVariable.js:2:11 lint/style/useNamingConvention  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This local const name should be in camelCase or PascalCase.
  
    1 │ export default function () {
  > 2 │     const CONSTANT_CASE_CONST = 0
      │           ^^^^^^^^^^^^^^^^^^^
    3 │ 
    4 │     let CONSTANT_CASE_LET
  
  i The name could be renamed to `constantCaseConst`.
  
  i Safe fix: Rename this symbol in camelCase.
  
     1  1 │   export default function () {
     2    │ - ····const·CONSTANT_CASE_CONST·=·0
        2 │ + ····const·constantCaseConst·=·0
     3  3 │   
     4  4 │       let CONSTANT_CASE_LET
  

```

```
invalidLocalVariable.js:4:9 lint/style/useNamingConvention  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This local let name should be in camelCase or PascalCase.
  
    2 │     const CONSTANT_CASE_CONST = 0
    3 │ 
  > 4 │     let CONSTANT_CASE_LET
      │         ^^^^^^^^^^^^^^^^^
    5 │ 
    6 │     var CONSTANT_CASE_VAR
  
  i The name could be renamed to `constantCaseLet`.
  
  i Safe fix: Rename this symbol in camelCase.
  
     2  2 │       const CONSTANT_CASE_CONST = 0
     3  3 │   
     4    │ - ····let·CONSTANT_CASE_LET
        4 │ + ····let·constantCaseLet
     5  5 │   
     6  6 │       var CONSTANT_CASE_VAR
  

```

```
invalidLocalVariable.js:6:9 lint/style/useNamingConvention  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This local var name should be in camelCase or PascalCase.
  
    4 │     let CONSTANT_CASE_LET
    5 │ 
  > 6 │     var CONSTANT_CASE_VAR
      │         ^^^^^^^^^^^^^^^^^
    7 │ 
    8 │     const { prop: Unknown_Style } = obj
  
  i The name could be renamed to `constantCaseVar`.
  
  i Safe fix: Rename this symbol in camelCase.
  
     4  4 │       let CONSTANT_CASE_LET
     5  5 │   
     6    │ - ····var·CONSTANT_CASE_VAR
        6 │ + ····var·constantCaseVar
     7  7 │   
     8  8 │       const { prop: Unknown_Style } = obj
  

```

```
invalidLocalVariable.js:8:19 lint/style/useNamingConvention  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This local const name should be in camelCase or PascalCase.
  
     6 │     var CONSTANT_CASE_VAR
     7 │ 
   > 8 │     const { prop: Unknown_Style } = obj
       │                   ^^^^^^^^^^^^^
     9 │ }
    10 │ 
  
  i The name could be renamed to `unknownStyle`.
  
  i Safe fix: Rename this symbol in camelCase.
  
     6  6 │       var CONSTANT_CASE_VAR
     7  7 │   
     8    │ - ····const·{·prop:·Unknown_Style·}·=·obj
        8 │ + ····const·{·prop:·unknownStyle·}·=·obj
     9  9 │   }
    10 10 │   
  

```

```
invalidLocalVariable.js:12:11 lint/style/useNamingConvention  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This local const name should be in camelCase or PascalCase.
  
    11 │ export function f() {
  > 12 │     const a_var = 0;
       │           ^^^^^
    13 │     console.log(a_var);
    14 │     return a_var;
  
  i The name could be renamed to `aVar`.
  
  i Safe fix: Rename this symbol in camelCase.
  
    10 10 │   
    11 11 │   export function f() {
    12    │ - ····const·a_var·=·0;
    13    │ - ····console.log(a_var);
    14    │ - ····return·a_var;
       12 │ + ····const·aVar·=·0;
       13 │ + ····console.log(aVar);
       14 │ + ····return·aVar;
    15 15 │   }
    16 16 │   
  

```
