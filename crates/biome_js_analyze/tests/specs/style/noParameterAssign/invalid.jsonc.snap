---
source: crates/biome_js_analyze/tests/spec_tests.rs
assertion_line: 134
expression: invalid.jsonc
---
# Input
```cjs
function foo(bar) { bar = 13; }
```

# Diagnostics
```
invalid.jsonc:1:21 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(bar) { bar = 13; }
      │                     ^^^
  
  i The parameter is declared here:
  
  > 1 │ function foo(bar) { bar = 13; }
      │              ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(bar) { bar += 13; }
```

# Diagnostics
```
invalid.jsonc:1:21 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(bar) { bar += 13; }
      │                     ^^^
  
  i The parameter is declared here:
  
  > 1 │ function foo(bar) { bar += 13; }
      │              ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(bar) { (function() { bar = 13; })(); }
```

# Diagnostics
```
invalid.jsonc:1:35 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(bar) { (function() { bar = 13; })(); }
      │                                   ^^^
  
  i The parameter is declared here:
  
  > 1 │ function foo(bar) { (function() { bar = 13; })(); }
      │              ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(bar) { ++bar; }
```

# Diagnostics
```
invalid.jsonc:1:23 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(bar) { ++bar; }
      │                       ^^^
  
  i The parameter is declared here:
  
  > 1 │ function foo(bar) { ++bar; }
      │              ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(bar) { ++bar; }
```

# Diagnostics
```
invalid.jsonc:1:23 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(bar) { ++bar; }
      │                       ^^^
  
  i The parameter is declared here:
  
  > 1 │ function foo(bar) { ++bar; }
      │              ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(bar) { --bar; }
```

# Diagnostics
```
invalid.jsonc:1:23 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(bar) { --bar; }
      │                       ^^^
  
  i The parameter is declared here:
  
  > 1 │ function foo(bar) { --bar; }
      │              ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(bar) { bar--; }
```

# Diagnostics
```
invalid.jsonc:1:21 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(bar) { bar--; }
      │                     ^^^
  
  i The parameter is declared here:
  
  > 1 │ function foo(bar) { bar--; }
      │              ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(bar) { bar--; }
```

# Diagnostics
```
invalid.jsonc:1:21 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(bar) { bar--; }
      │                     ^^^
  
  i The parameter is declared here:
  
  > 1 │ function foo(bar) { bar--; }
      │              ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(bar) { bar--; }
```

# Diagnostics
```
invalid.jsonc:1:21 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(bar) { bar--; }
      │                     ^^^
  
  i The parameter is declared here:
  
  > 1 │ function foo(bar) { bar--; }
      │              ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(bar) { ({bar} = {}); }
```

# Diagnostics
```
invalid.jsonc:1:23 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(bar) { ({bar} = {}); }
      │                       ^^^
  
  i The parameter is declared here:
  
  > 1 │ function foo(bar) { ({bar} = {}); }
      │              ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(bar) { ({x: [, bar = 0]} = {}); }
```

# Diagnostics
```
invalid.jsonc:1:29 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(bar) { ({x: [, bar = 0]} = {}); }
      │                             ^^^
  
  i The parameter is declared here:
  
  > 1 │ function foo(bar) { ({x: [, bar = 0]} = {}); }
      │              ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(bar) { for (bar in baz); }
```

# Diagnostics
```
invalid.jsonc:1:26 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(bar) { for (bar in baz); }
      │                          ^^^
  
  i The parameter is declared here:
  
  > 1 │ function foo(bar) { for (bar in baz); }
      │              ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(bar) { for (bar of baz); }
```

# Diagnostics
```
invalid.jsonc:1:26 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(bar) { for (bar of baz); }
      │                          ^^^
  
  i The parameter is declared here:
  
  > 1 │ function foo(bar) { for (bar of baz); }
      │              ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(a) { ({a} = obj); }
```

# Diagnostics
```
invalid.jsonc:1:21 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(a) { ({a} = obj); }
      │                     ^
  
  i The parameter is declared here:
  
  > 1 │ function foo(a) { ({a} = obj); }
      │              ^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(a) { ([...a] = obj); }
```

# Diagnostics
```
invalid.jsonc:1:24 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(a) { ([...a] = obj); }
      │                        ^
  
  i The parameter is declared here:
  
  > 1 │ function foo(a) { ([...a] = obj); }
      │              ^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(a) { ({...a} = obj); }
```

# Diagnostics
```
invalid.jsonc:1:24 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(a) { ({...a} = obj); }
      │                        ^
  
  i The parameter is declared here:
  
  > 1 │ function foo(a) { ({...a} = obj); }
      │              ^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(a) { a &&= b; }
```

# Diagnostics
```
invalid.jsonc:1:19 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(a) { a &&= b; }
      │                   ^
  
  i The parameter is declared here:
  
  > 1 │ function foo(a) { a &&= b; }
      │              ^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(a) { a ||= b; }
```

# Diagnostics
```
invalid.jsonc:1:19 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(a) { a ||= b; }
      │                   ^
  
  i The parameter is declared here:
  
  > 1 │ function foo(a) { a ||= b; }
      │              ^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
function foo(a) { a ??= b; }
```

# Diagnostics
```
invalid.jsonc:1:19 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ function foo(a) { a ??= b; }
      │                   ^
  
  i The parameter is declared here:
  
  > 1 │ function foo(a) { a ??= b; }
      │              ^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```

# Input
```cjs
const doSomething = req => { req = {}; };
```

# Diagnostics
```
invalid.jsonc:1:30 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Assigning a function parameter is confusing.
  
  > 1 │ const doSomething = req => { req = {}; };
      │                              ^^^
  
  i The parameter is declared here:
  
  > 1 │ const doSomething = req => { req = {}; };
      │                     ^^^
  
  i Developers usually expect function parameters to be readonly. To align with this expectation, use a local variable instead.
  

```
