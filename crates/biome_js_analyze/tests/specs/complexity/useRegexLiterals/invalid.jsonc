[
	"new RegExp('');",
	"RegExp('', '');",
	"new RegExp(String.raw``);",
	"new RegExp('abc');",
	"new RegExp((('abc')), ('g'));",
	"RegExp('abc');",
	"new RegExp('abc', 'g');",
	"RegExp('abc', 'g');",
	"new RegExp(`abc`);",
	"RegExp(`abc`);",
	"new RegExp(`abc`, `g`);",
	"RegExp(`abc`, `g`);",
	"new RegExp(String.raw`abc`);",
	"new RegExp(String.raw`abc\nabc`);",
	"new RegExp(String.raw`\tabc\nabc`);",
	"RegExp(String.raw`abc`);",
	"new RegExp(String.raw`abc`, String.raw`g`);",
	"RegExp(String.raw`abc`, String.raw`g`);",
	"new RegExp(String['raw']`a`);",
	"new RegExp('a', `g`);",
	"RegExp(`a`, 'g');",
	"RegExp(String.raw`a`, 'g');",
	"new RegExp(String.raw`\\d`, `g`);",
	"new RegExp(String.raw`\\\\d`, `g`);",
	"new RegExp(String['raw']`\\\\d`, `g`);",
	"new RegExp(String[\"raw\"]`\\\\d`, `g`);",
	"RegExp('a', String.raw`g`);",
	"new globalThis.RegExp('a');",
	"globalThis.RegExp('a');",
	"(globalThis).RegExp('a');",
	"new RegExp((String?.raw)`a`);",
	"RegExp('abc', 'u');",
	"new RegExp('abc', 'd');",
	"RegExp('abc', 'd');",
	"RegExp('\\\\\\\\', '');",
	"RegExp('\\n', '');",
	"RegExp('\\n\\n', '');",
	"RegExp('\\t', '');",
	"RegExp('\\t\\t', '');",
	"RegExp('\\r\\n', '');",
	"RegExp('\\u1234', 'g')",
	"RegExp('\\u{1234}', 'g')",
	"RegExp('\\u{11111}', 'g')",
	"RegExp('\\v', '');",
	"RegExp('\\v\\v', '');",
	"RegExp('\\f', '');",
	"RegExp('\\f\\f', '');",
	"RegExp('\\\\b', '');",
	"RegExp('\\\\b\\\\b', '');",
	"new RegExp('\\\\B\\\\b', '');",
	"RegExp('\\\\w', '');",
	"new globalThis.RegExp('\\\\W', '');",
	"RegExp('\\\\s', '');",
	"new RegExp('\\\\S', '')",
	"globalThis.RegExp('\\\\d', '');",
	"globalThis.RegExp('\\\\D', '')",
	"globalThis.RegExp('\\\\\\\\\\\\D', '')",
	"new RegExp('\\\\D\\\\D', '')",
	"new globalThis.RegExp('\\\\0\\\\0', '');",
	"new RegExp('\\\\0\\\\0', '');",
	"new RegExp('\\0\\0', 'g');",
	"RegExp('\\\\0\\\\0\\\\0', '')",
	"RegExp('\\\\78\\\\126\\\\5934', '')",
	"new window['RegExp']('\\\\x56\\\\x78\\\\x45', '');",
	"new (window['RegExp'])('\\\\x56\\\\x78\\\\x45', '');",
	"a in(RegExp('abc'))",
	"func(new RegExp(String.raw`\\w{1, 2`, 'u'),new RegExp(String.raw`\\w{1, 2`, 'u'))",
	"x = y;\n            RegExp(\"foo\").test(x) ? bar() : baz()",
	"typeof RegExp(\"foo\")",
	"RegExp(\"foo\") instanceof RegExp(String.raw`blahblah`, 'g') ? typeof new RegExp('(\\\\p{Emoji_Presentation})\\\\1', `ug`) : false",
	"[   new RegExp(`someregular`)]",
	"const totallyValidatesEmails = new RegExp(\"\\\\S+@(\\\\S+\\\\.)+\\\\S+\")\n            if (typeof totallyValidatesEmails === 'object') {\n                runSomethingThatExists(Regexp('stuff'))\n            }",
	"!new RegExp('^Hey, ', 'u') && new RegExp('jk$') && ~new RegExp('^Sup, ') || new RegExp('hi') + new RegExp('person') === -new RegExp('hi again') ? 5 * new RegExp('abc') : 'notregbutstring'",
	"#!/usr/bin/sh\n            RegExp(\"foo\")",
	"async function abc(){await new RegExp(\"foo\")}",
	"function* abc(){yield new RegExp(\"foo\")}",
	"function* abc(){yield* new RegExp(\"foo\")}",
	"console.log({ ...new RegExp('a') })",
	"delete RegExp('a');",
	"void RegExp('a');",
	"new RegExp(\"\\\\S+@(\\\\S+\\\\.)+\\\\S+\")**RegExp('a')",
	"new RegExp(\"\\\\S+@(\\\\S+\\\\.)+\\\\S+\")%RegExp('a')",
	"a in RegExp('abc')",
	"\n            /abc/ == new RegExp('cba');\n            ",
	"\n            /abc/ === new RegExp('cba');\n            ",
	"\n            /abc/ != new RegExp('cba');\n            ",
	"\n            /abc/ !== new RegExp('cba');\n            ",
	"\n            /abc/ > new RegExp('cba');\n            ",
	"\n            /abc/ < new RegExp('cba');\n            ",
	"\n            /abc/ >= new RegExp('cba');\n            ",
	"\n            /abc/ <= new RegExp('cba');\n            ",
	"\n            /abc/ << new RegExp('cba');\n            ",
	"\n            /abc/ >> new RegExp('cba');\n            ",
	"\n            /abc/ >>> new RegExp('cba');\n            ",
	"\n            /abc/ ^ new RegExp('cba');\n            ",
	"\n            /abc/ & new RegExp('cba');\n            ",
	"\n            /abc/ | new RegExp('cba');\n            ",
	"\n            null ?? new RegExp('blah')\n            ",
	"\n            abc *= new RegExp('blah')\n            ",
	"\n            console.log({a: new RegExp('sup')})\n            ",
	"\n            console.log(() => {new RegExp('sup')})\n            ",
	"\n            function abc() {new RegExp('sup')}\n            ",
	"\n            function abc() {return new RegExp('sup')}\n            ",
	"\n            abc <<= new RegExp('cba');\n            ",
	"\n            abc >>= new RegExp('cba');\n            ",
	"\n            abc >>>= new RegExp('cba');\n            ",
	"\n            abc ^= new RegExp('cba');\n            ",
	"\n            abc &= new RegExp('cba');\n            ",
	"\n            abc |= new RegExp('cba');\n            ",
	"\n            abc ??= new RegExp('cba');\n            ",
	"\n            abc &&= new RegExp('cba');\n            ",
	"\n            abc ||= new RegExp('cba');\n            ",
	"\n            abc **= new RegExp('blah')\n            ",
	"\n            abc /= new RegExp('blah')\n            ",
	"\n            abc += new RegExp('blah')\n            ",
	"\n            abc -= new RegExp('blah')\n            ",
	"\n            abc %= new RegExp('blah')\n            ",
	"\n            () => new RegExp('blah')\n            ",
	"a/RegExp(\"foo\")in b",
	"a/RegExp(\"foo\")instanceof b",
	"do RegExp(\"foo\")\nwhile (true);",
	"for(let i;i<5;i++) { break\nnew RegExp('search')}",
	"for(let i;i<5;i++) { continue\nnew RegExp('search')}",
	"\n            switch (value) {\n                case \"possibility\":\n                    console.log('possibility matched')\n                case RegExp('myReg').toString():\n                    console.log('matches a regexp\\' toString value')\n                    break;\n            }\n            ",
	"throw new RegExp('abcdefg') // fail with a regular expression",
	"for (value of new RegExp('something being searched')) { console.log(value) }",
	"(async function(){for await (value of new RegExp('something being searched')) { console.log(value) }})()",
	"for (value in new RegExp('something being searched')) { console.log(value) }",
	"if (condition1 && condition2) new RegExp('avalue').test(str);",
	"debugger\nnew RegExp('myReg')",
	"RegExp(\"\\\\\\n\")",
	"RegExp(\"\\\\\\t\")",
	"RegExp(\"\\\\\\f\")",
	"RegExp(\"\\\\\\v\")",
	"RegExp(\"\\\\\\r\")",
	"new RegExp(\"\t\")",
	"new RegExp(\"/\")",
	"new RegExp(\"\\.\")",
	"new RegExp(\"\\\\.\")",
	"new RegExp(\"\\\\\\n\\\\\\n\")",
	"new RegExp(\"\\\\\\n\\\\\\f\\\\\\n\")",
	"new RegExp(\"\\u000A\\u000A\");",
	"new RegExp('mysafereg' /* comment explaining its safety */)",
	// ES2024
	"new RegExp('[[A--B]]', 'v')",
	"new RegExp('[[A--B]]', 'v')",
	"new RegExp('[[A&&&]]', 'v')",

	// https://github.com/biomejs/biome/issues/1704
	"new RegExp('://[^:/]*')"
]
