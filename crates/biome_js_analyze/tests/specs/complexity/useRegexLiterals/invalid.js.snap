---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```js
// https://github.com/biomejs/biome/issues/5487
new RegExp("\/pattern$");

new RegExp("\🙂pattern");

```

# Diagnostics
```
invalid.js:2:1 lint/complexity/useRegexLiterals  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Use a regular expression literal instead of the RegExp constructor.
  
    1 │ // https://github.com/biomejs/biome/issues/5487
  > 2 │ new RegExp("\/pattern$");
      │ ^^^^^^^^^^^^^^^^^^^^^^^^
    3 │ 
    4 │ new RegExp("\🙂pattern");
  
  i Regular expression literals avoid some escaping required in a string literal, and are easier to analyze statically.
  
  i Safe fix: Use a literal notation instead.
  
    1 1 │   // https://github.com/biomejs/biome/issues/5487
    2   │ - new·RegExp("\/pattern$");
      2 │ + /\/pattern$/;
    3 3 │   
    4 4 │   new RegExp("\🙂pattern");
  

```

```
invalid.js:4:1 lint/complexity/useRegexLiterals  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Use a regular expression literal instead of the RegExp constructor.
  
    2 │ new RegExp("\/pattern$");
    3 │ 
  > 4 │ new RegExp("\🙂pattern");
      │ ^^^^^^^^^^^^^^^^^^^^^^^^
    5 │ 
  
  i Regular expression literals avoid some escaping required in a string literal, and are easier to analyze statically.
  
  i Safe fix: Use a literal notation instead.
  
    2 2 │   new RegExp("\/pattern$");
    3 3 │   
    4   │ - new·RegExp("\🙂pattern");
      4 │ + /\🙂pattern/;
    5 5 │   
  

```
