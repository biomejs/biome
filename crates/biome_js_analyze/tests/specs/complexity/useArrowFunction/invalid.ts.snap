---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.ts
---
# Input
```ts
const f1 = async function<T> (x: T): Promise<T> {
    return x;
}

const f2 = async function<T> (x: T): Promise<object> {
    return {};
}

const f3 = /*a*/ async /*b*/ function /*c*/ <T> /*d*/ (x: T /*e*/)/*f*/: Promise<T>/*g*/ {
    return x;
} /* end */

const f4 = async function<T> (x: T): Promise<T> {
    return x;
} // Trailing comment

const f5 = async function<T> (x: T): Promise<T> {
    return x; // Comment
}

const f6 = function() {
    function inner () {
        return this;
    }
    return 0;
}

function f7() {
    const self = this;
    return function() {
        if (self instanceof Number) {
            return self;
        } else {
            return null;
        }
    };
}

const f8 = function(a) {}.bind(null, 0);

const f9 = function(a) {}["bind"](null, 0);

const called = function () {}();

const f10 = function(x) {
    return 0, 1;
}

```

# Diagnostics
```
invalid.ts:1:12 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
  > 1 │ const f1 = async function<T> (x: T): Promise<T> {
      │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 2 │     return x;
  > 3 │ }
      │ ^
    4 │ 
    5 │ const f2 = async function<T> (x: T): Promise<object> {
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     1    │ - const·f1·=·async·function<T>·(x:·T):·Promise<T>·{
     2    │ - ····return·x;
     3    │ - }
        1 │ + const·f1·=·async·<T>·(x:·T):·Promise<T>·=>·x
     4  2 │   
     5  3 │   const f2 = async function<T> (x: T): Promise<object> {
  

```

```
invalid.ts:5:12 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    3 │ }
    4 │ 
  > 5 │ const f2 = async function<T> (x: T): Promise<object> {
      │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 6 │     return {};
  > 7 │ }
      │ ^
    8 │ 
    9 │ const f3 = /*a*/ async /*b*/ function /*c*/ <T> /*d*/ (x: T /*e*/)/*f*/: Promise<T>/*g*/ {
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     3  3 │   }
     4  4 │   
     5    │ - const·f2·=·async·function<T>·(x:·T):·Promise<object>·{
     6    │ - ····return·{};
     7    │ - }
        5 │ + const·f2·=·async·<T>·(x:·T):·Promise<object>·=>·({})
     8  6 │   
     9  7 │   const f3 = /*a*/ async /*b*/ function /*c*/ <T> /*d*/ (x: T /*e*/)/*f*/: Promise<T>/*g*/ {
  

```

```
invalid.ts:9:18 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     7 │ }
     8 │ 
   > 9 │ const f3 = /*a*/ async /*b*/ function /*c*/ <T> /*d*/ (x: T /*e*/)/*f*/: Promise<T>/*g*/ {
       │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 10 │     return x;
  > 11 │ } /* end */
       │ ^
    12 │ 
    13 │ const f4 = async function<T> (x: T): Promise<T> {
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     7  7 │   }
     8  8 │   
     9    │ - const·f3·=·/*a*/·async·/*b*/·function·/*c*/·<T>·/*d*/·(x:·T·/*e*/)/*f*/:·Promise<T>/*g*/·{
    10    │ - ····return·x;
    11    │ - }·/*·end·*/
        9 │ + const·f3·=·/*a*/·async·/*b*/·<T>·/*d*/·(x:·T·/*e*/)/*f*/:·Promise<T>/*g*/·=>·x·/*·end·*/
    12 10 │   
    13 11 │   const f4 = async function<T> (x: T): Promise<T> {
  

```

```
invalid.ts:13:12 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    11 │ } /* end */
    12 │ 
  > 13 │ const f4 = async function<T> (x: T): Promise<T> {
       │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 14 │     return x;
  > 15 │ } // Trailing comment
       │ ^
    16 │ 
    17 │ const f5 = async function<T> (x: T): Promise<T> {
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
    11 11 │   } /* end */
    12 12 │   
    13    │ - const·f4·=·async·function<T>·(x:·T):·Promise<T>·{
    14    │ - ····return·x;
    15    │ - }·//·Trailing·comment
       13 │ + const·f4·=·async·<T>·(x:·T):·Promise<T>·=>·x·//·Trailing·comment
    16 14 │   
    17 15 │   const f5 = async function<T> (x: T): Promise<T> {
  

```

```
invalid.ts:17:12 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    15 │ } // Trailing comment
    16 │ 
  > 17 │ const f5 = async function<T> (x: T): Promise<T> {
       │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 18 │     return x; // Comment
  > 19 │ }
       │ ^
    20 │ 
    21 │ const f6 = function() {
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
    15 15 │   } // Trailing comment
    16 16 │   
    17    │ - const·f5·=·async·function<T>·(x:·T):·Promise<T>·{
       17 │ + const·f5·=·async·<T>·(x:·T):·Promise<T>·=>·{
    18 18 │       return x; // Comment
    19 19 │   }
  

```

```
invalid.ts:21:12 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    19 │ }
    20 │ 
  > 21 │ const f6 = function() {
       │            ^^^^^^^^^^^^
  > 22 │     function inner () {
  > 23 │         return this;
  > 24 │     }
  > 25 │     return 0;
  > 26 │ }
       │ ^
    27 │ 
    28 │ function f7() {
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
    19 19 │   }
    20 20 │   
    21    │ - const·f6·=·function()·{
       21 │ + const·f6·=·()·=>·{
    22 22 │       function inner () {
    23 23 │           return this;
  

```

```
invalid.ts:30:12 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    28 │ function f7() {
    29 │     const self = this;
  > 30 │     return function() {
       │            ^^^^^^^^^^^^
  > 31 │         if (self instanceof Number) {
        ...
  > 35 │         }
  > 36 │     };
       │     ^
    37 │ }
    38 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
    28 28 │   function f7() {
    29 29 │       const self = this;
    30    │ - ····return·function()·{
       30 │ + ····return·()·=>·{
    31 31 │           if (self instanceof Number) {
    32 32 │               return self;
  

```

```
invalid.ts:39:12 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    37 │ }
    38 │ 
  > 39 │ const f8 = function(a) {}.bind(null, 0);
       │            ^^^^^^^^^^^^^^
    40 │ 
    41 │ const f9 = function(a) {}["bind"](null, 0);
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
    37 37 │   }
    38 38 │   
    39    │ - const·f8·=·function(a)·{}.bind(null,·0);
       39 │ + const·f8·=·((a)·=>·{}).bind(null,·0);
    40 40 │   
    41 41 │   const f9 = function(a) {}["bind"](null, 0);
  

```

```
invalid.ts:41:12 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    39 │ const f8 = function(a) {}.bind(null, 0);
    40 │ 
  > 41 │ const f9 = function(a) {}["bind"](null, 0);
       │            ^^^^^^^^^^^^^^
    42 │ 
    43 │ const called = function () {}();
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
    39 39 │   const f8 = function(a) {}.bind(null, 0);
    40 40 │   
    41    │ - const·f9·=·function(a)·{}["bind"](null,·0);
       41 │ + const·f9·=·((a)·=>·{})["bind"](null,·0);
    42 42 │   
    43 43 │   const called = function () {}();
  

```

```
invalid.ts:43:16 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    41 │ const f9 = function(a) {}["bind"](null, 0);
    42 │ 
  > 43 │ const called = function () {}();
       │                ^^^^^^^^^^^^^^
    44 │ 
    45 │ const f10 = function(x) {
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
    41 41 │   const f9 = function(a) {}["bind"](null, 0);
    42 42 │   
    43    │ - const·called·=·function·()·{}();
       43 │ + const·called·=·(()·=>·{})();
    44 44 │   
    45 45 │   const f10 = function(x) {
  

```

```
invalid.ts:45:13 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    43 │ const called = function () {}();
    44 │ 
  > 45 │ const f10 = function(x) {
       │             ^^^^^^^^^^^^^
  > 46 │     return 0, 1;
  > 47 │ }
       │ ^
    48 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
    43 43 │   const called = function () {}();
    44 44 │   
    45    │ - const·f10·=·function(x)·{
    46    │ - ····return·0,·1;
    47    │ - }
       45 │ + const·f10·=·(x)·=>·(0,·1)
    48 46 │   
  

```


