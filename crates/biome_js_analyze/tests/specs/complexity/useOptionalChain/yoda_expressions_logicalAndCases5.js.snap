---
source: crates/biome_js_analyze/tests/spec_tests.rs
assertion_line: 152
expression: yoda_expressions_logicalAndCases5.js
---
# Input
```js
// case with a jump (i.e. a non-nullish prop)
null != foo && null != foo.bar && foo.bar.baz.buzz
null != foo.bar && foo.bar.baz.buzz

// case where for some reason there is a doubled up expression
null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz && foo.bar.baz.buzz
null != foo.bar && null != foo.bar.baz && null != foo.bar.baz && foo.bar.baz.buzz

// chained members with element access
null != foo && null != foo[bar] && null != foo[bar].baz && foo[bar].baz.buzz

// case with a jump (i.e. a non-nullish prop)
null != foo && null != foo[bar].baz && foo[bar].baz.buzz

// chained calls
null != foo && null != foo.bar && null != foo.bar.baz && foo.bar.baz.buzz()
null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz.buzz && foo.bar.baz.buzz()
null != foo.bar && null != foo.bar.baz && null != foo.bar.baz.buzz && foo.bar.baz.buzz()

// case with a jump (i.e. a non-nullish prop)
null != foo && null != foo.bar && foo.bar.baz.buzz()
null != foo.bar && foo.bar.baz.buzz()

// case with a jump (i.e. a non-nullish prop)
null != foo && null != foo.bar && null != foo.bar.baz.buzz && foo.bar.baz.buzz()

// case with a call expr inside the chain for some inefficient reason
null != foo && null != foo.bar() && null != foo.bar().baz && null != foo.bar().baz.buzz && foo.bar().baz.buzz()

// chained calls with element access
null != foo && null != foo.bar && null != foo.bar.baz && foo.bar.baz[buzz]()
null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz[buzz] && foo.bar.baz[buzz]()

// (partially) pre-optional chained
null != foo && null != foo?.bar && null != foo?.bar.baz && null != foo?.bar.baz[buzz] && foo?.bar.baz[buzz]()
null != foo && null != foo?.bar.baz && foo?.bar.baz[buzz]
null != foo && null != foo?.() && foo?.().bar
null != foo.bar && null != foo.bar?.() && foo.bar?.().baz

// chained members
undefined != foo && foo.bar
undefined != foo.bar && foo.bar.baz
undefined != foo && foo()
undefined != foo.bar && foo.bar()
undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz
undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz

// case with a jump (i.e. a non-nullish prop)
undefined != foo && undefined != foo.bar && foo.bar.baz.buzz
undefined != foo.bar && foo.bar.baz.buzz

// case where for some reason there is a doubled up expression
undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz && foo.bar.baz.buzz
undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz && foo.bar.baz.buzz

// chained members with element access
undefined != foo && undefined != foo[bar] && undefined != foo[bar].baz && foo[bar].baz.buzz

// case with a jump (i.e. a non-nullish prop)
undefined != foo && undefined != foo[bar].baz && foo[bar].baz.buzz

// chained calls
undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz()
undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz.buzz && foo.bar.baz.buzz()
undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz.buzz && foo.bar.baz.buzz()

```

# Diagnostics
```
yoda_expressions_logicalAndCases5.js:2:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    1 │ // case with a jump (i.e. a non-nullish prop)
  > 2 │ null != foo && null != foo.bar && foo.bar.baz.buzz
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    3 │ null != foo.bar && foo.bar.baz.buzz
    4 │ 
  
  i Unsafe fix: Change to an optional chain.
  
     1  1 │   // case with a jump (i.e. a non-nullish prop)
     2    │ - null·!=·foo·&&·null·!=·foo.bar·&&·foo.bar.baz.buzz
        2 │ + foo?.bar?.baz.buzz
     3  3 │   null != foo.bar && foo.bar.baz.buzz
     4  4 │   
  

```

```
yoda_expressions_logicalAndCases5.js:3:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    1 │ // case with a jump (i.e. a non-nullish prop)
    2 │ null != foo && null != foo.bar && foo.bar.baz.buzz
  > 3 │ null != foo.bar && foo.bar.baz.buzz
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    4 │ 
    5 │ // case where for some reason there is a doubled up expression
  
  i Unsafe fix: Change to an optional chain.
  
     1  1 │   // case with a jump (i.e. a non-nullish prop)
     2  2 │   null != foo && null != foo.bar && foo.bar.baz.buzz
     3    │ - null·!=·foo.bar·&&·foo.bar.baz.buzz
        3 │ + foo.bar?.baz.buzz
     4  4 │   
     5  5 │   // case where for some reason there is a doubled up expression
  

```

```
yoda_expressions_logicalAndCases5.js:6:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    5 │ // case where for some reason there is a doubled up expression
  > 6 │ null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz && foo.bar.baz.buzz
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    7 │ null != foo.bar && null != foo.bar.baz && null != foo.bar.baz && foo.bar.baz.buzz
    8 │ 
  
  i Unsafe fix: Change to an optional chain.
  
     4  4 │   
     5  5 │   // case where for some reason there is a doubled up expression
     6    │ - null·!=·foo·&&·null·!=·foo.bar·&&·null·!=·foo.bar.baz·&&·null·!=·foo.bar.baz·&&·foo.bar.baz.buzz
        6 │ + foo?.bar?.baz?.buzz
     7  7 │   null != foo.bar && null != foo.bar.baz && null != foo.bar.baz && foo.bar.baz.buzz
     8  8 │   
  

```

```
yoda_expressions_logicalAndCases5.js:7:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    5 │ // case where for some reason there is a doubled up expression
    6 │ null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz && foo.bar.baz.buzz
  > 7 │ null != foo.bar && null != foo.bar.baz && null != foo.bar.baz && foo.bar.baz.buzz
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    8 │ 
    9 │ // chained members with element access
  
  i Unsafe fix: Change to an optional chain.
  
     5  5 │   // case where for some reason there is a doubled up expression
     6  6 │   null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz && foo.bar.baz.buzz
     7    │ - null·!=·foo.bar·&&·null·!=·foo.bar.baz·&&·null·!=·foo.bar.baz·&&·foo.bar.baz.buzz
        7 │ + foo.bar?.baz?.buzz
     8  8 │   
     9  9 │   // chained members with element access
  

```

```
yoda_expressions_logicalAndCases5.js:10:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
     9 │ // chained members with element access
  > 10 │ null != foo && null != foo[bar] && null != foo[bar].baz && foo[bar].baz.buzz
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    11 │ 
    12 │ // case with a jump (i.e. a non-nullish prop)
  
  i Unsafe fix: Change to an optional chain.
  
     8  8 │   
     9  9 │   // chained members with element access
    10    │ - null·!=·foo·&&·null·!=·foo[bar]·&&·null·!=·foo[bar].baz·&&·foo[bar].baz.buzz
       10 │ + foo?.[bar]?.baz?.buzz
    11 11 │   
    12 12 │   // case with a jump (i.e. a non-nullish prop)
  

```

```
yoda_expressions_logicalAndCases5.js:13:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    12 │ // case with a jump (i.e. a non-nullish prop)
  > 13 │ null != foo && null != foo[bar].baz && foo[bar].baz.buzz
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    14 │ 
    15 │ // chained calls
  
  i Unsafe fix: Change to an optional chain.
  
    11 11 │   
    12 12 │   // case with a jump (i.e. a non-nullish prop)
    13    │ - null·!=·foo·&&·null·!=·foo[bar].baz·&&·foo[bar].baz.buzz
       13 │ + foo?.[bar].baz?.buzz
    14 14 │   
    15 15 │   // chained calls
  

```

```
yoda_expressions_logicalAndCases5.js:16:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    15 │ // chained calls
  > 16 │ null != foo && null != foo.bar && null != foo.bar.baz && foo.bar.baz.buzz()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    17 │ null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz.buzz && foo.bar.baz.buzz()
    18 │ null != foo.bar && null != foo.bar.baz && null != foo.bar.baz.buzz && foo.bar.baz.buzz()
  
  i Unsafe fix: Change to an optional chain.
  
    14 14 │   
    15 15 │   // chained calls
    16    │ - null·!=·foo·&&·null·!=·foo.bar·&&·null·!=·foo.bar.baz·&&·foo.bar.baz.buzz()
       16 │ + foo?.bar?.baz?.buzz()
    17 17 │   null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz.buzz && foo.bar.baz.buzz()
    18 18 │   null != foo.bar && null != foo.bar.baz && null != foo.bar.baz.buzz && foo.bar.baz.buzz()
  

```

```
yoda_expressions_logicalAndCases5.js:17:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    15 │ // chained calls
    16 │ null != foo && null != foo.bar && null != foo.bar.baz && foo.bar.baz.buzz()
  > 17 │ null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz.buzz && foo.bar.baz.buzz()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    18 │ null != foo.bar && null != foo.bar.baz && null != foo.bar.baz.buzz && foo.bar.baz.buzz()
    19 │ 
  
  i Unsafe fix: Change to an optional chain.
  
    15 15 │   // chained calls
    16 16 │   null != foo && null != foo.bar && null != foo.bar.baz && foo.bar.baz.buzz()
    17    │ - null·!=·foo·&&·null·!=·foo.bar·&&·null·!=·foo.bar.baz·&&·null·!=·foo.bar.baz.buzz·&&·foo.bar.baz.buzz()
       17 │ + foo?.bar?.baz?.buzz?.()
    18 18 │   null != foo.bar && null != foo.bar.baz && null != foo.bar.baz.buzz && foo.bar.baz.buzz()
    19 19 │   
  

```

```
yoda_expressions_logicalAndCases5.js:18:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    16 │ null != foo && null != foo.bar && null != foo.bar.baz && foo.bar.baz.buzz()
    17 │ null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz.buzz && foo.bar.baz.buzz()
  > 18 │ null != foo.bar && null != foo.bar.baz && null != foo.bar.baz.buzz && foo.bar.baz.buzz()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    19 │ 
    20 │ // case with a jump (i.e. a non-nullish prop)
  
  i Unsafe fix: Change to an optional chain.
  
    16 16 │   null != foo && null != foo.bar && null != foo.bar.baz && foo.bar.baz.buzz()
    17 17 │   null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz.buzz && foo.bar.baz.buzz()
    18    │ - null·!=·foo.bar·&&·null·!=·foo.bar.baz·&&·null·!=·foo.bar.baz.buzz·&&·foo.bar.baz.buzz()
       18 │ + foo.bar?.baz?.buzz?.()
    19 19 │   
    20 20 │   // case with a jump (i.e. a non-nullish prop)
  

```

```
yoda_expressions_logicalAndCases5.js:21:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    20 │ // case with a jump (i.e. a non-nullish prop)
  > 21 │ null != foo && null != foo.bar && foo.bar.baz.buzz()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    22 │ null != foo.bar && foo.bar.baz.buzz()
    23 │ 
  
  i Unsafe fix: Change to an optional chain.
  
    19 19 │   
    20 20 │   // case with a jump (i.e. a non-nullish prop)
    21    │ - null·!=·foo·&&·null·!=·foo.bar·&&·foo.bar.baz.buzz()
       21 │ + foo?.bar?.baz.buzz()
    22 22 │   null != foo.bar && foo.bar.baz.buzz()
    23 23 │   
  

```

```
yoda_expressions_logicalAndCases5.js:22:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    20 │ // case with a jump (i.e. a non-nullish prop)
    21 │ null != foo && null != foo.bar && foo.bar.baz.buzz()
  > 22 │ null != foo.bar && foo.bar.baz.buzz()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    23 │ 
    24 │ // case with a jump (i.e. a non-nullish prop)
  
  i Unsafe fix: Change to an optional chain.
  
    20 20 │   // case with a jump (i.e. a non-nullish prop)
    21 21 │   null != foo && null != foo.bar && foo.bar.baz.buzz()
    22    │ - null·!=·foo.bar·&&·foo.bar.baz.buzz()
       22 │ + foo.bar?.baz.buzz()
    23 23 │   
    24 24 │   // case with a jump (i.e. a non-nullish prop)
  

```

```
yoda_expressions_logicalAndCases5.js:25:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    24 │ // case with a jump (i.e. a non-nullish prop)
  > 25 │ null != foo && null != foo.bar && null != foo.bar.baz.buzz && foo.bar.baz.buzz()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    26 │ 
    27 │ // case with a call expr inside the chain for some inefficient reason
  
  i Unsafe fix: Change to an optional chain.
  
    23 23 │   
    24 24 │   // case with a jump (i.e. a non-nullish prop)
    25    │ - null·!=·foo·&&·null·!=·foo.bar·&&·null·!=·foo.bar.baz.buzz·&&·foo.bar.baz.buzz()
       25 │ + foo?.bar?.baz.buzz?.()
    26 26 │   
    27 27 │   // case with a call expr inside the chain for some inefficient reason
  

```

```
yoda_expressions_logicalAndCases5.js:28:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    27 │ // case with a call expr inside the chain for some inefficient reason
  > 28 │ null != foo && null != foo.bar() && null != foo.bar().baz && null != foo.bar().baz.buzz && foo.bar().baz.buzz()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    29 │ 
    30 │ // chained calls with element access
  
  i Unsafe fix: Change to an optional chain.
  
    26 26 │   
    27 27 │   // case with a call expr inside the chain for some inefficient reason
    28    │ - null·!=·foo·&&·null·!=·foo.bar()·&&·null·!=·foo.bar().baz·&&·null·!=·foo.bar().baz.buzz·&&·foo.bar().baz.buzz()
       28 │ + foo?.bar()?.baz?.buzz?.()
    29 29 │   
    30 30 │   // chained calls with element access
  

```

```
yoda_expressions_logicalAndCases5.js:31:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    30 │ // chained calls with element access
  > 31 │ null != foo && null != foo.bar && null != foo.bar.baz && foo.bar.baz[buzz]()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    32 │ null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz[buzz] && foo.bar.baz[buzz]()
    33 │ 
  
  i Unsafe fix: Change to an optional chain.
  
    29 29 │   
    30 30 │   // chained calls with element access
    31    │ - null·!=·foo·&&·null·!=·foo.bar·&&·null·!=·foo.bar.baz·&&·foo.bar.baz[buzz]()
       31 │ + foo?.bar?.baz?.[buzz]()
    32 32 │   null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz[buzz] && foo.bar.baz[buzz]()
    33 33 │   
  

```

```
yoda_expressions_logicalAndCases5.js:32:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    30 │ // chained calls with element access
    31 │ null != foo && null != foo.bar && null != foo.bar.baz && foo.bar.baz[buzz]()
  > 32 │ null != foo && null != foo.bar && null != foo.bar.baz && null != foo.bar.baz[buzz] && foo.bar.baz[buzz]()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    33 │ 
    34 │ // (partially) pre-optional chained
  
  i Unsafe fix: Change to an optional chain.
  
    30 30 │   // chained calls with element access
    31 31 │   null != foo && null != foo.bar && null != foo.bar.baz && foo.bar.baz[buzz]()
    32    │ - null·!=·foo·&&·null·!=·foo.bar·&&·null·!=·foo.bar.baz·&&·null·!=·foo.bar.baz[buzz]·&&·foo.bar.baz[buzz]()
       32 │ + foo?.bar?.baz?.[buzz]?.()
    33 33 │   
    34 34 │   // (partially) pre-optional chained
  

```

```
yoda_expressions_logicalAndCases5.js:35:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    34 │ // (partially) pre-optional chained
  > 35 │ null != foo && null != foo?.bar && null != foo?.bar.baz && null != foo?.bar.baz[buzz] && foo?.bar.baz[buzz]()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    36 │ null != foo && null != foo?.bar.baz && foo?.bar.baz[buzz]
    37 │ null != foo && null != foo?.() && foo?.().bar
  
  i Unsafe fix: Change to an optional chain.
  
    33 33 │   
    34 34 │   // (partially) pre-optional chained
    35    │ - null·!=·foo·&&·null·!=·foo?.bar·&&·null·!=·foo?.bar.baz·&&·null·!=·foo?.bar.baz[buzz]·&&·foo?.bar.baz[buzz]()
       35 │ + foo?.bar?.baz?.[buzz]?.()
    36 36 │   null != foo && null != foo?.bar.baz && foo?.bar.baz[buzz]
    37 37 │   null != foo && null != foo?.() && foo?.().bar
  

```

```
yoda_expressions_logicalAndCases5.js:36:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    34 │ // (partially) pre-optional chained
    35 │ null != foo && null != foo?.bar && null != foo?.bar.baz && null != foo?.bar.baz[buzz] && foo?.bar.baz[buzz]()
  > 36 │ null != foo && null != foo?.bar.baz && foo?.bar.baz[buzz]
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    37 │ null != foo && null != foo?.() && foo?.().bar
    38 │ null != foo.bar && null != foo.bar?.() && foo.bar?.().baz
  
  i Unsafe fix: Change to an optional chain.
  
    36 │ null·!=·foo·&&·null·!=·foo?.bar.baz·&&·foo?.bar.baz[buzz]
       │ --------   ---------------         -------  -------      

```

```
yoda_expressions_logicalAndCases5.js:37:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    35 │ null != foo && null != foo?.bar && null != foo?.bar.baz && null != foo?.bar.baz[buzz] && foo?.bar.baz[buzz]()
    36 │ null != foo && null != foo?.bar.baz && foo?.bar.baz[buzz]
  > 37 │ null != foo && null != foo?.() && foo?.().bar
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    38 │ null != foo.bar && null != foo.bar?.() && foo.bar?.().baz
    39 │ 
  
  i Unsafe fix: Change to an optional chain.
  
    37 │ null·!=·foo·&&·null·!=·foo?.()·&&·foo?.().bar
       │ --------   ---------------    ------- ---    

```

```
yoda_expressions_logicalAndCases5.js:38:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    36 │ null != foo && null != foo?.bar.baz && foo?.bar.baz[buzz]
    37 │ null != foo && null != foo?.() && foo?.().bar
  > 38 │ null != foo.bar && null != foo.bar?.() && foo.bar?.().baz
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    39 │ 
    40 │ // chained members
  
  i Unsafe fix: Change to an optional chain.
  
    38 │ null·!=·foo.bar·&&·null·!=·foo.bar?.()·&&·foo.bar?.().baz
       │ --------       -------------------    ----------- ---    

```

```
yoda_expressions_logicalAndCases5.js:41:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    40 │ // chained members
  > 41 │ undefined != foo && foo.bar
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    42 │ undefined != foo.bar && foo.bar.baz
    43 │ undefined != foo && foo()
  
  i Unsafe fix: Change to an optional chain.
  
    39 39 │   
    40 40 │   // chained members
    41    │ - undefined·!=·foo·&&·foo.bar
       41 │ + foo?.bar
    42 42 │   undefined != foo.bar && foo.bar.baz
    43 43 │   undefined != foo && foo()
  

```

```
yoda_expressions_logicalAndCases5.js:42:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    40 │ // chained members
    41 │ undefined != foo && foo.bar
  > 42 │ undefined != foo.bar && foo.bar.baz
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    43 │ undefined != foo && foo()
    44 │ undefined != foo.bar && foo.bar()
  
  i Unsafe fix: Change to an optional chain.
  
    40 40 │   // chained members
    41 41 │   undefined != foo && foo.bar
    42    │ - undefined·!=·foo.bar·&&·foo.bar.baz
       42 │ + foo.bar?.baz
    43 43 │   undefined != foo && foo()
    44 44 │   undefined != foo.bar && foo.bar()
  

```

```
yoda_expressions_logicalAndCases5.js:43:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    41 │ undefined != foo && foo.bar
    42 │ undefined != foo.bar && foo.bar.baz
  > 43 │ undefined != foo && foo()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^
    44 │ undefined != foo.bar && foo.bar()
    45 │ undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz
  
  i Unsafe fix: Change to an optional chain.
  
    41 41 │   undefined != foo && foo.bar
    42 42 │   undefined != foo.bar && foo.bar.baz
    43    │ - undefined·!=·foo·&&·foo()
       43 │ + foo?.()
    44 44 │   undefined != foo.bar && foo.bar()
    45 45 │   undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz
  

```

```
yoda_expressions_logicalAndCases5.js:44:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    42 │ undefined != foo.bar && foo.bar.baz
    43 │ undefined != foo && foo()
  > 44 │ undefined != foo.bar && foo.bar()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    45 │ undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz
    46 │ undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz
  
  i Unsafe fix: Change to an optional chain.
  
    42 42 │   undefined != foo.bar && foo.bar.baz
    43 43 │   undefined != foo && foo()
    44    │ - undefined·!=·foo.bar·&&·foo.bar()
       44 │ + foo.bar?.()
    45 45 │   undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz
    46 46 │   undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz
  

```

```
yoda_expressions_logicalAndCases5.js:45:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    43 │ undefined != foo && foo()
    44 │ undefined != foo.bar && foo.bar()
  > 45 │ undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    46 │ undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz
    47 │ 
  
  i Unsafe fix: Change to an optional chain.
  
    43 43 │   undefined != foo && foo()
    44 44 │   undefined != foo.bar && foo.bar()
    45    │ - undefined·!=·foo·&&·undefined·!=·foo.bar·&&·undefined·!=·foo.bar.baz·&&·foo.bar.baz.buzz
       45 │ + foo?.bar?.baz?.buzz
    46 46 │   undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz
    47 47 │   
  

```

```
yoda_expressions_logicalAndCases5.js:46:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    44 │ undefined != foo.bar && foo.bar()
    45 │ undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz
  > 46 │ undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    47 │ 
    48 │ // case with a jump (i.e. a non-nullish prop)
  
  i Unsafe fix: Change to an optional chain.
  
    44 44 │   undefined != foo.bar && foo.bar()
    45 45 │   undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz
    46    │ - undefined·!=·foo.bar·&&·undefined·!=·foo.bar.baz·&&·foo.bar.baz.buzz
       46 │ + foo.bar?.baz?.buzz
    47 47 │   
    48 48 │   // case with a jump (i.e. a non-nullish prop)
  

```

```
yoda_expressions_logicalAndCases5.js:49:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    48 │ // case with a jump (i.e. a non-nullish prop)
  > 49 │ undefined != foo && undefined != foo.bar && foo.bar.baz.buzz
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    50 │ undefined != foo.bar && foo.bar.baz.buzz
    51 │ 
  
  i Unsafe fix: Change to an optional chain.
  
    47 47 │   
    48 48 │   // case with a jump (i.e. a non-nullish prop)
    49    │ - undefined·!=·foo·&&·undefined·!=·foo.bar·&&·foo.bar.baz.buzz
       49 │ + foo?.bar?.baz.buzz
    50 50 │   undefined != foo.bar && foo.bar.baz.buzz
    51 51 │   
  

```

```
yoda_expressions_logicalAndCases5.js:50:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    48 │ // case with a jump (i.e. a non-nullish prop)
    49 │ undefined != foo && undefined != foo.bar && foo.bar.baz.buzz
  > 50 │ undefined != foo.bar && foo.bar.baz.buzz
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    51 │ 
    52 │ // case where for some reason there is a doubled up expression
  
  i Unsafe fix: Change to an optional chain.
  
    48 48 │   // case with a jump (i.e. a non-nullish prop)
    49 49 │   undefined != foo && undefined != foo.bar && foo.bar.baz.buzz
    50    │ - undefined·!=·foo.bar·&&·foo.bar.baz.buzz
       50 │ + foo.bar?.baz.buzz
    51 51 │   
    52 52 │   // case where for some reason there is a doubled up expression
  

```

```
yoda_expressions_logicalAndCases5.js:53:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    52 │ // case where for some reason there is a doubled up expression
  > 53 │ undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz && foo.bar.baz.buzz
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    54 │ undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz && foo.bar.baz.buzz
    55 │ 
  
  i Unsafe fix: Change to an optional chain.
  
    51 51 │   
    52 52 │   // case where for some reason there is a doubled up expression
    53    │ - undefined·!=·foo·&&·undefined·!=·foo.bar·&&·undefined·!=·foo.bar.baz·&&·undefined·!=·foo.bar.baz·&&·foo.bar.baz.buzz
       53 │ + foo?.bar?.baz?.buzz
    54 54 │   undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz && foo.bar.baz.buzz
    55 55 │   
  

```

```
yoda_expressions_logicalAndCases5.js:54:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    52 │ // case where for some reason there is a doubled up expression
    53 │ undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz && foo.bar.baz.buzz
  > 54 │ undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz && foo.bar.baz.buzz
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    55 │ 
    56 │ // chained members with element access
  
  i Unsafe fix: Change to an optional chain.
  
    52 52 │   // case where for some reason there is a doubled up expression
    53 53 │   undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz && foo.bar.baz.buzz
    54    │ - undefined·!=·foo.bar·&&·undefined·!=·foo.bar.baz·&&·undefined·!=·foo.bar.baz·&&·foo.bar.baz.buzz
       54 │ + foo.bar?.baz?.buzz
    55 55 │   
    56 56 │   // chained members with element access
  

```

```
yoda_expressions_logicalAndCases5.js:57:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    56 │ // chained members with element access
  > 57 │ undefined != foo && undefined != foo[bar] && undefined != foo[bar].baz && foo[bar].baz.buzz
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    58 │ 
    59 │ // case with a jump (i.e. a non-nullish prop)
  
  i Unsafe fix: Change to an optional chain.
  
    55 55 │   
    56 56 │   // chained members with element access
    57    │ - undefined·!=·foo·&&·undefined·!=·foo[bar]·&&·undefined·!=·foo[bar].baz·&&·foo[bar].baz.buzz
       57 │ + foo?.[bar]?.baz?.buzz
    58 58 │   
    59 59 │   // case with a jump (i.e. a non-nullish prop)
  

```

```
yoda_expressions_logicalAndCases5.js:60:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    59 │ // case with a jump (i.e. a non-nullish prop)
  > 60 │ undefined != foo && undefined != foo[bar].baz && foo[bar].baz.buzz
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    61 │ 
    62 │ // chained calls
  
  i Unsafe fix: Change to an optional chain.
  
    58 58 │   
    59 59 │   // case with a jump (i.e. a non-nullish prop)
    60    │ - undefined·!=·foo·&&·undefined·!=·foo[bar].baz·&&·foo[bar].baz.buzz
       60 │ + foo?.[bar].baz?.buzz
    61 61 │   
    62 62 │   // chained calls
  

```

```
yoda_expressions_logicalAndCases5.js:63:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    62 │ // chained calls
  > 63 │ undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    64 │ undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz.buzz && foo.bar.baz.buzz()
    65 │ undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz.buzz && foo.bar.baz.buzz()
  
  i Unsafe fix: Change to an optional chain.
  
    61 61 │   
    62 62 │   // chained calls
    63    │ - undefined·!=·foo·&&·undefined·!=·foo.bar·&&·undefined·!=·foo.bar.baz·&&·foo.bar.baz.buzz()
       63 │ + foo?.bar?.baz?.buzz()
    64 64 │   undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz.buzz && foo.bar.baz.buzz()
    65 65 │   undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz.buzz && foo.bar.baz.buzz()
  

```

```
yoda_expressions_logicalAndCases5.js:64:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    62 │ // chained calls
    63 │ undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz()
  > 64 │ undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz.buzz && foo.bar.baz.buzz()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    65 │ undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz.buzz && foo.bar.baz.buzz()
    66 │ 
  
  i Unsafe fix: Change to an optional chain.
  
    62 62 │   // chained calls
    63 63 │   undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz()
    64    │ - undefined·!=·foo·&&·undefined·!=·foo.bar·&&·undefined·!=·foo.bar.baz·&&·undefined·!=·foo.bar.baz.buzz·&&·foo.bar.baz.buzz()
       64 │ + foo?.bar?.baz?.buzz?.()
    65 65 │   undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz.buzz && foo.bar.baz.buzz()
    66 66 │   
  

```

```
yoda_expressions_logicalAndCases5.js:65:1 lint/complexity/useOptionalChain  FIXABLE  ━━━━━━━━━━━━━━━

  ! Change to an optional chain.
  
    63 │ undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz()
    64 │ undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz.buzz && foo.bar.baz.buzz()
  > 65 │ undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz.buzz && foo.bar.baz.buzz()
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    66 │ 
  
  i Unsafe fix: Change to an optional chain.
  
    63 63 │   undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && foo.bar.baz.buzz()
    64 64 │   undefined != foo && undefined != foo.bar && undefined != foo.bar.baz && undefined != foo.bar.baz.buzz && foo.bar.baz.buzz()
    65    │ - undefined·!=·foo.bar·&&·undefined·!=·foo.bar.baz·&&·undefined·!=·foo.bar.baz.buzz·&&·foo.bar.baz.buzz()
       65 │ + foo.bar?.baz?.buzz?.()
    66 66 │   
  

```
