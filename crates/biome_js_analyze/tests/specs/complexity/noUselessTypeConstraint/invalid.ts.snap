---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.ts
---
# Input
```ts
interface FooAny1<T extends any> {
	field: T;
}

interface FooAny2<T extends unknown> {
	field: T;
}

class BazAny<T extends any> {
  quxAny<U extends any>() {}
}

const QuuxAny = <T extends any>() => {};

function QuuzAny<T extends any>() {}

function commented<T /*a*/ extends /*b*/ any /*c*/>() {}

const A = <T extends unknown>() => {}
const B = <T extends unknown = unknown>() => {}

```

# Diagnostics
```
invalid.ts:1:21 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
  > 1 │ interface FooAny1<T extends any> {
      │                     ^^^^^^^^^^^
    2 │ 	field: T;
    3 │ }
  
  i All types are subtypes of any and unknown.
  
  i Safe fix: Remove the constraint.
  
    1 │ interface·FooAny1<T·extends·any>·{
      │                    ------------   

```

```
invalid.ts:5:21 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
    3 │ }
    4 │ 
  > 5 │ interface FooAny2<T extends unknown> {
      │                     ^^^^^^^^^^^^^^^
    6 │ 	field: T;
    7 │ }
  
  i All types are subtypes of any and unknown.
  
  i Safe fix: Remove the constraint.
  
    5 │ interface·FooAny2<T·extends·unknown>·{
      │                    ----------------   

```

```
invalid.ts:9:16 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
     7 │ }
     8 │ 
   > 9 │ class BazAny<T extends any> {
       │                ^^^^^^^^^^^
    10 │   quxAny<U extends any>() {}
    11 │ }
  
  i All types are subtypes of any and unknown.
  
  i Safe fix: Remove the constraint.
  
    9 │ class·BazAny<T·extends·any>·{
      │               ------------   

```

```
invalid.ts:10:12 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
     9 │ class BazAny<T extends any> {
  > 10 │   quxAny<U extends any>() {}
       │            ^^^^^^^^^^^
    11 │ }
    12 │ 
  
  i All types are subtypes of any and unknown.
  
  i Safe fix: Remove the constraint.
  
    10 │ ··quxAny<U·extends·any>()·{}
       │           ------------      

```

```
invalid.ts:13:20 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
    11 │ }
    12 │ 
  > 13 │ const QuuxAny = <T extends any>() => {};
       │                    ^^^^^^^^^^^
    14 │ 
    15 │ function QuuzAny<T extends any>() {}
  
  i All types are subtypes of any and unknown.
  
  i Safe fix: Remove the constraint.
  
    13 │ const·QuuxAny·=·<T·extends·any>()·=>·{};
       │                   ------------          

```

```
invalid.ts:15:20 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
    13 │ const QuuxAny = <T extends any>() => {};
    14 │ 
  > 15 │ function QuuzAny<T extends any>() {}
       │                    ^^^^^^^^^^^
    16 │ 
    17 │ function commented<T /*a*/ extends /*b*/ any /*c*/>() {}
  
  i All types are subtypes of any and unknown.
  
  i Safe fix: Remove the constraint.
  
    15 │ function·QuuzAny<T·extends·any>()·{}
       │                   ------------      

```

```
invalid.ts:17:28 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
    15 │ function QuuzAny<T extends any>() {}
    16 │ 
  > 17 │ function commented<T /*a*/ extends /*b*/ any /*c*/>() {}
       │                            ^^^^^^^^^^^^^^^^^
    18 │ 
    19 │ const A = <T extends unknown>() => {}
  
  i All types are subtypes of any and unknown.
  
  i Safe fix: Remove the constraint.
  
    17 │ function·commented<T·/*a*/·extends·/*b*/·any·/*c*/>()·{}
       │                           ------------------------      

```

```
invalid.ts:19:14 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
    17 │ function commented<T /*a*/ extends /*b*/ any /*c*/>() {}
    18 │ 
  > 19 │ const A = <T extends unknown>() => {}
       │              ^^^^^^^^^^^^^^^
    20 │ const B = <T extends unknown = unknown>() => {}
    21 │ 
  
  i All types are subtypes of any and unknown.
  
  i Safe fix: Remove the constraint.
  
    19 │ const·A·=·<T·extends·unknown>()·=>·{}
       │             ----------------         

```

```
invalid.ts:20:14 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
    19 │ const A = <T extends unknown>() => {}
  > 20 │ const B = <T extends unknown = unknown>() => {}
       │              ^^^^^^^^^^^^^^^
    21 │ 
  
  i All types are subtypes of any and unknown.
  
  i Safe fix: Remove the constraint.
  
    20 │ const·B·=·<T·extends·unknown·=·unknown>()·=>·{}
       │              ----------------                  

```


