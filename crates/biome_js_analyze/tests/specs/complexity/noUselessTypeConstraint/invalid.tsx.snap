---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.tsx
---
# Input
```tsx
const A = <T extends unknown>() => {}
const B = <T extends unknown = unknown>() => {}
const A = <T extends unknown, U>() => {}
```

# Diagnostics
```
invalid.tsx:1:14 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
  > 1 │ const A = <T extends unknown>() => {}
      │              ^^^^^^^^^^^^^^^
    2 │ const B = <T extends unknown = unknown>() => {}
    3 │ const A = <T extends unknown, U>() => {}
  
  i All types are subtypes of any and unknown.
  
  i Safe fix: Remove the constraint.
  
    1   │ - const·A·=·<T·extends·unknown>()·=>·{}
      1 │ + const·A·=·<T,>()·=>·{}
    2 2 │   const B = <T extends unknown = unknown>() => {}
    3 3 │   const A = <T extends unknown, U>() => {}
  

```

```
invalid.tsx:2:14 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
    1 │ const A = <T extends unknown>() => {}
  > 2 │ const B = <T extends unknown = unknown>() => {}
      │              ^^^^^^^^^^^^^^^
    3 │ const A = <T extends unknown, U>() => {}
  
  i All types are subtypes of any and unknown.
  
  i Safe fix: Remove the constraint.
  
    2 │ const·B·=·<T·extends·unknown·=·unknown>()·=>·{}
      │              ----------------                  

```

```
invalid.tsx:3:14 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
    1 │ const A = <T extends unknown>() => {}
    2 │ const B = <T extends unknown = unknown>() => {}
  > 3 │ const A = <T extends unknown, U>() => {}
      │              ^^^^^^^^^^^^^^^
  
  i All types are subtypes of any and unknown.
  
  i Safe fix: Remove the constraint.
  
    3 │ const·A·=·<T·extends·unknown,·U>()·=>·{}
      │             ----------------            

```


