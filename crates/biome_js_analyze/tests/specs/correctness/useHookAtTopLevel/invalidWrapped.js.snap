---
source: crates/biome_js_analyze/tests/spec_tests.rs
assertion_line: 134
expression: invalidWrapped.js
---
# Input
```js
const TestMemo = memo(
    forwardRef((props, ref) => {
        useEffect(() => {
            const [test, setTest] = useState(1);
        }, []);
        return <div ref={ref}>test</div>;
    })
);

const TestForwardRef = forwardRef((props, ref) => {
    useEffect(() => {
        const [test, setTest] = useState(1);
    }, []);
    return <div ref={ref}>test</div>;
});

```

# Diagnostics
```
invalidWrapped.js:4:37 lint/correctness/useHookAtTopLevel ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This hook is being called from a nested function, but all hooks must be called unconditionally from the top-level component.
  
    2 │     forwardRef((props, ref) => {
    3 │         useEffect(() => {
  > 4 │             const [test, setTest] = useState(1);
      │                                     ^^^^^^^^
    5 │         }, []);
    6 │         return <div ref={ref}>test</div>;
  
  i For React to preserve state between calls, hooks needs to be called unconditionally and always in the same order.
  
  i See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level
  

```

```
invalidWrapped.js:12:33 lint/correctness/useHookAtTopLevel ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This hook is being called from a nested function, but all hooks must be called unconditionally from the top-level component.
  
    10 │ const TestForwardRef = forwardRef((props, ref) => {
    11 │     useEffect(() => {
  > 12 │         const [test, setTest] = useState(1);
       │                                 ^^^^^^^^
    13 │     }, []);
    14 │     return <div ref={ref}>test</div>;
  
  i For React to preserve state between calls, hooks needs to be called unconditionally and always in the same order.
  
  i See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level
  

```
