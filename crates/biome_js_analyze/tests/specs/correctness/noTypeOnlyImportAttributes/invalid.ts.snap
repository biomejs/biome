---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.ts
---
# Input
```ts
import type A from "" with { type: "json" };
import type * as B from "" with { type: "json" };
import type { C } from "" with { type: "json" };
import { type D } from "" with { type: "json" };
import { E, type F } from "" with { type: "json" };

export type { A } from "" with { type: "json" };
export type * as B from "" with { type: "json" };
export { E, type F } from "" with { type: "json" };
```

# Diagnostics
```
invalid.ts:1:23 syntax/correctness/noTypeOnlyImportAttributes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Import attributes cannot be used with a type-only import.
  
  > 1 │ import type A from "" with { type: "json" };
      │                       ^^^^^^^^^^^^^^^^^^^^^
    2 │ import type * as B from "" with { type: "json" };
    3 │ import type { C } from "" with { type: "json" };
  
  i The type-only import is defined here.
  
  > 1 │ import type A from "" with { type: "json" };
      │        ^^^^
    2 │ import type * as B from "" with { type: "json" };
    3 │ import type { C } from "" with { type: "json" };
  

```

```
invalid.ts:2:28 syntax/correctness/noTypeOnlyImportAttributes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Import attributes cannot be used with a type-only import.
  
    1 │ import type A from "" with { type: "json" };
  > 2 │ import type * as B from "" with { type: "json" };
      │                            ^^^^^^^^^^^^^^^^^^^^^
    3 │ import type { C } from "" with { type: "json" };
    4 │ import { type D } from "" with { type: "json" };
  
  i The type-only import is defined here.
  
    1 │ import type A from "" with { type: "json" };
  > 2 │ import type * as B from "" with { type: "json" };
      │        ^^^^
    3 │ import type { C } from "" with { type: "json" };
    4 │ import { type D } from "" with { type: "json" };
  

```

```
invalid.ts:3:27 syntax/correctness/noTypeOnlyImportAttributes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Import attributes cannot be used with a type-only import.
  
    1 │ import type A from "" with { type: "json" };
    2 │ import type * as B from "" with { type: "json" };
  > 3 │ import type { C } from "" with { type: "json" };
      │                           ^^^^^^^^^^^^^^^^^^^^^
    4 │ import { type D } from "" with { type: "json" };
    5 │ import { E, type F } from "" with { type: "json" };
  
  i The type-only import is defined here.
  
    1 │ import type A from "" with { type: "json" };
    2 │ import type * as B from "" with { type: "json" };
  > 3 │ import type { C } from "" with { type: "json" };
      │        ^^^^
    4 │ import { type D } from "" with { type: "json" };
    5 │ import { E, type F } from "" with { type: "json" };
  

```

```
invalid.ts:4:27 syntax/correctness/noTypeOnlyImportAttributes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Import attributes cannot be used with a type-only import.
  
    2 │ import type * as B from "" with { type: "json" };
    3 │ import type { C } from "" with { type: "json" };
  > 4 │ import { type D } from "" with { type: "json" };
      │                           ^^^^^^^^^^^^^^^^^^^^^
    5 │ import { E, type F } from "" with { type: "json" };
    6 │ 
  
  i The type-only import is defined here.
  
    2 │ import type * as B from "" with { type: "json" };
    3 │ import type { C } from "" with { type: "json" };
  > 4 │ import { type D } from "" with { type: "json" };
      │          ^^^^
    5 │ import { E, type F } from "" with { type: "json" };
    6 │ 
  

```

```
invalid.ts:5:30 syntax/correctness/noTypeOnlyImportAttributes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Import attributes cannot be used with a type-only import.
  
    3 │ import type { C } from "" with { type: "json" };
    4 │ import { type D } from "" with { type: "json" };
  > 5 │ import { E, type F } from "" with { type: "json" };
      │                              ^^^^^^^^^^^^^^^^^^^^^
    6 │ 
    7 │ export type { A } from "" with { type: "json" };
  
  i The type-only import is defined here.
  
    3 │ import type { C } from "" with { type: "json" };
    4 │ import { type D } from "" with { type: "json" };
  > 5 │ import { E, type F } from "" with { type: "json" };
      │             ^^^^
    6 │ 
    7 │ export type { A } from "" with { type: "json" };
  

```

```
invalid.ts:7:27 syntax/correctness/noTypeOnlyImportAttributes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Import attributes cannot be used with a type-only export.
  
    5 │ import { E, type F } from "" with { type: "json" };
    6 │ 
  > 7 │ export type { A } from "" with { type: "json" };
      │                           ^^^^^^^^^^^^^^^^^^^^^
    8 │ export type * as B from "" with { type: "json" };
    9 │ export { E, type F } from "" with { type: "json" };
  
  i The type-only export is defined here.
  
    5 │ import { E, type F } from "" with { type: "json" };
    6 │ 
  > 7 │ export type { A } from "" with { type: "json" };
      │        ^^^^
    8 │ export type * as B from "" with { type: "json" };
    9 │ export { E, type F } from "" with { type: "json" };
  

```

```
invalid.ts:8:28 syntax/correctness/noTypeOnlyImportAttributes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Import attributes cannot be used with a type-only export.
  
    7 │ export type { A } from "" with { type: "json" };
  > 8 │ export type * as B from "" with { type: "json" };
      │                            ^^^^^^^^^^^^^^^^^^^^^
    9 │ export { E, type F } from "" with { type: "json" };
  
  i The type-only export is defined here.
  
    7 │ export type { A } from "" with { type: "json" };
  > 8 │ export type * as B from "" with { type: "json" };
      │        ^^^^
    9 │ export { E, type F } from "" with { type: "json" };
  

```

```
invalid.ts:9:30 syntax/correctness/noTypeOnlyImportAttributes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Import attributes cannot be used with a type-only export.
  
    7 │ export type { A } from "" with { type: "json" };
    8 │ export type * as B from "" with { type: "json" };
  > 9 │ export { E, type F } from "" with { type: "json" };
      │                              ^^^^^^^^^^^^^^^^^^^^^
  
  i The type-only export is defined here.
  
    7 │ export type { A } from "" with { type: "json" };
    8 │ export type * as B from "" with { type: "json" };
  > 9 │ export { E, type F } from "" with { type: "json" };
      │             ^^^^
  

```
