---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.jsx
---
# Input
```jsx
import React from "react";

[<Hello />, <Hello />, <Hello />];

[...[<Hello />, <Hello />], <Hello />];

[<Hello />, xyz ? <Hello />: <Hello />, <Hello />];

data.map(x => <Hello>{x}</Hello>);

data.map(x => <>{x}</>);

data.forEach(x => data1.push(<>{x}</>));

Array.from([1, 2, 3], (x) => <Hello>{x}</Hello>);

Array.from([1, 2, 3], (x) => {
	return <Hello>{x}</Hello>
});

[React.createElement("h1"), React.createElement("h1"), React.createElement("h1")];

data.map(c => React.createElement("h1"));

React.Children.map(c => React.cloneElement(c));

(<h1>{data.map(x => <h1>{x}</h1>)}</h1>)

(<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)

(<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)

(<h1>{data.map(c => <h1></h1>)}</h1>)

(<h1>{data.map(c => xyz)}</h1>)

(<h1>{data.map(c => (<h1></h1>))}</h1>)

(<h1>{data.map(c => {return (<h1></h1>)})}</h1>)

[].map((item) => {
	return item.condition ? <div /> : <div>foo</div>;
});

[].map((item) => {
	const x = 5;
	const div = <div>{x}</div>;
	return div;
});

[].map(function(item) {
	const x = 5;
	const div = <div>{x}</div>;
	return div;
});

data.map((item) => <React.Fragment><p>{item}</p></React.Fragment>)

data.map((x) => {
	if (x.type === 'string') {
		return <div>{x.value}</div> // no key
	}
	return <div>{x.value}</div> // no key
})

data.map((x) => {
	if (x.type === 'string') {
		return <div>{x.value}</div> // no key
	}
	return <div key={x.value}>{x.value}</div>
})

data.map((x) => {
	if (x.type === 'string') {
		return <div>{x.value}</div> // no key
	} else {
		return <div>{x.value}</div> // no key
	}
})

data.map((x) => {
	switch (x.type) {
		case 'string':
			return <div>{x.value}</div> // no key
		case 'number':
			return <div>{x.value}</div> // no key
		default:
			return <div key={x.value}>{x.value}</div>
	}
})

data.map((x) => {
	switch (x.type) {
		case 'string':
			return <div>{x.value}</div> // no key
		case 'number':
			return <div>{x.value}</div> // no key
		default:
			return <div>{x.value}</div> // no key
	}
})

```

# Diagnostics
```
invalid.jsx:3:2 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    1 │ import React from "react";
    2 │ 
  > 3 │ [<Hello />, <Hello />, <Hello />];
      │  ^^^^^^^^^
    4 │ 
    5 │ [...[<Hello />, <Hello />], <Hello />];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:3:13 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    1 │ import React from "react";
    2 │ 
  > 3 │ [<Hello />, <Hello />, <Hello />];
      │             ^^^^^^^^^
    4 │ 
    5 │ [...[<Hello />, <Hello />], <Hello />];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:3:24 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    1 │ import React from "react";
    2 │ 
  > 3 │ [<Hello />, <Hello />, <Hello />];
      │                        ^^^^^^^^^
    4 │ 
    5 │ [...[<Hello />, <Hello />], <Hello />];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:5:29 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    3 │ [<Hello />, <Hello />, <Hello />];
    4 │ 
  > 5 │ [...[<Hello />, <Hello />], <Hello />];
      │                             ^^^^^^^^^
    6 │ 
    7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:5:6 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    3 │ [<Hello />, <Hello />, <Hello />];
    4 │ 
  > 5 │ [...[<Hello />, <Hello />], <Hello />];
      │      ^^^^^^^^^
    6 │ 
    7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:5:17 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    3 │ [<Hello />, <Hello />, <Hello />];
    4 │ 
  > 5 │ [...[<Hello />, <Hello />], <Hello />];
      │                 ^^^^^^^^^
    6 │ 
    7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:7:2 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    5 │ [...[<Hello />, <Hello />], <Hello />];
    6 │ 
  > 7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
      │  ^^^^^^^^^
    8 │ 
    9 │ data.map(x => <Hello>{x}</Hello>);
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:7:19 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    5 │ [...[<Hello />, <Hello />], <Hello />];
    6 │ 
  > 7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
      │                   ^^^^^^^^^
    8 │ 
    9 │ data.map(x => <Hello>{x}</Hello>);
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:7:30 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    5 │ [...[<Hello />, <Hello />], <Hello />];
    6 │ 
  > 7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
      │                              ^^^^^^^^^
    8 │ 
    9 │ data.map(x => <Hello>{x}</Hello>);
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:7:41 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    5 │ [...[<Hello />, <Hello />], <Hello />];
    6 │ 
  > 7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
      │                                         ^^^^^^^^^
    8 │ 
    9 │ data.map(x => <Hello>{x}</Hello>);
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:9:15 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
     7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
     8 │ 
   > 9 │ data.map(x => <Hello>{x}</Hello>);
       │               ^^^^^^^
    10 │ 
    11 │ data.map(x => <>{x}</>);
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:15:30 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    13 │ data.forEach(x => data1.push(<>{x}</>));
    14 │ 
  > 15 │ Array.from([1, 2, 3], (x) => <Hello>{x}</Hello>);
       │                              ^^^^^^^
    16 │ 
    17 │ Array.from([1, 2, 3], (x) => {
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:18:9 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    17 │ Array.from([1, 2, 3], (x) => {
  > 18 │ 	return <Hello>{x}</Hello>
       │ 	       ^^^^^^^
    19 │ });
    20 │ 
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:21:21 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    19 │ });
    20 │ 
  > 21 │ [React.createElement("h1"), React.createElement("h1"), React.createElement("h1")];
       │                     ^^^^^^
    22 │ 
    23 │ data.map(c => React.createElement("h1"));
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:21:48 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    19 │ });
    20 │ 
  > 21 │ [React.createElement("h1"), React.createElement("h1"), React.createElement("h1")];
       │                                                ^^^^^^
    22 │ 
    23 │ data.map(c => React.createElement("h1"));
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:21:75 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    19 │ });
    20 │ 
  > 21 │ [React.createElement("h1"), React.createElement("h1"), React.createElement("h1")];
       │                                                                           ^^^^^^
    22 │ 
    23 │ data.map(c => React.createElement("h1"));
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:23:34 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    21 │ [React.createElement("h1"), React.createElement("h1"), React.createElement("h1")];
    22 │ 
  > 23 │ data.map(c => React.createElement("h1"));
       │                                  ^^^^^^
    24 │ 
    25 │ React.Children.map(c => React.cloneElement(c));
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:25:43 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    23 │ data.map(c => React.createElement("h1"));
    24 │ 
  > 25 │ React.Children.map(c => React.cloneElement(c));
       │                                           ^^^
    26 │ 
    27 │ (<h1>{data.map(x => <h1>{x}</h1>)}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:42:26 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    41 │ [].map((item) => {
  > 42 │ 	return item.condition ? <div /> : <div>foo</div>;
       │ 	                        ^^^^^^^
    43 │ });
    44 │ 
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:42:36 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    41 │ [].map((item) => {
  > 42 │ 	return item.condition ? <div /> : <div>foo</div>;
       │ 	                                  ^^^^^
    43 │ });
    44 │ 
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:27:21 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    25 │ React.Children.map(c => React.cloneElement(c));
    26 │ 
  > 27 │ (<h1>{data.map(x => <h1>{x}</h1>)}</h1>)
       │                     ^^^^
    28 │ 
    29 │ (<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:29:8 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    27 │ (<h1>{data.map(x => <h1>{x}</h1>)}</h1>)
    28 │ 
  > 29 │ (<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)
       │        ^^^^
    30 │ 
    31 │ (<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:29:19 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    27 │ (<h1>{data.map(x => <h1>{x}</h1>)}</h1>)
    28 │ 
  > 29 │ (<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)
       │                   ^^^^
    30 │ 
    31 │ (<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:29:30 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    27 │ (<h1>{data.map(x => <h1>{x}</h1>)}</h1>)
    28 │ 
  > 29 │ (<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)
       │                              ^^^^
    30 │ 
    31 │ (<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:31:8 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    29 │ (<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)
    30 │ 
  > 31 │ (<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)
       │        ^^^^
    32 │ 
    33 │ (<h1>{data.map(c => <h1></h1>)}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:31:29 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    29 │ (<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)
    30 │ 
  > 31 │ (<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)
       │                             ^^^^
    32 │ 
    33 │ (<h1>{data.map(c => <h1></h1>)}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:33:21 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    31 │ (<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)
    32 │ 
  > 33 │ (<h1>{data.map(c => <h1></h1>)}</h1>)
       │                     ^^^^
    34 │ 
    35 │ (<h1>{data.map(c => xyz)}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:37:22 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    35 │ (<h1>{data.map(c => xyz)}</h1>)
    36 │ 
  > 37 │ (<h1>{data.map(c => (<h1></h1>))}</h1>)
       │                      ^^^^
    38 │ 
    39 │ (<h1>{data.map(c => {return (<h1></h1>)})}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:39:30 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    37 │ (<h1>{data.map(c => (<h1></h1>))}</h1>)
    38 │ 
  > 39 │ (<h1>{data.map(c => {return (<h1></h1>)})}</h1>)
       │                              ^^^^
    40 │ 
    41 │ [].map((item) => {
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:47:14 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    45 │ [].map((item) => {
    46 │ 	const x = 5;
  > 47 │ 	const div = <div>{x}</div>;
       │ 	            ^^^^^
    48 │ 	return div;
    49 │ });
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:53:14 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    51 │ [].map(function(item) {
    52 │ 	const x = 5;
  > 53 │ 	const div = <div>{x}</div>;
       │ 	            ^^^^^
    54 │ 	return div;
    55 │ });
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:57:20 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    55 │ });
    56 │ 
  > 57 │ data.map((item) => <React.Fragment><p>{item}</p></React.Fragment>)
       │                    ^^^^^^^^^^^^^^^^
    58 │ 
    59 │ data.map((x) => {
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:61:10 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    59 │ data.map((x) => {
    60 │ 	if (x.type === 'string') {
  > 61 │ 		return <div>{x.value}</div> // no key
       │ 		       ^^^^^
    62 │ 	}
    63 │ 	return <div>{x.value}</div> // no key
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:63:9 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    61 │ 		return <div>{x.value}</div> // no key
    62 │ 	}
  > 63 │ 	return <div>{x.value}</div> // no key
       │ 	       ^^^^^
    64 │ })
    65 │ 
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:75:10 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    73 │ data.map((x) => {
    74 │ 	if (x.type === 'string') {
  > 75 │ 		return <div>{x.value}</div> // no key
       │ 		       ^^^^^
    76 │ 	} else {
    77 │ 		return <div>{x.value}</div> // no key
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:77:10 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    75 │ 		return <div>{x.value}</div> // no key
    76 │ 	} else {
  > 77 │ 		return <div>{x.value}</div> // no key
       │ 		       ^^^^^
    78 │ 	}
    79 │ })
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:84:11 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    82 │ 	switch (x.type) {
    83 │ 		case 'string':
  > 84 │ 			return <div>{x.value}</div> // no key
       │ 			       ^^^^^
    85 │ 		case 'number':
    86 │ 			return <div>{x.value}</div> // no key
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:86:11 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    84 │ 			return <div>{x.value}</div> // no key
    85 │ 		case 'number':
  > 86 │ 			return <div>{x.value}</div> // no key
       │ 			       ^^^^^
    87 │ 		default:
    88 │ 			return <div key={x.value}>{x.value}</div>
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:95:11 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    93 │ 	switch (x.type) {
    94 │ 		case 'string':
  > 95 │ 			return <div>{x.value}</div> // no key
       │ 			       ^^^^^
    96 │ 		case 'number':
    97 │ 			return <div>{x.value}</div> // no key
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:97:11 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
    95 │ 			return <div>{x.value}</div> // no key
    96 │ 		case 'number':
  > 97 │ 			return <div>{x.value}</div> // no key
       │ 			       ^^^^^
    98 │ 		default:
    99 │ 			return <div>{x.value}</div> // no key
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:99:11 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing key property for this element in iterable.
  
     97 │ 			return <div>{x.value}</div> // no key
     98 │ 		default:
   > 99 │ 			return <div>{x.value}</div> // no key
        │ 			       ^^^^^
    100 │ 	}
    101 │ })
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```
