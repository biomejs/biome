---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.jsx
---
# Input
```jsx
import React from "react";

[<Hello />, <Hello />, <Hello />];

[...[<Hello />, <Hello />], <Hello />];

[<Hello />, xyz ? <Hello />: <Hello />, <Hello />];

[<></>, <></>, <></>];

data.map(x => <Hello>{x}</Hello>);

data.map(x => <>{x}</>);

data.forEach(x => data1.push(<>{x}</>));

Array.from([1, 2, 3], (x) => <Hello>{x}</Hello>);

Array.from([1, 2, 3], (x) => {
	return <Hello>{x}</Hello>
});

[React.createElement("h1"), React.createElement("h1"), React.createElement("h1")];

data.map(c => React.createElement("h1"));

React.Children.map(c => React.cloneElement(c));

(<h1>{data.map(x => <h1>{x}</h1>)}</h1>)

(<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)

(<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)

(<h1>{data.map(c => <h1></h1>)}</h1>)

(<h1>{data.map(c => xyz)}</h1>)

(<h1>{data.map(c => (<h1></h1>))}</h1>)

(<h1>{data.map(c => {return (<h1></h1>)})}</h1>)

[].map((item) => {
	return item.condition ? <div /> : <div>foo</div>;
});

[].map((item) => {
	return <><div /><div>{item}</div></>;
});

[].map((item) => {
	return <>{item.condition ? <div /> : <div>foo</div>}</>;
});

[].map((item) => {
	const x = 5;
	const div = <div>{x}</div>;
	return div;
});

[].map(function(item) {
	const x = 5;
	const div = <div>{x}</div>;
	return div;
});

```

# Diagnostics
```
invalid.jsx:3:2 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    1 │ import React from "react";
    2 │ 
  > 3 │ [<Hello />, <Hello />, <Hello />];
      │  ^^^^^^^^^
    4 │ 
    5 │ [...[<Hello />, <Hello />], <Hello />];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:3:13 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    1 │ import React from "react";
    2 │ 
  > 3 │ [<Hello />, <Hello />, <Hello />];
      │             ^^^^^^^^^
    4 │ 
    5 │ [...[<Hello />, <Hello />], <Hello />];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:3:24 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    1 │ import React from "react";
    2 │ 
  > 3 │ [<Hello />, <Hello />, <Hello />];
      │                        ^^^^^^^^^
    4 │ 
    5 │ [...[<Hello />, <Hello />], <Hello />];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:5:29 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    3 │ [<Hello />, <Hello />, <Hello />];
    4 │ 
  > 5 │ [...[<Hello />, <Hello />], <Hello />];
      │                             ^^^^^^^^^
    6 │ 
    7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:5:6 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    3 │ [<Hello />, <Hello />, <Hello />];
    4 │ 
  > 5 │ [...[<Hello />, <Hello />], <Hello />];
      │      ^^^^^^^^^
    6 │ 
    7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:5:17 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    3 │ [<Hello />, <Hello />, <Hello />];
    4 │ 
  > 5 │ [...[<Hello />, <Hello />], <Hello />];
      │                 ^^^^^^^^^
    6 │ 
    7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:7:2 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    5 │ [...[<Hello />, <Hello />], <Hello />];
    6 │ 
  > 7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
      │  ^^^^^^^^^
    8 │ 
    9 │ [<></>, <></>, <></>];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:7:19 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    5 │ [...[<Hello />, <Hello />], <Hello />];
    6 │ 
  > 7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
      │                   ^^^^^^^^^
    8 │ 
    9 │ [<></>, <></>, <></>];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:7:30 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    5 │ [...[<Hello />, <Hello />], <Hello />];
    6 │ 
  > 7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
      │                              ^^^^^^^^^
    8 │ 
    9 │ [<></>, <></>, <></>];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:7:41 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    5 │ [...[<Hello />, <Hello />], <Hello />];
    6 │ 
  > 7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
      │                                         ^^^^^^^^^
    8 │ 
    9 │ [<></>, <></>, <></>];
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:9:2 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
     7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
     8 │ 
   > 9 │ [<></>, <></>, <></>];
       │  ^^^^^
    10 │ 
    11 │ data.map(x => <Hello>{x}</Hello>);
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:9:9 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
     7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
     8 │ 
   > 9 │ [<></>, <></>, <></>];
       │         ^^^^^
    10 │ 
    11 │ data.map(x => <Hello>{x}</Hello>);
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:9:16 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
     7 │ [<Hello />, xyz ? <Hello />: <Hello />, <Hello />];
     8 │ 
   > 9 │ [<></>, <></>, <></>];
       │                ^^^^^
    10 │ 
    11 │ data.map(x => <Hello>{x}</Hello>);
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:11:15 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
     9 │ [<></>, <></>, <></>];
    10 │ 
  > 11 │ data.map(x => <Hello>{x}</Hello>);
       │               ^^^^^^^
    12 │ 
    13 │ data.map(x => <>{x}</>);
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:13:15 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    11 │ data.map(x => <Hello>{x}</Hello>);
    12 │ 
  > 13 │ data.map(x => <>{x}</>);
       │               ^^^^^^^^
    14 │ 
    15 │ data.forEach(x => data1.push(<>{x}</>));
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:17:30 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    15 │ data.forEach(x => data1.push(<>{x}</>));
    16 │ 
  > 17 │ Array.from([1, 2, 3], (x) => <Hello>{x}</Hello>);
       │                              ^^^^^^^
    18 │ 
    19 │ Array.from([1, 2, 3], (x) => {
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:20:9 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    19 │ Array.from([1, 2, 3], (x) => {
  > 20 │ 	return <Hello>{x}</Hello>
       │ 	       ^^^^^^^
    21 │ });
    22 │ 
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:23:21 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    21 │ });
    22 │ 
  > 23 │ [React.createElement("h1"), React.createElement("h1"), React.createElement("h1")];
       │                     ^^^^^^
    24 │ 
    25 │ data.map(c => React.createElement("h1"));
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:23:48 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    21 │ });
    22 │ 
  > 23 │ [React.createElement("h1"), React.createElement("h1"), React.createElement("h1")];
       │                                                ^^^^^^
    24 │ 
    25 │ data.map(c => React.createElement("h1"));
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:23:75 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    21 │ });
    22 │ 
  > 23 │ [React.createElement("h1"), React.createElement("h1"), React.createElement("h1")];
       │                                                                           ^^^^^^
    24 │ 
    25 │ data.map(c => React.createElement("h1"));
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:25:34 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    23 │ [React.createElement("h1"), React.createElement("h1"), React.createElement("h1")];
    24 │ 
  > 25 │ data.map(c => React.createElement("h1"));
       │                                  ^^^^^^
    26 │ 
    27 │ React.Children.map(c => React.cloneElement(c));
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:27:43 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    25 │ data.map(c => React.createElement("h1"));
    26 │ 
  > 27 │ React.Children.map(c => React.cloneElement(c));
       │                                           ^^^
    28 │ 
    29 │ (<h1>{data.map(x => <h1>{x}</h1>)}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:44:26 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    43 │ [].map((item) => {
  > 44 │ 	return item.condition ? <div /> : <div>foo</div>;
       │ 	                        ^^^^^^^
    45 │ });
    46 │ 
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:44:36 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    43 │ [].map((item) => {
  > 44 │ 	return item.condition ? <div /> : <div>foo</div>;
       │ 	                                  ^^^^^
    45 │ });
    46 │ 
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:29:21 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    27 │ React.Children.map(c => React.cloneElement(c));
    28 │ 
  > 29 │ (<h1>{data.map(x => <h1>{x}</h1>)}</h1>)
       │                     ^^^^
    30 │ 
    31 │ (<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:31:8 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    29 │ (<h1>{data.map(x => <h1>{x}</h1>)}</h1>)
    30 │ 
  > 31 │ (<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)
       │        ^^^^
    32 │ 
    33 │ (<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:31:19 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    29 │ (<h1>{data.map(x => <h1>{x}</h1>)}</h1>)
    30 │ 
  > 31 │ (<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)
       │                   ^^^^
    32 │ 
    33 │ (<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:31:30 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    29 │ (<h1>{data.map(x => <h1>{x}</h1>)}</h1>)
    30 │ 
  > 31 │ (<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)
       │                              ^^^^
    32 │ 
    33 │ (<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:33:8 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    31 │ (<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)
    32 │ 
  > 33 │ (<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)
       │        ^^^^
    34 │ 
    35 │ (<h1>{data.map(c => <h1></h1>)}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:33:29 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    31 │ (<h1>{[<h1></h1>, <h1></h1>, <h1></h1>]}</h1>)
    32 │ 
  > 33 │ (<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)
       │                             ^^^^
    34 │ 
    35 │ (<h1>{data.map(c => <h1></h1>)}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:35:21 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    33 │ (<h1>{[<h1></h1>, xyz, abc? <h2></h2>: bcd]}</h1>)
    34 │ 
  > 35 │ (<h1>{data.map(c => <h1></h1>)}</h1>)
       │                     ^^^^
    36 │ 
    37 │ (<h1>{data.map(c => xyz)}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:39:22 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    37 │ (<h1>{data.map(c => xyz)}</h1>)
    38 │ 
  > 39 │ (<h1>{data.map(c => (<h1></h1>))}</h1>)
       │                      ^^^^
    40 │ 
    41 │ (<h1>{data.map(c => {return (<h1></h1>)})}</h1>)
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:41:30 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    39 │ (<h1>{data.map(c => (<h1></h1>))}</h1>)
    40 │ 
  > 41 │ (<h1>{data.map(c => {return (<h1></h1>)})}</h1>)
       │                              ^^^^
    42 │ 
    43 │ [].map((item) => {
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:48:11 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    47 │ [].map((item) => {
  > 48 │ 	return <><div /><div>{item}</div></>;
       │ 	         ^^^^^^^
    49 │ });
    50 │ 
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:48:18 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    47 │ [].map((item) => {
  > 48 │ 	return <><div /><div>{item}</div></>;
       │ 	                ^^^^^
    49 │ });
    50 │ 
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:52:29 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    51 │ [].map((item) => {
  > 52 │ 	return <>{item.condition ? <div /> : <div>foo</div>}</>;
       │ 	                           ^^^^^^^
    53 │ });
    54 │ 
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:52:39 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    51 │ [].map((item) => {
  > 52 │ 	return <>{item.condition ? <div /> : <div>foo</div>}</>;
       │ 	                                     ^^^^^
    53 │ });
    54 │ 
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:57:14 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    55 │ [].map((item) => {
    56 │ 	const x = 5;
  > 57 │ 	const div = <div>{x}</div>;
       │ 	            ^^^^^
    58 │ 	return div;
    59 │ });
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```

```
invalid.jsx:63:14 lint/correctness/useJsxKeyInIterable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing key property for this element in iterable.
  
    61 │ [].map(function(item) {
    62 │ 	const x = 5;
  > 63 │ 	const div = <div>{x}</div>;
       │ 	            ^^^^^
    64 │ 	return div;
    65 │ });
  
  i The order of the items may change, and having a key can help React identify which item was moved.
  
  i Check the React documentation. 
  

```
