---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```js
const foo = () => {
	const x = 2;
	const y = 1;
	return x + y;
};

function bar() {
	const x = 2;
	const y = 1;
	return x + y;
}

function name() {
	var x = 5;

	var x = 2;
}

function foo(
	aaa = 1,
	bbb = 2,
	ccc = 3
) {
	return aaa + bbb + ccc
}

function parent() {
	var x = 0;
	function nested() {
		var y = 0;
		x = 2;
	}
};

class foo {
	method() {
		let y = 10;
		let x = 20;
		return y + x;
	}
	constructor() {
		let y = 10;
		let x = 20;
		return y + x;
	}
}

```

# Diagnostics
```
invalid.js:1:13 lint/nursery/noExcessiveLinesPerFunction ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This function has too many lines (5). Maximum allowed is 4.
  
  > 1 │ const foo = () => {
      │             ^^^^^^^
  > 2 │ 	const x = 2;
  > 3 │ 	const y = 1;
  > 4 │ 	return x + y;
  > 5 │ };
      │ ^
    6 │ 
    7 │ function bar() {
  
  i Consider refactoring this function to split it into smaller functions.
  

```

```
invalid.js:7:1 lint/nursery/noExcessiveLinesPerFunction ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This function has too many lines (5). Maximum allowed is 4.
  
     5 │ };
     6 │ 
   > 7 │ function bar() {
       │ ^^^^^^^^^^^^^^^^
   > 8 │ 	const x = 2;
   > 9 │ 	const y = 1;
  > 10 │ 	return x + y;
  > 11 │ }
       │ ^
    12 │ 
    13 │ function name() {
  
  i Consider refactoring this function to split it into smaller functions.
  

```

```
invalid.js:13:1 lint/nursery/noExcessiveLinesPerFunction ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This function has too many lines (5). Maximum allowed is 4.
  
    11 │ }
    12 │ 
  > 13 │ function name() {
       │ ^^^^^^^^^^^^^^^^^
  > 14 │ 	var x = 5;
  > 15 │ 
  > 16 │ 	var x = 2;
  > 17 │ }
       │ ^
    18 │ 
    19 │ function foo(
  
  i Consider refactoring this function to split it into smaller functions.
  

```

```
invalid.js:19:1 lint/nursery/noExcessiveLinesPerFunction ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This function has too many lines (7). Maximum allowed is 4.
  
    17 │ }
    18 │ 
  > 19 │ function foo(
       │ ^^^^^^^^^^^^^
  > 20 │ 	aaa = 1,
        ...
  > 24 │ 	return aaa + bbb + ccc
  > 25 │ }
       │ ^
    26 │ 
    27 │ function parent() {
  
  i Consider refactoring this function to split it into smaller functions.
  

```

```
invalid.js:27:1 lint/nursery/noExcessiveLinesPerFunction ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This function has too many lines (7). Maximum allowed is 4.
  
    25 │ }
    26 │ 
  > 27 │ function parent() {
       │ ^^^^^^^^^^^^^^^^^^^
  > 28 │ 	var x = 0;
        ...
  > 32 │ 	}
  > 33 │ };
       │ ^
    34 │ 
    35 │ class foo {
  
  i Consider refactoring this function to split it into smaller functions.
  

```

```
invalid.js:36:2 lint/nursery/noExcessiveLinesPerFunction ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This function has too many lines (5). Maximum allowed is 4.
  
    35 │ class foo {
  > 36 │ 	method() {
       │ 	^^^^^^^^^^
  > 37 │ 		let y = 10;
  > 38 │ 		let x = 20;
  > 39 │ 		return y + x;
  > 40 │ 	}
       │ 	^
    41 │ 	constructor() {
    42 │ 		let y = 10;
  
  i Consider refactoring this function to split it into smaller functions.
  

```

```
invalid.js:41:2 lint/nursery/noExcessiveLinesPerFunction ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This function has too many lines (5). Maximum allowed is 4.
  
    39 │ 		return y + x;
    40 │ 	}
  > 41 │ 	constructor() {
       │ 	^^^^^^^^^^^^^^^
  > 42 │ 		let y = 10;
  > 43 │ 		let x = 20;
  > 44 │ 		return y + x;
  > 45 │ 	}
       │ 	^
    46 │ }
    47 │ 
  
  i Consider refactoring this function to split it into smaller functions.
  

```
