---
source: crates/biome_js_analyze/tests/spec_tests.rs
assertion_line: 134
expression: invalid-set-before-get.ts
---
# Input
```ts
class User {
    get name() {
        return 'John Doe';
    }
    get #age() {
        return 30;
    }
    set #age(age) {}
    set name(value) {}
}

const user = {
    get age() {
        return 30;
    },
    get name() {
        return 'John Doe';
    },
    set name(value) {},
    set age(age) {}
};

type UserType = {
    set age(age: number);
    get name(): string;
    set name(value: string);
    get age(): number;
}

interface UserInterface {
    set name(value: string);
    get age(): number;
    set age(age: number);
    get name(): string;
}

declare module 'module' {
    export class User {
        get name(): string;
        set name(value: string);
        get #age(): number;
        set #age(age: number);
    }
}

```

# Diagnostics
```
invalid-set-before-get.ts:2:9 lint/nursery/useAdjacentGetterSetter ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Getter should be defined right after the setter.
  
    1 │ class User {
  > 2 │     get name() {
      │         ^^^^
    3 │         return 'John Doe';
    4 │     }
  
  i Move this setter before the getter.
  
     7 │     }
     8 │     set #age(age) {}
   > 9 │     set name(value) {}
       │         ^^^^
    10 │ }
    11 │ 
  

```

```
invalid-set-before-get.ts:5:9 lint/nursery/useAdjacentGetterSetter ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Getter should be defined right after the setter.
  
    3 │         return 'John Doe';
    4 │     }
  > 5 │     get #age() {
      │         ^^^^
    6 │         return 30;
    7 │     }
  
  i Move this setter before the getter.
  
     6 │         return 30;
     7 │     }
   > 8 │     set #age(age) {}
       │         ^^^^
     9 │     set name(value) {}
    10 │ }
  

```

```
invalid-set-before-get.ts:13:9 lint/nursery/useAdjacentGetterSetter ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Getter should be defined right after the setter.
  
    12 │ const user = {
  > 13 │     get age() {
       │         ^^^
    14 │         return 30;
    15 │     },
  
  i Move this setter before the getter.
  
    18 │     },
    19 │     set name(value) {},
  > 20 │     set age(age) {}
       │         ^^^
    21 │ };
    22 │ 
  

```

```
invalid-set-before-get.ts:16:9 lint/nursery/useAdjacentGetterSetter ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Getter should be defined right after the setter.
  
    14 │         return 30;
    15 │     },
  > 16 │     get name() {
       │         ^^^^
    17 │         return 'John Doe';
    18 │     },
  
  i Move this setter before the getter.
  
    17 │         return 'John Doe';
    18 │     },
  > 19 │     set name(value) {},
       │         ^^^^
    20 │     set age(age) {}
    21 │ };
  

```

```
invalid-set-before-get.ts:25:9 lint/nursery/useAdjacentGetterSetter ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Getter should be defined right after the setter.
  
    23 │ type UserType = {
    24 │     set age(age: number);
  > 25 │     get name(): string;
       │         ^^^^
    26 │     set name(value: string);
    27 │     get age(): number;
  
  i Move this setter before the getter.
  
    24 │     set age(age: number);
    25 │     get name(): string;
  > 26 │     set name(value: string);
       │         ^^^^
    27 │     get age(): number;
    28 │ }
  

```

```
invalid-set-before-get.ts:27:9 lint/nursery/useAdjacentGetterSetter ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Getter should be defined right after the setter.
  
    25 │     get name(): string;
    26 │     set name(value: string);
  > 27 │     get age(): number;
       │         ^^^
    28 │ }
    29 │ 
  
  i Move this setter before the getter.
  
    23 │ type UserType = {
  > 24 │     set age(age: number);
       │         ^^^
    25 │     get name(): string;
    26 │     set name(value: string);
  

```

```
invalid-set-before-get.ts:32:9 lint/nursery/useAdjacentGetterSetter ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Getter should be defined right after the setter.
  
    30 │ interface UserInterface {
    31 │     set name(value: string);
  > 32 │     get age(): number;
       │         ^^^
    33 │     set age(age: number);
    34 │     get name(): string;
  
  i Move this setter before the getter.
  
    31 │     set name(value: string);
    32 │     get age(): number;
  > 33 │     set age(age: number);
       │         ^^^
    34 │     get name(): string;
    35 │ }
  

```

```
invalid-set-before-get.ts:34:9 lint/nursery/useAdjacentGetterSetter ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Getter should be defined right after the setter.
  
    32 │     get age(): number;
    33 │     set age(age: number);
  > 34 │     get name(): string;
       │         ^^^^
    35 │ }
    36 │ 
  
  i Move this setter before the getter.
  
    30 │ interface UserInterface {
  > 31 │     set name(value: string);
       │         ^^^^
    32 │     get age(): number;
    33 │     set age(age: number);
  

```

```
invalid-set-before-get.ts:39:13 lint/nursery/useAdjacentGetterSetter ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Getter should be defined right after the setter.
  
    37 │ declare module 'module' {
    38 │     export class User {
  > 39 │         get name(): string;
       │             ^^^^
    40 │         set name(value: string);
    41 │         get #age(): number;
  
  i Move this setter before the getter.
  
    38 │     export class User {
    39 │         get name(): string;
  > 40 │         set name(value: string);
       │             ^^^^
    41 │         get #age(): number;
    42 │         set #age(age: number);
  

```

```
invalid-set-before-get.ts:41:13 lint/nursery/useAdjacentGetterSetter ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Getter should be defined right after the setter.
  
    39 │         get name(): string;
    40 │         set name(value: string);
  > 41 │         get #age(): number;
       │             ^^^^
    42 │         set #age(age: number);
    43 │     }
  
  i Move this setter before the getter.
  
    40 │         set name(value: string);
    41 │         get #age(): number;
  > 42 │         set #age(age: number);
       │             ^^^^
    43 │     }
    44 │ }
  

```
