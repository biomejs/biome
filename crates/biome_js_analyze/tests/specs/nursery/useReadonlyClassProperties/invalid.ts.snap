---
source: crates/biome_js_analyze/tests/spec_tests.rs
assertion_line: 134
expression: invalid.ts
---
# Input
```ts
// Static properties
class TestIncorrectlyModifiableStatic {
	private static incorrectlyModifiableStatic = 7;
}

// Private static fields
class TestIncorrectlyModifiableStaticPrivate {
	static #incorrectlyModifiableStatic = 7;
}

// Static arrow functions
class TestIncorrectlyModifiableStaticArrow {
	private static incorrectlyModifiableStaticArrow = () => 7;
}

//  Private static arrow functions
class TestIncorrectlyModifiableStaticArrowPrivate {
	static #incorrectlyModifiableStaticArrow = () => 7;
}

// Nested classes with same property names
class TestIncorrectlyModifiableInline {
	private incorrectlyModifiableInline = 7;
	public createConfusingChildClass() {
		return class {
			private incorrectlyModifiableInline = 7;
		};
	}
}

// Nested classes with private fields
class TestIncorrectlyModifiableInlinePrivate {
	#incorrectlyModifiableInline = 7;
	public createConfusingChildClass() {
		return class {
			#incorrectlyModifiableInline = 7;
		};
	}
}

// Constructor reassignment
class TestIncorrectlyModifiableDelayed {
	private incorrectlyModifiableDelayed = 7;
	public constructor() {
		this.incorrectlyModifiableDelayed = 7;
	}
}

// Constructor reassignment with private field
class TestIncorrectlyModifiableDelayedPrivate {
	#incorrectlyModifiableDelayed = 7;
	public constructor() {
		this.#incorrectlyModifiableDelayed = 7;
	}
}

// Example 11: Subtraction operation
class TestIncorrectlyModifiablePostMinus {
	private incorrectlyModifiablePostMinus = 7;
	public mutate() {
		this.incorrectlyModifiablePostMinus - 1;
	}
}

// Example 12: Subtraction operation with private field
class TestIncorrectlyModifiablePostMinusPrivate {
	#incorrectlyModifiablePostMinus = 7;
	public mutate() {
		this.#incorrectlyModifiablePostMinus - 1;
	}
}

// Addition operation
class TestIncorrectlyModifiablePostPlus {
	private incorrectlyModifiablePostPlus = 7;
	public mutate() {
		this.incorrectlyModifiablePostPlus + 1;
	}
}

// Addition operation with private field
class TestIncorrectlyModifiablePostPlusPrivate {
	#incorrectlyModifiablePostPlus = 7;
	public mutate() {
		this.#incorrectlyModifiablePostPlus + 1;
	}
}

// Negation operation
class TestIncorrectlyModifiablePreMinus {
	private incorrectlyModifiablePreMinus = 7;
	public mutate() {
		-this.incorrectlyModifiablePreMinus;
	}
}

// Negation operation with private field
class TestIncorrectlyModifiablePreMinusPrivate {
	#incorrectlyModifiablePreMinus = 7;
	public mutate() {
		-this.#incorrectlyModifiablePreMinus;
	}
}

// Unary plus operation
class TestIncorrectlyModifiablePrePlus {
	private incorrectlyModifiablePrePlus = 7;
	public mutate() {
		+this.incorrectlyModifiablePrePlus;
	}
}

// Unary plus operation with private field
class TestIncorrectlyModifiablePrePlusPrivate {
	#incorrectlyModifiablePrePlus = 7;
	public mutate() {
		+this.#incorrectlyModifiablePrePlus;
	}
}

// Property with same name in different class
class TestOverlappingClassVariable {
	private overlappingClassVariable = 7;
	public workWithSimilarClass(other: SimilarClass) {
		other.overlappingClassVariable = 7;
	}
}
class SimilarClass {
	public overlappingClassVariable = 7;
}

// Parameter property
class TestIncorrectlyModifiableParameter {
	public constructor(private incorrectlyModifiableParameter = 7) {}
}

// Parameter property with other parameters
class TestIncorrectlyModifiableParameterWithOthers {
	public constructor(
		public ignore: boolean,
		private incorrectlyModifiableParameter = 7,
	) {}
}

// Inline lambda with option
class TestCorrectlyNonInlineLambdas {
	private incorrectlyInlineLambda = () => 7;
}

// Property in a higher-order class function
function ClassWithName<TBase extends new (...args: any[]) => {}>(Base: TBase) {
	return class extends Base {
		private _name: string;
	};
}

// Private field in a higher-order class function
function ClassWithNamePrivate<TBase extends new (...args: any[]) => {}>(Base: TBase) {
	return class extends Base {
		#name: string;
	};
}

// Object property access
class Test {
	private testObj = { prop: '' };
	public test(): void {
		this.testObj.prop = '';
	}
}

// Basic property initialization in constructor
enum Foo { Bar, Bazz }
const foo = Foo.Bar;
class Test1 {
	private prop = foo;
	constructor() {
		this.prop = foo;
	}
}

// Property with no constructor reassignment
class Test2 {
	private prop = foo;
}

// Using declared constant
enum Foo2 { Bar, Bazz }
declare const foo2: Foo2;
class Test3 {
	private prop = foo2;
}

// Property in nested scope with shadowing
enum Foo3 { Bar, Bazz }
const bar = Foo3.Bar;
function wrapper() {
	const Foo = 10;
	class Test4 {
		private prop = bar;
		constructor() {
			this.prop = bar;
		}
	}
}

// Property with type shadowing
function wrapper2() {
	type Foo = 10;
	class Test5 {
		private prop = bar;
		constructor() {
			this.prop = bar;
		}
	}
}

// Using IIFE for enum
const Bar = (function () {
	enum Foo4 { Bar, Bazz }
	return Foo4;
})();
const bar2 = Bar.Bar;
class Test6 {
	private prop = bar2;
	constructor() {
		this.prop = bar2;
	}
}

// Object property
class Test7 {
	private prop = { foo: 'bar' };
}

// Object property with constructor reassignment
class Test8 {
	private prop = { foo: 'bar' };
	constructor() {
		this.prop = { foo: 'bazz' };
	}
}

// Array property
class Test9 {
	private prop = [1, 2, 'three'];
}

// Array property with constructor reassignment
class Test10 {
	private prop = [1, 2, 'three'];
	constructor() {
		this.prop = [1, 2, 'four'];
	}
}

// Property used in method
class X {
	private _isValid = true;
	getIsValid = () => this._isValid;
	constructor(data?: {}) {
		if (!data) {
			this._isValid = false;
		}
	}
}

// Property with type annotation
class Test12 {
	private prop: string = 'hello';
}

// Property with union type
class Test13 {
	private prop: string | number = 'hello';
}

// Property with type but no initial value
class Test14 {
	private prop: string;
	constructor() {
		this.prop = 'hello';
	}
}

// Example 40: Property with no type annotation
class Test15 {
	private prop;
	constructor() {
		this.prop = 'hello';
	}
}

// Conditional assignment in constructor
class Test16 {
	private prop;
	constructor(x: boolean) {
		if (x) {
			this.prop = 'hello';
		} else {
			this.prop = 10;
		}
	}
}

// Null property
class Test18 {
	private prop = null;
}

// Null property with constructor reassignment
class Test19 {
	private prop = null;
	constructor() {
		this.prop = null;
	}
}

// Property with type assertion
class Test20 {
	private prop = 'hello' as string;
}

// Property with Promise
class Test21 {
	private prop = Promise.resolve('hello');
}

// this refers to the inner class instance
class TestChildClassExpressionModifiable {
	private childClassExpressionModifiable = 7;
	public createConfusingChildClass() {
		return class {
			private childClassExpressionModifiable = 7;
			mutate() {
				this.childClassExpressionModifiable += 1;
			}
		};
	}
}
```

# Diagnostics
```
invalid.ts:23:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'incorrectlyModifiableInline' is never reassigned.
  
    21 │ // Nested classes with same property names
    22 │ class TestIncorrectlyModifiableInline {
  > 23 │ 	private incorrectlyModifiableInline = 7;
       │ 	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    24 │ 	public createConfusingChildClass() {
    25 │ 		return class {
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    23 │ → private·readonly·incorrectlyModifiableInline·=·7;
       │           +++++++++                                

```

```
invalid.ts:33:2 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member '#incorrectlyModifiableInline' is never reassigned.
  
    31 │ // Nested classes with private fields
    32 │ class TestIncorrectlyModifiableInlinePrivate {
  > 33 │ 	#incorrectlyModifiableInline = 7;
       │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    34 │ 	public createConfusingChildClass() {
    35 │ 		return class {
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    33 │ → readonly·#incorrectlyModifiableInline·=·7;
       │   +++++++++                                 

```

```
invalid.ts:43:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'incorrectlyModifiableDelayed' is never reassigned.
  
    41 │ // Constructor reassignment
    42 │ class TestIncorrectlyModifiableDelayed {
  > 43 │ 	private incorrectlyModifiableDelayed = 7;
       │ 	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    44 │ 	public constructor() {
    45 │ 		this.incorrectlyModifiableDelayed = 7;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    43 │ → private·readonly·incorrectlyModifiableDelayed·=·7;
       │           +++++++++                                 

```

```
invalid.ts:51:2 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member '#incorrectlyModifiableDelayed' is never reassigned.
  
    49 │ // Constructor reassignment with private field
    50 │ class TestIncorrectlyModifiableDelayedPrivate {
  > 51 │ 	#incorrectlyModifiableDelayed = 7;
       │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    52 │ 	public constructor() {
    53 │ 		this.#incorrectlyModifiableDelayed = 7;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    51 │ → readonly·#incorrectlyModifiableDelayed·=·7;
       │   +++++++++                                  

```

```
invalid.ts:59:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'incorrectlyModifiablePostMinus' is never reassigned.
  
    57 │ // Example 11: Subtraction operation
    58 │ class TestIncorrectlyModifiablePostMinus {
  > 59 │ 	private incorrectlyModifiablePostMinus = 7;
       │ 	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    60 │ 	public mutate() {
    61 │ 		this.incorrectlyModifiablePostMinus - 1;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    59 │ → private·readonly·incorrectlyModifiablePostMinus·=·7;
       │           +++++++++                                   

```

```
invalid.ts:67:2 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member '#incorrectlyModifiablePostMinus' is never reassigned.
  
    65 │ // Example 12: Subtraction operation with private field
    66 │ class TestIncorrectlyModifiablePostMinusPrivate {
  > 67 │ 	#incorrectlyModifiablePostMinus = 7;
       │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    68 │ 	public mutate() {
    69 │ 		this.#incorrectlyModifiablePostMinus - 1;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    67 │ → readonly·#incorrectlyModifiablePostMinus·=·7;
       │   +++++++++                                    

```

```
invalid.ts:75:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'incorrectlyModifiablePostPlus' is never reassigned.
  
    73 │ // Addition operation
    74 │ class TestIncorrectlyModifiablePostPlus {
  > 75 │ 	private incorrectlyModifiablePostPlus = 7;
       │ 	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    76 │ 	public mutate() {
    77 │ 		this.incorrectlyModifiablePostPlus + 1;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    75 │ → private·readonly·incorrectlyModifiablePostPlus·=·7;
       │           +++++++++                                  

```

```
invalid.ts:83:2 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member '#incorrectlyModifiablePostPlus' is never reassigned.
  
    81 │ // Addition operation with private field
    82 │ class TestIncorrectlyModifiablePostPlusPrivate {
  > 83 │ 	#incorrectlyModifiablePostPlus = 7;
       │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    84 │ 	public mutate() {
    85 │ 		this.#incorrectlyModifiablePostPlus + 1;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    83 │ → readonly·#incorrectlyModifiablePostPlus·=·7;
       │   +++++++++                                   

```

```
invalid.ts:91:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'incorrectlyModifiablePreMinus' is never reassigned.
  
    89 │ // Negation operation
    90 │ class TestIncorrectlyModifiablePreMinus {
  > 91 │ 	private incorrectlyModifiablePreMinus = 7;
       │ 	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    92 │ 	public mutate() {
    93 │ 		-this.incorrectlyModifiablePreMinus;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    91 │ → private·readonly·incorrectlyModifiablePreMinus·=·7;
       │           +++++++++                                  

```

```
invalid.ts:99:2 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member '#incorrectlyModifiablePreMinus' is never reassigned.
  
     97 │ // Negation operation with private field
     98 │ class TestIncorrectlyModifiablePreMinusPrivate {
   > 99 │ 	#incorrectlyModifiablePreMinus = 7;
        │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    100 │ 	public mutate() {
    101 │ 		-this.#incorrectlyModifiablePreMinus;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    99 │ → readonly·#incorrectlyModifiablePreMinus·=·7;
       │   +++++++++                                   

```

```
invalid.ts:107:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'incorrectlyModifiablePrePlus' is never reassigned.
  
    105 │ // Unary plus operation
    106 │ class TestIncorrectlyModifiablePrePlus {
  > 107 │ 	private incorrectlyModifiablePrePlus = 7;
        │ 	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    108 │ 	public mutate() {
    109 │ 		+this.incorrectlyModifiablePrePlus;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    107 │ → private·readonly·incorrectlyModifiablePrePlus·=·7;
        │           +++++++++                                 

```

```
invalid.ts:115:2 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member '#incorrectlyModifiablePrePlus' is never reassigned.
  
    113 │ // Unary plus operation with private field
    114 │ class TestIncorrectlyModifiablePrePlusPrivate {
  > 115 │ 	#incorrectlyModifiablePrePlus = 7;
        │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    116 │ 	public mutate() {
    117 │ 		+this.#incorrectlyModifiablePrePlus;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    115 │ → readonly·#incorrectlyModifiablePrePlus·=·7;
        │   +++++++++                                  

```

```
invalid.ts:123:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'overlappingClassVariable' is never reassigned.
  
    121 │ // Property with same name in different class
    122 │ class TestOverlappingClassVariable {
  > 123 │ 	private overlappingClassVariable = 7;
        │ 	        ^^^^^^^^^^^^^^^^^^^^^^^^
    124 │ 	public workWithSimilarClass(other: SimilarClass) {
    125 │ 		other.overlappingClassVariable = 7;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    123 │ → private·readonly·overlappingClassVariable·=·7;
        │           +++++++++                             

```

```
invalid.ts:134:29 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'incorrectlyModifiableParameter' is never reassigned.
  
    132 │ // Parameter property
    133 │ class TestIncorrectlyModifiableParameter {
  > 134 │ 	public constructor(private incorrectlyModifiableParameter = 7) {}
        │ 	                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    135 │ }
    136 │ 
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    134 │ → public·constructor(private·readonly·incorrectlyModifiableParameter·=·7)·{}
        │                              +++++++++                                      

```

```
invalid.ts:141:11 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'incorrectlyModifiableParameter' is never reassigned.
  
    139 │ 	public constructor(
    140 │ 		public ignore: boolean,
  > 141 │ 		private incorrectlyModifiableParameter = 7,
        │ 		        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    142 │ 	) {}
    143 │ }
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    141 │ → → private·readonly·incorrectlyModifiableParameter·=·7,
        │             +++++++++                                   

```

```
invalid.ts:147:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'incorrectlyInlineLambda' is never reassigned.
  
    145 │ // Inline lambda with option
    146 │ class TestCorrectlyNonInlineLambdas {
  > 147 │ 	private incorrectlyInlineLambda = () => 7;
        │ 	        ^^^^^^^^^^^^^^^^^^^^^^^
    148 │ }
    149 │ 
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    147 │ → private·readonly·incorrectlyInlineLambda·=·()·=>·7;
        │           +++++++++                                  

```

```
invalid.ts:166:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'testObj' is never reassigned.
  
    164 │ // Object property access
    165 │ class Test {
  > 166 │ 	private testObj = { prop: '' };
        │ 	        ^^^^^^^
    167 │ 	public test(): void {
    168 │ 		this.testObj.prop = '';
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    166 │ → private·readonly·testObj·=·{·prop:·''·};
        │           +++++++++                       

```

```
invalid.ts:176:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    174 │ const foo = Foo.Bar;
    175 │ class Test1 {
  > 176 │ 	private prop = foo;
        │ 	        ^^^^
    177 │ 	constructor() {
    178 │ 		this.prop = foo;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    176 │ → private·readonly·prop·=·foo;
        │           +++++++++           

```

```
invalid.ts:184:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    182 │ // Property with no constructor reassignment
    183 │ class Test2 {
  > 184 │ 	private prop = foo;
        │ 	        ^^^^
    185 │ }
    186 │ 
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    184 │ → private·readonly·prop·=·foo;
        │           +++++++++           

```

```
invalid.ts:191:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    189 │ declare const foo2: Foo2;
    190 │ class Test3 {
  > 191 │ 	private prop = foo2;
        │ 	        ^^^^
    192 │ }
    193 │ 
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    191 │ → private·readonly·prop·=·foo2;
        │           +++++++++            

```

```
invalid.ts:200:11 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    198 │ 	const Foo = 10;
    199 │ 	class Test4 {
  > 200 │ 		private prop = bar;
        │ 		        ^^^^
    201 │ 		constructor() {
    202 │ 			this.prop = bar;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    200 │ → → private·readonly·prop·=·bar;
        │             +++++++++           

```

```
invalid.ts:211:11 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    209 │ 	type Foo = 10;
    210 │ 	class Test5 {
  > 211 │ 		private prop = bar;
        │ 		        ^^^^
    212 │ 		constructor() {
    213 │ 			this.prop = bar;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    211 │ → → private·readonly·prop·=·bar;
        │             +++++++++           

```

```
invalid.ts:225:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    223 │ const bar2 = Bar.Bar;
    224 │ class Test6 {
  > 225 │ 	private prop = bar2;
        │ 	        ^^^^
    226 │ 	constructor() {
    227 │ 		this.prop = bar2;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    225 │ → private·readonly·prop·=·bar2;
        │           +++++++++            

```

```
invalid.ts:233:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    231 │ // Object property
    232 │ class Test7 {
  > 233 │ 	private prop = { foo: 'bar' };
        │ 	        ^^^^
    234 │ }
    235 │ 
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    233 │ → private·readonly·prop·=·{·foo:·'bar'·};
        │           +++++++++                      

```

```
invalid.ts:238:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    236 │ // Object property with constructor reassignment
    237 │ class Test8 {
  > 238 │ 	private prop = { foo: 'bar' };
        │ 	        ^^^^
    239 │ 	constructor() {
    240 │ 		this.prop = { foo: 'bazz' };
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    238 │ → private·readonly·prop·=·{·foo:·'bar'·};
        │           +++++++++                      

```

```
invalid.ts:246:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    244 │ // Array property
    245 │ class Test9 {
  > 246 │ 	private prop = [1, 2, 'three'];
        │ 	        ^^^^
    247 │ }
    248 │ 
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    246 │ → private·readonly·prop·=·[1,·2,·'three'];
        │           +++++++++                       

```

```
invalid.ts:251:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    249 │ // Array property with constructor reassignment
    250 │ class Test10 {
  > 251 │ 	private prop = [1, 2, 'three'];
        │ 	        ^^^^
    252 │ 	constructor() {
    253 │ 		this.prop = [1, 2, 'four'];
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    251 │ → private·readonly·prop·=·[1,·2,·'three'];
        │           +++++++++                       

```

```
invalid.ts:259:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member '_isValid' is never reassigned.
  
    257 │ // Property used in method
    258 │ class X {
  > 259 │ 	private _isValid = true;
        │ 	        ^^^^^^^^
    260 │ 	getIsValid = () => this._isValid;
    261 │ 	constructor(data?: {}) {
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    259 │ → private·readonly·_isValid·=·true;
        │           +++++++++                

```

```
invalid.ts:270:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    268 │ // Property with type annotation
    269 │ class Test12 {
  > 270 │ 	private prop: string = 'hello';
        │ 	        ^^^^
    271 │ }
    272 │ 
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    270 │ → private·readonly·prop:·string·=·'hello';
        │           +++++++++                       

```

```
invalid.ts:275:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    273 │ // Property with union type
    274 │ class Test13 {
  > 275 │ 	private prop: string | number = 'hello';
        │ 	        ^^^^
    276 │ }
    277 │ 
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    275 │ → private·readonly·prop:·string·|·number·=·'hello';
        │           +++++++++                                

```

```
invalid.ts:280:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    278 │ // Property with type but no initial value
    279 │ class Test14 {
  > 280 │ 	private prop: string;
        │ 	        ^^^^
    281 │ 	constructor() {
    282 │ 		this.prop = 'hello';
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    280 │ → private·readonly·prop:·string;
        │           +++++++++             

```

```
invalid.ts:288:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    286 │ // Example 40: Property with no type annotation
    287 │ class Test15 {
  > 288 │ 	private prop;
        │ 	        ^^^^
    289 │ 	constructor() {
    290 │ 		this.prop = 'hello';
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    288 │ → private·readonly·prop;
        │           +++++++++     

```

```
invalid.ts:296:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    294 │ // Conditional assignment in constructor
    295 │ class Test16 {
  > 296 │ 	private prop;
        │ 	        ^^^^
    297 │ 	constructor(x: boolean) {
    298 │ 		if (x) {
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    296 │ → private·readonly·prop;
        │           +++++++++     

```

```
invalid.ts:308:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    306 │ // Null property
    307 │ class Test18 {
  > 308 │ 	private prop = null;
        │ 	        ^^^^
    309 │ }
    310 │ 
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    308 │ → private·readonly·prop·=·null;
        │           +++++++++            

```

```
invalid.ts:313:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    311 │ // Null property with constructor reassignment
    312 │ class Test19 {
  > 313 │ 	private prop = null;
        │ 	        ^^^^
    314 │ 	constructor() {
    315 │ 		this.prop = null;
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    313 │ → private·readonly·prop·=·null;
        │           +++++++++            

```

```
invalid.ts:321:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    319 │ // Property with type assertion
    320 │ class Test20 {
  > 321 │ 	private prop = 'hello' as string;
        │ 	        ^^^^
    322 │ }
    323 │ 
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    321 │ → private·readonly·prop·=·'hello'·as·string;
        │           +++++++++                         

```

```
invalid.ts:326:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'prop' is never reassigned.
  
    324 │ // Property with Promise
    325 │ class Test21 {
  > 326 │ 	private prop = Promise.resolve('hello');
        │ 	        ^^^^
    327 │ }
    328 │ 
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    326 │ → private·readonly·prop·=·Promise.resolve('hello');
        │           +++++++++                                

```

```
invalid.ts:331:10 lint/nursery/useReadonlyClassProperties  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Member 'childClassExpressionModifiable' is never reassigned.
  
    329 │ // this refers to the inner class instance
    330 │ class TestChildClassExpressionModifiable {
  > 331 │ 	private childClassExpressionModifiable = 7;
        │ 	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    332 │ 	public createConfusingChildClass() {
    333 │ 		return class {
  
  i Using readonly improves code safety, clarity, and helps prevent unintended mutations.
  
  i Unsafe fix: Add readonly decorator.
  
    331 │ → private·readonly·childClassExpressionModifiable·=·7;
        │           +++++++++                                   

```
