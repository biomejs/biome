---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalidNone.ts
---
# Input
```ts
class InvalidNone {
  public constructor(public foo: string) {}
}

class InvalidNone2 {
  public constructor(private readonly foo: string) {}
}

class InvalidNone3 {
  public constructor(protected foo: string) {}
}

class InvalidNone4 {
  protected name: string;
  private x: number;
  public getX() {
    return this.x;
  }
}

class InvalidNone5 {
  protected name: string;
  protected foo?: string;
  public 'foo-bar'?: string;
}

class InvalidNone6 {
  public constructor({ x, y }: { x: number; y: number }) {}
}

class InvalidNone7 {
  protected name: string;
  protected x?: string;
  public getX() {
    return this.x;
  }
}

class InvalidNone8 {
  private x = 2;
}

```

# Diagnostics
```
invalidNone.ts:2:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    1 │ class InvalidNone {
  > 2 │   public constructor(public foo: string) {}
      │   ^^^^^^
    3 │ }
    4 │ 
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:2:22 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    1 │ class InvalidNone {
  > 2 │   public constructor(public foo: string) {}
      │                      ^^^^^^
    3 │ }
    4 │ 
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:6:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    5 │ class InvalidNone2 {
  > 6 │   public constructor(private readonly foo: string) {}
      │   ^^^^^^
    7 │ }
    8 │ 
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:6:22 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    5 │ class InvalidNone2 {
  > 6 │   public constructor(private readonly foo: string) {}
      │                      ^^^^^^^
    7 │ }
    8 │ 
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:10:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
     9 │ class InvalidNone3 {
  > 10 │   public constructor(protected foo: string) {}
       │   ^^^^^^
    11 │ }
    12 │ 
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:10:22 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
     9 │ class InvalidNone3 {
  > 10 │   public constructor(protected foo: string) {}
       │                      ^^^^^^^^^
    11 │ }
    12 │ 
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:14:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    13 │ class InvalidNone4 {
  > 14 │   protected name: string;
       │   ^^^^^^^^^
    15 │   private x: number;
    16 │   public getX() {
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:15:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    13 │ class InvalidNone4 {
    14 │   protected name: string;
  > 15 │   private x: number;
       │   ^^^^^^^
    16 │   public getX() {
    17 │     return this.x;
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:16:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    14 │   protected name: string;
    15 │   private x: number;
  > 16 │   public getX() {
       │   ^^^^^^
    17 │     return this.x;
    18 │   }
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:22:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    21 │ class InvalidNone5 {
  > 22 │   protected name: string;
       │   ^^^^^^^^^
    23 │   protected foo?: string;
    24 │   public 'foo-bar'?: string;
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:23:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    21 │ class InvalidNone5 {
    22 │   protected name: string;
  > 23 │   protected foo?: string;
       │   ^^^^^^^^^
    24 │   public 'foo-bar'?: string;
    25 │ }
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:24:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    22 │   protected name: string;
    23 │   protected foo?: string;
  > 24 │   public 'foo-bar'?: string;
       │   ^^^^^^
    25 │ }
    26 │ 
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:28:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    27 │ class InvalidNone6 {
  > 28 │   public constructor({ x, y }: { x: number; y: number }) {}
       │   ^^^^^^
    29 │ }
    30 │ 
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:32:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    31 │ class InvalidNone7 {
  > 32 │   protected name: string;
       │   ^^^^^^^^^
    33 │   protected x?: string;
    34 │   public getX() {
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:33:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    31 │ class InvalidNone7 {
    32 │   protected name: string;
  > 33 │   protected x?: string;
       │   ^^^^^^^^^
    34 │   public getX() {
    35 │     return this.x;
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:34:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    32 │   protected name: string;
    33 │   protected x?: string;
  > 34 │   public getX() {
       │   ^^^^^^
    35 │     return this.x;
    36 │   }
  
  i Remove the accessibility modifier.
  

```

```
invalidNone.ts:40:3 lint/nursery/useConsistentMemberAccessibility ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Accessibility modifiers are disallowed.
  
    39 │ class InvalidNone8 {
  > 40 │   private x = 2;
       │   ^^^^^^^
    41 │ }
    42 │ 
  
  i Remove the accessibility modifier.
  

```
