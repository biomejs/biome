[
	"function foo() {return;}",
	"const foo = () => {};",
	"let foo;",
	"var foo;",
	"const foo = undefined;",
	"foo();",
	"foo(bar,);",
	"foo(undefined, bar);",
	"const {foo} = {};",
	"function foo({bar} = {}) {}",
	"function foo(bar) {}",
	"function* foo() {yield* undefined;}",
	"if (Object.is(foo, undefined)){}",
	"t.is(foo, undefined)",
	"assert.equal(foo, undefined, message)",
	"assert.notEqual(foo, undefined, message)",
	"assert.strictEqual(foo, undefined, message)",
	"assert.notStrictEqual(foo, undefined, message)",
	"assert.propertyVal(foo, 'bar', undefined, message)",
	"assert.notPropertyVal(foo, 'bar', undefined, message)",
	"expect(foo).not(undefined)",
	"expect(foo).to.have.property('bar', undefined)",
	"expect(foo).toBe(undefined)",
	"expect(foo).toContain(undefined)",
	"expect(foo).toContainEqual(undefined)",
	"expect(foo).toEqual(undefined)",
	"t.same(foo, undefined)",
	"t.notSame(foo, undefined)",
	"t.strictSame(foo, undefined)",
	"t.strictNotSame(foo, undefined)",
	"expect(someFunction).toHaveBeenCalledWith(1, 2, undefined);",
	"set.add(undefined);",
	"map.set(foo, undefined);",
	"array.push(foo, undefined);",
	"array.push(undefined);",
	"array.unshift(foo, undefined);",
	"array.unshift(undefined);",
	"createContext(undefined);",
	"React.createContext(undefined);",
	"setState(undefined)",
	"setState?.(undefined)",
	"props.setState(undefined)",
	"props.setState?.(undefined)",
	"array.includes(undefined)",
	"set.has(undefined)",
	// `Function#bind()`
	"foo.bind(bar, undefined)",
	"foo.bind(...bar, undefined)",
	"foo.bind(...[], undefined)",
	"foo.bind(...[undefined], undefined)",
	"foo.bind(bar, baz, undefined)",
	"foo?.bind(bar, undefined)"
]
