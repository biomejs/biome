---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```jsx
const a = 'a' + 'b'
const a = 'a' + 'b' + 'c'
const a = 'a' + ('b' + 'c')
const a = ('a' + 'b') + 'c'
const a = foo + 'a' + 'b'
const a = foo + 'a' + 'b' + 'c'
const a = (foo + 'a') + ('b' + 'c')
const a = ((foo + 'a') + ('b' + 'c') + 1)
// const a = `a` + 'b'
// const a = `a` + `b`
// const a = foo + `a` + `b`

```

# Diagnostics
```
invalid.js:1:11 lint/nursery/noUselessConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
  > 1 │ const a = 'a' + 'b'
      │           ^^^^^^^^^
    2 │ const a = 'a' + 'b' + 'c'
    3 │ const a = 'a' + ('b' + 'c')
  
  i Consider joining the strings as a single one to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     1    │ - const·a·=·'a'·+·'b'
        1 │ + const·a·=·"ab"
     2  2 │   const a = 'a' + 'b' + 'c'
     3  3 │   const a = 'a' + ('b' + 'c')
  

```

```
invalid.js:2:11 lint/nursery/noUselessConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    1 │ const a = 'a' + 'b'
  > 2 │ const a = 'a' + 'b' + 'c'
      │           ^^^^^^^^^^^^^^^
    3 │ const a = 'a' + ('b' + 'c')
    4 │ const a = ('a' + 'b') + 'c'
  
  i Consider joining the strings as a single one to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     1  1 │   const a = 'a' + 'b'
     2    │ - const·a·=·'a'·+·'b'·+·'c'
        2 │ + const·a·=·"abc"
     3  3 │   const a = 'a' + ('b' + 'c')
     4  4 │   const a = ('a' + 'b') + 'c'
  

```

```
invalid.js:3:11 lint/nursery/noUselessConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    1 │ const a = 'a' + 'b'
    2 │ const a = 'a' + 'b' + 'c'
  > 3 │ const a = 'a' + ('b' + 'c')
      │           ^^^^^^^^^^^^^^^^^
    4 │ const a = ('a' + 'b') + 'c'
    5 │ const a = foo + 'a' + 'b'
  
  i Consider joining the strings as a single one to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     1  1 │   const a = 'a' + 'b'
     2  2 │   const a = 'a' + 'b' + 'c'
     3    │ - const·a·=·'a'·+·('b'·+·'c')
        3 │ + const·a·=·"abc"
     4  4 │   const a = ('a' + 'b') + 'c'
     5  5 │   const a = foo + 'a' + 'b'
  

```

```
invalid.js:4:11 lint/nursery/noUselessConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    2 │ const a = 'a' + 'b' + 'c'
    3 │ const a = 'a' + ('b' + 'c')
  > 4 │ const a = ('a' + 'b') + 'c'
      │           ^^^^^^^^^^^^^^^^^
    5 │ const a = foo + 'a' + 'b'
    6 │ const a = foo + 'a' + 'b' + 'c'
  
  i Consider joining the strings as a single one to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     2  2 │   const a = 'a' + 'b' + 'c'
     3  3 │   const a = 'a' + ('b' + 'c')
     4    │ - const·a·=·('a'·+·'b')·+·'c'
        4 │ + const·a·=·"abc"
     5  5 │   const a = foo + 'a' + 'b'
     6  6 │   const a = foo + 'a' + 'b' + 'c'
  

```

```
invalid.js:5:11 lint/nursery/noUselessConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    3 │ const a = 'a' + ('b' + 'c')
    4 │ const a = ('a' + 'b') + 'c'
  > 5 │ const a = foo + 'a' + 'b'
      │           ^^^^^^^^^^^^^^^
    6 │ const a = foo + 'a' + 'b' + 'c'
    7 │ const a = (foo + 'a') + ('b' + 'c')
  
  i Consider joining the strings as a single one to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     3  3 │   const a = 'a' + ('b' + 'c')
     4  4 │   const a = ('a' + 'b') + 'c'
     5    │ - const·a·=·foo·+·'a'·+·'b'
        5 │ + const·a·=·foo·+·"ab"
     6  6 │   const a = foo + 'a' + 'b' + 'c'
     7  7 │   const a = (foo + 'a') + ('b' + 'c')
  

```

```
invalid.js:6:11 lint/nursery/noUselessConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    4 │ const a = ('a' + 'b') + 'c'
    5 │ const a = foo + 'a' + 'b'
  > 6 │ const a = foo + 'a' + 'b' + 'c'
      │           ^^^^^^^^^^^^^^^^^^^^^
    7 │ const a = (foo + 'a') + ('b' + 'c')
    8 │ const a = ((foo + 'a') + ('b' + 'c') + 1)
  
  i Consider joining the strings as a single one to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     4  4 │   const a = ('a' + 'b') + 'c'
     5  5 │   const a = foo + 'a' + 'b'
     6    │ - const·a·=·foo·+·'a'·+·'b'·+·'c'
        6 │ + const·a·=·foo·+·"abc"
     7  7 │   const a = (foo + 'a') + ('b' + 'c')
     8  8 │   const a = ((foo + 'a') + ('b' + 'c') + 1)
  

```

```
invalid.js:7:11 lint/nursery/noUselessConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    5 │ const a = foo + 'a' + 'b'
    6 │ const a = foo + 'a' + 'b' + 'c'
  > 7 │ const a = (foo + 'a') + ('b' + 'c')
      │           ^^^^^^^^^^^^^^^^^^^^^^^^^
    8 │ const a = ((foo + 'a') + ('b' + 'c') + 1)
    9 │ // const a = `a` + 'b'
  
  i Consider joining the strings as a single one to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     5  5 │   const a = foo + 'a' + 'b'
     6  6 │   const a = foo + 'a' + 'b' + 'c'
     7    │ - const·a·=·(foo·+·'a')·+·('b'·+·'c')
        7 │ + const·a·=·foo·+·"abc"
     8  8 │   const a = ((foo + 'a') + ('b' + 'c') + 1)
     9  9 │   // const a = `a` + 'b'
  

```

```
invalid.js:8:12 lint/nursery/noUselessConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
     6 │ const a = foo + 'a' + 'b' + 'c'
     7 │ const a = (foo + 'a') + ('b' + 'c')
   > 8 │ const a = ((foo + 'a') + ('b' + 'c') + 1)
       │            ^^^^^^^^^^^^^^^^^^^^^^^^^
     9 │ // const a = `a` + 'b'
    10 │ // const a = `a` + `b`
  
  i Consider joining the strings as a single one to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     6  6 │   const a = foo + 'a' + 'b' + 'c'
     7  7 │   const a = (foo + 'a') + ('b' + 'c')
     8    │ - const·a·=·((foo·+·'a')·+·('b'·+·'c')·+·1)
        8 │ + const·a·=·(foo·+·"abc"·+·1)
     9  9 │   // const a = `a` + 'b'
    10 10 │   // const a = `a` + `b`
  

```
