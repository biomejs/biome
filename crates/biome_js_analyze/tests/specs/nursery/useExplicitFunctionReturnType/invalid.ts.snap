---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.ts
---
# Input
```ts
function test(a: number, b: number) {
	return;
}

function test() {
	return;
}

var fn = function () {
	return 1;
};

var arrowFn = () => "test";

class Test {
	constructor() {}
	get prop() {
		return 1;
	}
	set prop() {}
	method() {
		return;
	}
	arrow = () => "arrow";
	private method() {
		return;
	}
}

const obj = {
	method() {
		return "test"
	}
}

const obj = {
  get method() {
    return "test"
  },
};

const func = (value: number) => ({ type: 'X', value }) as any;
const func = (value: number) => ({ type: 'X', value }) as Action;
```

# Diagnostics
```
invalid.ts:1:1 lint/nursery/useExplicitFunctionReturnType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
  > 1 │ function test(a: number, b: number) {
      │ ^^^^^^^^^^^^^
    2 │ 	return;
    3 │ }
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:3:2 lint/nursery/useExplicitFunctionReturnType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    1 │ function test(a: number, b: number) {
    2 │ 	return;
  > 3 │ }
      │  
  > 4 │ 
  > 5 │ function test() {
      │ ^^^^^^^^^^^^^
    6 │ 	return;
    7 │ }
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:9:10 lint/nursery/useExplicitFunctionReturnType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
     7 │ }
     8 │ 
   > 9 │ var fn = function () {
       │          ^^^^^^^^^^^^^
  > 10 │ 	return 1;
  > 11 │ };
       │ ^
    12 │ 
    13 │ var arrowFn = () => "test";
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:13:15 lint/nursery/useExplicitFunctionReturnType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    11 │ };
    12 │ 
  > 13 │ var arrowFn = () => "test";
       │               ^^^^^^^^^^^^
    14 │ 
    15 │ class Test {
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:17:2 lint/nursery/useExplicitFunctionReturnType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    15 │ class Test {
    16 │ 	constructor() {}
  > 17 │ 	get prop() {
       │ 	^^^^^^^^^^^^
  > 18 │ 		return 1;
  > 19 │ 	}
       │ 	^
    20 │ 	set prop() {}
    21 │ 	method() {
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:21:2 lint/nursery/useExplicitFunctionReturnType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    19 │ 	}
    20 │ 	set prop() {}
  > 21 │ 	method() {
       │ 	^^^^^^^^^^
  > 22 │ 		return;
  > 23 │ 	}
       │ 	^
    24 │ 	arrow = () => "arrow";
    25 │ 	private method() {
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:24:10 lint/nursery/useExplicitFunctionReturnType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    22 │ 		return;
    23 │ 	}
  > 24 │ 	arrow = () => "arrow";
       │ 	        ^^^^^^^^^^^^^
    25 │ 	private method() {
    26 │ 		return;
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:25:2 lint/nursery/useExplicitFunctionReturnType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    23 │ 	}
    24 │ 	arrow = () => "arrow";
  > 25 │ 	private method() {
       │ 	^^^^^^^^^^^^^^^^^^
  > 26 │ 		return;
  > 27 │ 	}
       │ 	^
    28 │ }
    29 │ 
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:31:2 lint/nursery/useExplicitFunctionReturnType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    30 │ const obj = {
  > 31 │ 	method() {
       │ 	^^^^^^^^^^
  > 32 │ 		return "test"
  > 33 │ 	}
       │ 	^
    34 │ }
    35 │ 
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:37:3 lint/nursery/useExplicitFunctionReturnType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    36 │ const obj = {
  > 37 │   get method() {
       │   ^^^^^^^^^^^^^^
  > 38 │     return "test"
  > 39 │   },
       │   ^
    40 │ };
    41 │ 
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:42:14 lint/nursery/useExplicitFunctionReturnType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    40 │ };
    41 │ 
  > 42 │ const func = (value: number) => ({ type: 'X', value }) as any;
       │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    43 │ const func = (value: number) => ({ type: 'X', value }) as Action;
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:43:14 lint/nursery/useExplicitFunctionReturnType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    42 │ const func = (value: number) => ({ type: 'X', value }) as any;
  > 43 │ const func = (value: number) => ({ type: 'X', value }) as Action;
       │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```
