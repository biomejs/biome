---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.ts
---
# Input
```ts
function test(a: number, b: number) {
	return;
}

function test() {
	return;
}

var fn = function () {
	return 1;
};

var arrowFn = () => "test";

class Test {
	constructor() {}
	get prop() {
		return 1;
	}
	set prop() {}
	method() {
		return;
	}
	arrow = () => "arrow";
	private method() {
		return;
	}
}

const obj = {
	method() {
		return "test"
	}
}

const obj = {
  get method() {
    return "test"
  },
};

const func = (value: number) => ({ type: 'X', value }) as any;
const func = (value: number) => ({ type: 'X', value }) as Action;

export default () => {};
export default function () {}

// check higher order functions
const arrowFn = () => () => {};
const arrowFn = () => function() {}
const arrowFn = () => {
  return () => { };
}

// does not support detecting a return of a function inside other statements like if, switch, etc.
// we check only the first statment 
const arrowFn = (a: number) => {
  if (a === 1) {
    return (): void => { };
  } else {
    return (): number => {
      return a + 2
    }
  }
}
const arrowFn = (a: number) => {
  switch (a) {
    case 1: {
      return (): void => { };
    }
    case 2: {
      return (): void => { };
    }
    default: {
      return (): void => { };
    }
  }
}

function f() {
  if (x) {
    return 0;
  }
  return (): void => {}
}

function fn() {
  let str = "hey";
  return function (): string {
      return str;
  };
}

const x = { prop: () => {} }
const x = { bar: { prop: () => {} } }
```

# Diagnostics
```
invalid.ts:1:1 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
  > 1 │ function test(a: number, b: number) {
      │ ^^^^^^^^^^^^^
    2 │ 	return;
    3 │ }
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:3:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    1 │ function test(a: number, b: number) {
    2 │ 	return;
  > 3 │ }
      │  
  > 4 │ 
  > 5 │ function test() {
      │ ^^^^^^^^^^^^^
    6 │ 	return;
    7 │ }
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:9:10 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
     7 │ }
     8 │ 
   > 9 │ var fn = function () {
       │          ^^^^^^^^^^^^^
  > 10 │ 	return 1;
  > 11 │ };
       │ ^
    12 │ 
    13 │ var arrowFn = () => "test";
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:13:15 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    11 │ };
    12 │ 
  > 13 │ var arrowFn = () => "test";
       │               ^^^^^^^^^^^^
    14 │ 
    15 │ class Test {
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:17:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    15 │ class Test {
    16 │ 	constructor() {}
  > 17 │ 	get prop() {
       │ 	^^^^^^^^^^^^
  > 18 │ 		return 1;
  > 19 │ 	}
       │ 	^
    20 │ 	set prop() {}
    21 │ 	method() {
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:21:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    19 │ 	}
    20 │ 	set prop() {}
  > 21 │ 	method() {
       │ 	^^^^^^^^^^
  > 22 │ 		return;
  > 23 │ 	}
       │ 	^
    24 │ 	arrow = () => "arrow";
    25 │ 	private method() {
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:24:10 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    22 │ 		return;
    23 │ 	}
  > 24 │ 	arrow = () => "arrow";
       │ 	        ^^^^^^^^^^^^^
    25 │ 	private method() {
    26 │ 		return;
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:25:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    23 │ 	}
    24 │ 	arrow = () => "arrow";
  > 25 │ 	private method() {
       │ 	^^^^^^^^^^^^^^^^^^
  > 26 │ 		return;
  > 27 │ 	}
       │ 	^
    28 │ }
    29 │ 
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:31:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    30 │ const obj = {
  > 31 │ 	method() {
       │ 	^^^^^^^^^^
  > 32 │ 		return "test"
  > 33 │ 	}
       │ 	^
    34 │ }
    35 │ 
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:37:3 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    36 │ const obj = {
  > 37 │   get method() {
       │   ^^^^^^^^^^^^^^
  > 38 │     return "test"
  > 39 │   },
       │   ^
    40 │ };
    41 │ 
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:42:14 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    40 │ };
    41 │ 
  > 42 │ const func = (value: number) => ({ type: 'X', value }) as any;
       │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    43 │ const func = (value: number) => ({ type: 'X', value }) as Action;
    44 │ 
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:43:14 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    42 │ const func = (value: number) => ({ type: 'X', value }) as any;
  > 43 │ const func = (value: number) => ({ type: 'X', value }) as Action;
       │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    44 │ 
    45 │ export default () => {};
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:45:16 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    43 │ const func = (value: number) => ({ type: 'X', value }) as Action;
    44 │ 
  > 45 │ export default () => {};
       │                ^^^^^^^^
    46 │ export default function () {}
    47 │ 
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:46:16 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    45 │ export default () => {};
  > 46 │ export default function () {}
       │                ^^^^^^^^^^^^^^
    47 │ 
    48 │ // check higher order functions
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:49:23 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    48 │ // check higher order functions
  > 49 │ const arrowFn = () => () => {};
       │                       ^^^^^^^^
    50 │ const arrowFn = () => function() {}
    51 │ const arrowFn = () => {
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:50:23 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    48 │ // check higher order functions
    49 │ const arrowFn = () => () => {};
  > 50 │ const arrowFn = () => function() {}
       │                       ^^^^^^^^^^^^^
    51 │ const arrowFn = () => {
    52 │   return () => { };
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:52:10 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    50 │ const arrowFn = () => function() {}
    51 │ const arrowFn = () => {
  > 52 │   return () => { };
       │          ^^^^^^^^^
    53 │ }
    54 │ 
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:57:17 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    55 │ // does not support detecting a return of a function inside other statements like if, switch, etc.
    56 │ // we check only the first statment·
  > 57 │ const arrowFn = (a: number) => {
       │                 ^^^^^^^^^^^^^^^^
  > 58 │   if (a === 1) {
        ...
  > 64 │   }
  > 65 │ }
       │ ^
    66 │ const arrowFn = (a: number) => {
    67 │   switch (a) {
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:66:17 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    64 │   }
    65 │ }
  > 66 │ const arrowFn = (a: number) => {
       │                 ^^^^^^^^^^^^^^^^
  > 67 │   switch (a) {
        ...
  > 77 │   }
  > 78 │ }
       │ ^
    79 │ 
    80 │ function f() {
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:78:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    76 │     }
    77 │   }
  > 78 │ }
       │  
  > 79 │ 
  > 80 │ function f() {
       │ ^^^^^^^^^^
    81 │   if (x) {
    82 │     return 0;
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:85:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    83 │   }
    84 │   return (): void => {}
  > 85 │ }
       │  
  > 86 │ 
  > 87 │ function fn() {
       │ ^^^^^^^^^^^
    88 │   let str = "hey";
    89 │   return function (): string {
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:94:19 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    92 │ }
    93 │ 
  > 94 │ const x = { prop: () => {} }
       │                   ^^^^^^^^^
    95 │ const x = { bar: { prop: () => {} } }
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```

```
invalid.ts:95:26 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Missing return type on function.
  
    94 │ const x = { prop: () => {} }
  > 95 │ const x = { bar: { prop: () => {} } }
       │                          ^^^^^^^^^
  
  i Declaring the return type makes the code self-documenting and can speed up TypeScript type checking.
  
  i Add a return type annotation.
  

```
