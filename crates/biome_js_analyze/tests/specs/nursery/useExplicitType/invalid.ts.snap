---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.ts
---
# Input
```ts
function test(a: number, b: number) {
	return;
}

function test() {
	return;
}

const fn = function () {
	return 1;
};

const arrowFn = () => "test";
const emptyArrowFn = () => {};

class Test {
	constructor() {}
	get prop() {
		return 1;
	}
	set prop(val) {
	}
	method() {
		return;
	}
	arrow = () => "arrow";
	private method() {
		return;
	}
}

const obj = {
	method() {
		return "test";
	},
};

const obj = {
	get method() {
		return "test";
	},
	set method(val) {
		console.log(val);
	}
};

const func = (value: number) => ({ type: "X", value }) as any;
const func = (value: number) => ({ type: "X", value }) as Action;

export default () => {};
export default function () {}

// check higher order functions
const arrowFn = () => () => {};
const arrowFn = () => function () {};
const arrowFn = () => {
	return () => {};
};

// does not support detecting a return of a function inside other statements like if, switch, etc.
// we check only the first statment
const arrowFn = (a: number) => {
	if (a === 1) {
		return (): void => {};
	} else {
		return (): number => {
			return a + 2;
		};
	}
};
const arrowFn = (a: number) => {
	switch (a) {
		case 1: {
			return (): void => {};
		}
		case 2: {
			return (): void => {};
		}
		default: {
			return (): void => {};
		}
	}
};

function f() {
	if (x) {
		return 0;
	}
	return (): void => {};
}

function fn() {
	let str = "hey";
	return function (): string {
		return str;
	};
}

const x = { namedFunctions: function alpha () {}, unNamedFunctions: function () {} };
const x = { bar: { namedFunctions: function alpha () {}, unNamedFunctions: function () {} } };


// Returning object from function
interface Behavior {
  attribute: string;
  namedFunc: () => string;
  arrowFunc: () => string;
}

function getObjectWithFunction(): Behavior {
  return {
    namedFunc: function myFunc() { return "value" },
    arrowFunc: () => {},
  }
};

interface Array<Type> {
	pop(): Type | undefined;
	push(...items: Type[]): number;
	method();
}

type MyObject = {
	(input: string);
	propertyName: string;
};

abstract class MyClass {
	public abstract method();
}

abstract class P<T> {
	abstract method(): T;
	abstract get poke();
}

declare namespace myLib {
	function makeGreeting(s: string);
}

declare module "foo" {
	export default function bar();
}

const x = { prop: () => {} }
const x = { bar: { prop: () => {} } }

const x = { dynamic: someFunc() }

let x;
let x = null;
let x = undefined;

const wrapped = {
	foo: () => "untyped",
};

[function () {}, () => {}];

```

# Diagnostics
```
invalid.ts:1:1 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
  > 1 │ function test(a: number, b: number) {
      │ ^^^^^^^^^^^^^
    2 │ 	return;
    3 │ }
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:5:1 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    3 │ }
    4 │ 
  > 5 │ function test() {
      │ ^^^^^^^^^^^^^
    6 │ 	return;
    7 │ }
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:9:12 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
     7 │ }
     8 │ 
   > 9 │ const fn = function () {
       │            ^^^^^^^^^^^^^
  > 10 │ 	return 1;
  > 11 │ };
       │ ^
    12 │ 
    13 │ const arrowFn = () => "test";
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:13:17 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    11 │ };
    12 │ 
  > 13 │ const arrowFn = () => "test";
       │                 ^^^^^^^^^^^^
    14 │ const emptyArrowFn = () => {};
    15 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:14:22 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    13 │ const arrowFn = () => "test";
  > 14 │ const emptyArrowFn = () => {};
       │                      ^^^^^^^^
    15 │ 
    16 │ class Test {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:18:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    16 │ class Test {
    17 │ 	constructor() {}
  > 18 │ 	get prop() {
       │ 	^^^^^^^^^^^^
  > 19 │ 		return 1;
  > 20 │ 	}
       │ 	^
    21 │ 	set prop(val) {
    22 │ 	}
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:21:11 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The parameter doesn't have a type defined.
  
    19 │ 		return 1;
    20 │ 	}
  > 21 │ 	set prop(val) {
       │ 	         ^^^
    22 │ 	}
    23 │ 	method() {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the parameter.
  

```

```
invalid.ts:23:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    21 │ 	set prop(val) {
    22 │ 	}
  > 23 │ 	method() {
       │ 	^^^^^^^^^^
  > 24 │ 		return;
  > 25 │ 	}
       │ 	^
    26 │ 	arrow = () => "arrow";
    27 │ 	private method() {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:26:10 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    24 │ 		return;
    25 │ 	}
  > 26 │ 	arrow = () => "arrow";
       │ 	        ^^^^^^^^^^^^^
    27 │ 	private method() {
    28 │ 		return;
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:27:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    25 │ 	}
    26 │ 	arrow = () => "arrow";
  > 27 │ 	private method() {
       │ 	^^^^^^^^^^^^^^^^^^
  > 28 │ 		return;
  > 29 │ 	}
       │ 	^
    30 │ }
    31 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:33:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    32 │ const obj = {
  > 33 │ 	method() {
       │ 	^^^^^^^^^^
  > 34 │ 		return "test";
  > 35 │ 	},
       │ 	^
    36 │ };
    37 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:39:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    38 │ const obj = {
  > 39 │ 	get method() {
       │ 	^^^^^^^^^^^^^^
  > 40 │ 		return "test";
  > 41 │ 	},
       │ 	^
    42 │ 	set method(val) {
    43 │ 		console.log(val);
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:42:13 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The parameter doesn't have a type defined.
  
    40 │ 		return "test";
    41 │ 	},
  > 42 │ 	set method(val) {
       │ 	           ^^^
    43 │ 		console.log(val);
    44 │ 	}
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the parameter.
  

```

```
invalid.ts:47:14 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    45 │ };
    46 │ 
  > 47 │ const func = (value: number) => ({ type: "X", value }) as any;
       │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    48 │ const func = (value: number) => ({ type: "X", value }) as Action;
    49 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:48:14 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    47 │ const func = (value: number) => ({ type: "X", value }) as any;
  > 48 │ const func = (value: number) => ({ type: "X", value }) as Action;
       │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    49 │ 
    50 │ export default () => {};
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:50:16 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    48 │ const func = (value: number) => ({ type: "X", value }) as Action;
    49 │ 
  > 50 │ export default () => {};
       │                ^^^^^^^^
    51 │ export default function () {}
    52 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:51:16 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    50 │ export default () => {};
  > 51 │ export default function () {}
       │                ^^^^^^^^^^^^^^
    52 │ 
    53 │ // check higher order functions
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:54:23 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    53 │ // check higher order functions
  > 54 │ const arrowFn = () => () => {};
       │                       ^^^^^^^^
    55 │ const arrowFn = () => function () {};
    56 │ const arrowFn = () => {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:55:23 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    53 │ // check higher order functions
    54 │ const arrowFn = () => () => {};
  > 55 │ const arrowFn = () => function () {};
       │                       ^^^^^^^^^^^^^^
    56 │ const arrowFn = () => {
    57 │ 	return () => {};
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:57:9 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    55 │ const arrowFn = () => function () {};
    56 │ const arrowFn = () => {
  > 57 │ 	return () => {};
       │ 	       ^^^^^^^^
    58 │ };
    59 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:62:17 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    60 │ // does not support detecting a return of a function inside other statements like if, switch, etc.
    61 │ // we check only the first statment
  > 62 │ const arrowFn = (a: number) => {
       │                 ^^^^^^^^^^^^^^^^
  > 63 │ 	if (a === 1) {
        ...
  > 69 │ 	}
  > 70 │ };
       │ ^
    71 │ const arrowFn = (a: number) => {
    72 │ 	switch (a) {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:71:17 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    69 │ 	}
    70 │ };
  > 71 │ const arrowFn = (a: number) => {
       │                 ^^^^^^^^^^^^^^^^
  > 72 │ 	switch (a) {
        ...
  > 82 │ 	}
  > 83 │ };
       │ ^
    84 │ 
    85 │ function f() {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:85:1 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    83 │ };
    84 │ 
  > 85 │ function f() {
       │ ^^^^^^^^^^
    86 │ 	if (x) {
    87 │ 		return 0;
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:92:1 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    90 │ }
    91 │ 
  > 92 │ function fn() {
       │ ^^^^^^^^^^^
    93 │ 	let str = "hey";
    94 │ 	return function (): string {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:99:29 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
     97 │ }
     98 │ 
   > 99 │ const x = { namedFunctions: function alpha () {}, unNamedFunctions: function () {} };
        │                             ^^^^^^^^^^^^^^
    100 │ const x = { bar: { namedFunctions: function alpha () {}, unNamedFunctions: function () {} } };
    101 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:99:69 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
     97 │ }
     98 │ 
   > 99 │ const x = { namedFunctions: function alpha () {}, unNamedFunctions: function () {} };
        │                                                                     ^^^^^^^^^^^^^^
    100 │ const x = { bar: { namedFunctions: function alpha () {}, unNamedFunctions: function () {} } };
    101 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:100:36 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
     99 │ const x = { namedFunctions: function alpha () {}, unNamedFunctions: function () {} };
  > 100 │ const x = { bar: { namedFunctions: function alpha () {}, unNamedFunctions: function () {} } };
        │                                    ^^^^^^^^^^^^^^
    101 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:100:76 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
     99 │ const x = { namedFunctions: function alpha () {}, unNamedFunctions: function () {} };
  > 100 │ const x = { bar: { namedFunctions: function alpha () {}, unNamedFunctions: function () {} } };
        │                                                                            ^^^^^^^^^^^^^^
    101 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:112:16 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    110 │ function getObjectWithFunction(): Behavior {
    111 │   return {
  > 112 │     namedFunc: function myFunc() { return "value" },
        │                ^^^^^^^^^^^^^^^
    113 │     arrowFunc: () => {},
    114 │   }
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:120:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    118 │ 	pop(): Type | undefined;
    119 │ 	push(...items: Type[]): number;
  > 120 │ 	method();
        │ 	^^^^^^^^^
    121 │ }
    122 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:124:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    123 │ type MyObject = {
  > 124 │ 	(input: string);
        │ 	^^^^^^^^^^^^^^^^
    125 │ 	propertyName: string;
    126 │ };
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:129:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    128 │ abstract class MyClass {
  > 129 │ 	public abstract method();
        │ 	^^^^^^^^^^^^^^^^^^^^^^^^^
    130 │ }
    131 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:134:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    132 │ abstract class P<T> {
    133 │ 	abstract method(): T;
  > 134 │ 	abstract get poke();
        │ 	^^^^^^^^^^^^^^^^^^^^
    135 │ }
    136 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:138:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function declaration.
  
    137 │ declare namespace myLib {
  > 138 │ 	function makeGreeting(s: string);
        │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    139 │ }
    140 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function declaration.
  

```

```
invalid.ts:142:17 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function declaration.
  
    141 │ declare module "foo" {
  > 142 │ 	export default function bar();
        │ 	               ^^^^^^^^^^^^^^^
    143 │ }
    144 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function declaration.
  

```

```
invalid.ts:145:19 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    143 │ }
    144 │ 
  > 145 │ const x = { prop: () => {} }
        │                   ^^^^^^^^
    146 │ const x = { bar: { prop: () => {} } }
    147 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:146:26 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    145 │ const x = { prop: () => {} }
  > 146 │ const x = { bar: { prop: () => {} } }
        │                          ^^^^^^^^
    147 │ 
    148 │ const x = { dynamic: someFunc() }
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:148:7 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The variable doesn't have a type defined.
  
    146 │ const x = { bar: { prop: () => {} } }
    147 │ 
  > 148 │ const x = { dynamic: someFunc() }
        │       ^
    149 │ 
    150 │ let x;
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the variable.
  

```

```
invalid.ts:150:5 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The variable doesn't have a type defined.
  
    148 │ const x = { dynamic: someFunc() }
    149 │ 
  > 150 │ let x;
        │     ^
    151 │ let x = null;
    152 │ let x = undefined;
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the variable.
  

```

```
invalid.ts:151:5 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The variable doesn't have a type defined.
  
    150 │ let x;
  > 151 │ let x = null;
        │     ^
    152 │ let x = undefined;
    153 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the variable.
  

```

```
invalid.ts:152:5 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The variable doesn't have a type defined.
  
    150 │ let x;
    151 │ let x = null;
  > 152 │ let x = undefined;
        │     ^
    153 │ 
    154 │ const wrapped = {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the variable.
  

```

```
invalid.ts:155:7 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    154 │ const wrapped = {
  > 155 │ 	foo: () => "untyped",
        │ 	     ^^^^^^^^^^^^^^^
    156 │ };
    157 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:158:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    156 │ };
    157 │ 
  > 158 │ [function () {}, () => {}];
        │  ^^^^^^^^^^^^^^
    159 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:158:18 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    156 │ };
    157 │ 
  > 158 │ [function () {}, () => {}];
        │                  ^^^^^^^^
    159 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```
