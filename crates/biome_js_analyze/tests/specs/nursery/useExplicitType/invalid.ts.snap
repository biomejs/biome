---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.ts
---
# Input
```ts
function test(a: number, b: number) {
	return;
}

function test() {
	return;
}

const fn = function () {
	return 1;
};

const arrowFn = () => "test";
const emptyArrowFn = () => {};

class Test {
	constructor() {}
	get prop() {
		return 1;
	}
	set prop() {}
	method() {
		return;
	}
	arrow = () => "arrow";
	private method() {
		return;
	}
}

const obj = {
	method() {
		return "test";
	},
};

const obj = {
	get method() {
		return "test";
	},
};

const func = (value: number) => ({ type: "X", value }) as any;
const func = (value: number) => ({ type: "X", value }) as Action;

export default () => {};
export default function () {}

// check higher order functions
const arrowFn = () => () => {};
const arrowFn = () => function () {};
const arrowFn = () => {
	return () => {};
};

// does not support detecting a return of a function inside other statements like if, switch, etc.
// we check only the first statment
const arrowFn = (a: number) => {
	if (a === 1) {
		return (): void => {};
	} else {
		return (): number => {
			return a + 2;
		};
	}
};
const arrowFn = (a: number) => {
	switch (a) {
		case 1: {
			return (): void => {};
		}
		case 2: {
			return (): void => {};
		}
		default: {
			return (): void => {};
		}
	}
};

function f() {
	if (x) {
		return 0;
	}
	return (): void => {};
}

function fn() {
	let str = "hey";
	return function (): string {
		return str;
	};
}

const x = { namedFunctions: function alpha () {}, unNamedFunctions: function () {} };
const x = { bar: { namedFunctions: function alpha () {}, unNamedFunctions: function () {} } };


// Returning object from function
interface Behavior {
  attribute: string;
  namedFunc: () => string;
  arrowFunc: () => string;
}

function getObjectWithFunction(): Behavior {
  return {
    namedFunc: function myFunc() { return "value" },
    arrowFunc: () => {},
  }
};

interface Array<Type> {
	pop(): Type | undefined;
	push(...items: Type[]): number;
	method();
}

type MyObject = {
	(input: string); // FIXME: this shouldn't error
	propertyName: string;
};

abstract class MyClass {
	public abstract method();
}

abstract class P<T> {
	abstract method(): T;
	abstract get poke();
}

declare namespace myLib {
	function makeGreeting(s: string);
}

declare module "foo" {
	export default function bar();
}

const x = { prop: () => {} }
const x = { bar: { prop: () => {} } }

const x = { dynamic: someFunc() }

let x;
let x = null;
let x = undefined;

const wrapped = {
	foo: () => "untyped",
};

```

# Diagnostics
```
invalid.ts:1:1 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
  > 1 │ function test(a: number, b: number) {
      │ ^^^^^^^^^^^^^
    2 │ 	return;
    3 │ }
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:5:1 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    3 │ }
    4 │ 
  > 5 │ function test() {
      │ ^^^^^^^^^^^^^
    6 │ 	return;
    7 │ }
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:9:12 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
     7 │ }
     8 │ 
   > 9 │ const fn = function () {
       │            ^^^^^^^^^^^^^
  > 10 │ 	return 1;
  > 11 │ };
       │ ^
    12 │ 
    13 │ const arrowFn = () => "test";
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:13:17 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    11 │ };
    12 │ 
  > 13 │ const arrowFn = () => "test";
       │                 ^^^^^^^^^^^^
    14 │ const emptyArrowFn = () => {};
    15 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:14:22 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    13 │ const arrowFn = () => "test";
  > 14 │ const emptyArrowFn = () => {};
       │                      ^^^^^^^^
    15 │ 
    16 │ class Test {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:18:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    16 │ class Test {
    17 │ 	constructor() {}
  > 18 │ 	get prop() {
       │ 	^^^^^^^^^^^^
  > 19 │ 		return 1;
  > 20 │ 	}
       │ 	^
    21 │ 	set prop() {}
    22 │ 	method() {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:22:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    20 │ 	}
    21 │ 	set prop() {}
  > 22 │ 	method() {
       │ 	^^^^^^^^^^
  > 23 │ 		return;
  > 24 │ 	}
       │ 	^
    25 │ 	arrow = () => "arrow";
    26 │ 	private method() {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:25:10 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    23 │ 		return;
    24 │ 	}
  > 25 │ 	arrow = () => "arrow";
       │ 	        ^^^^^^^^^^^^^
    26 │ 	private method() {
    27 │ 		return;
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:26:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    24 │ 	}
    25 │ 	arrow = () => "arrow";
  > 26 │ 	private method() {
       │ 	^^^^^^^^^^^^^^^^^^
  > 27 │ 		return;
  > 28 │ 	}
       │ 	^
    29 │ }
    30 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:32:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    31 │ const obj = {
  > 32 │ 	method() {
       │ 	^^^^^^^^^^
  > 33 │ 		return "test";
  > 34 │ 	},
       │ 	^
    35 │ };
    36 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:38:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    37 │ const obj = {
  > 38 │ 	get method() {
       │ 	^^^^^^^^^^^^^^
  > 39 │ 		return "test";
  > 40 │ 	},
       │ 	^
    41 │ };
    42 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:43:14 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    41 │ };
    42 │ 
  > 43 │ const func = (value: number) => ({ type: "X", value }) as any;
       │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    44 │ const func = (value: number) => ({ type: "X", value }) as Action;
    45 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:44:14 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    43 │ const func = (value: number) => ({ type: "X", value }) as any;
  > 44 │ const func = (value: number) => ({ type: "X", value }) as Action;
       │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    45 │ 
    46 │ export default () => {};
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:46:16 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    44 │ const func = (value: number) => ({ type: "X", value }) as Action;
    45 │ 
  > 46 │ export default () => {};
       │                ^^^^^^^^
    47 │ export default function () {}
    48 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:47:16 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    46 │ export default () => {};
  > 47 │ export default function () {}
       │                ^^^^^^^^^^^^^^
    48 │ 
    49 │ // check higher order functions
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:50:23 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    49 │ // check higher order functions
  > 50 │ const arrowFn = () => () => {};
       │                       ^^^^^^^^
    51 │ const arrowFn = () => function () {};
    52 │ const arrowFn = () => {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:51:23 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    49 │ // check higher order functions
    50 │ const arrowFn = () => () => {};
  > 51 │ const arrowFn = () => function () {};
       │                       ^^^^^^^^^^^^^^
    52 │ const arrowFn = () => {
    53 │ 	return () => {};
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:53:9 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    51 │ const arrowFn = () => function () {};
    52 │ const arrowFn = () => {
  > 53 │ 	return () => {};
       │ 	       ^^^^^^^^
    54 │ };
    55 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:58:17 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    56 │ // does not support detecting a return of a function inside other statements like if, switch, etc.
    57 │ // we check only the first statment
  > 58 │ const arrowFn = (a: number) => {
       │                 ^^^^^^^^^^^^^^^^
  > 59 │ 	if (a === 1) {
        ...
  > 65 │ 	}
  > 66 │ };
       │ ^
    67 │ const arrowFn = (a: number) => {
    68 │ 	switch (a) {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:67:17 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    65 │ 	}
    66 │ };
  > 67 │ const arrowFn = (a: number) => {
       │                 ^^^^^^^^^^^^^^^^
  > 68 │ 	switch (a) {
        ...
  > 78 │ 	}
  > 79 │ };
       │ ^
    80 │ 
    81 │ function f() {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:81:1 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    79 │ };
    80 │ 
  > 81 │ function f() {
       │ ^^^^^^^^^^
    82 │ 	if (x) {
    83 │ 		return 0;
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:88:1 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    86 │ }
    87 │ 
  > 88 │ function fn() {
       │ ^^^^^^^^^^^
    89 │ 	let str = "hey";
    90 │ 	return function (): string {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:95:29 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    93 │ }
    94 │ 
  > 95 │ const x = { namedFunctions: function alpha () {}, unNamedFunctions: function () {} };
       │                             ^^^^^^^^^^^^^^
    96 │ const x = { bar: { namedFunctions: function alpha () {}, unNamedFunctions: function () {} } };
    97 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:95:69 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    93 │ }
    94 │ 
  > 95 │ const x = { namedFunctions: function alpha () {}, unNamedFunctions: function () {} };
       │                                                                     ^^^^^^^^^^^^^^
    96 │ const x = { bar: { namedFunctions: function alpha () {}, unNamedFunctions: function () {} } };
    97 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:96:36 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    95 │ const x = { namedFunctions: function alpha () {}, unNamedFunctions: function () {} };
  > 96 │ const x = { bar: { namedFunctions: function alpha () {}, unNamedFunctions: function () {} } };
       │                                    ^^^^^^^^^^^^^^
    97 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:96:76 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    95 │ const x = { namedFunctions: function alpha () {}, unNamedFunctions: function () {} };
  > 96 │ const x = { bar: { namedFunctions: function alpha () {}, unNamedFunctions: function () {} } };
       │                                                                            ^^^^^^^^^^^^^^
    97 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:108:16 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    106 │ function getObjectWithFunction(): Behavior {
    107 │   return {
  > 108 │     namedFunc: function myFunc() { return "value" },
        │                ^^^^^^^^^^^^^^^
    109 │     arrowFunc: () => {},
    110 │   }
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:116:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    114 │ 	pop(): Type | undefined;
    115 │ 	push(...items: Type[]): number;
  > 116 │ 	method();
        │ 	^^^^^^^^^
    117 │ }
    118 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:120:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    119 │ type MyObject = {
  > 120 │ 	(input: string); // FIXME: this shouldn't error
        │ 	^^^^^^^^^^^^^^^^
    121 │ 	propertyName: string;
    122 │ };
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:125:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    124 │ abstract class MyClass {
  > 125 │ 	public abstract method();
        │ 	^^^^^^^^^^^^^^^^^^^^^^^^^
    126 │ }
    127 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:130:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on member.
  
    128 │ abstract class P<T> {
    129 │ 	abstract method(): T;
  > 130 │ 	abstract get poke();
        │ 	^^^^^^^^^^^^^^^^^^^^
    131 │ }
    132 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the member.
  

```

```
invalid.ts:134:2 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function declaration.
  
    133 │ declare namespace myLib {
  > 134 │ 	function makeGreeting(s: string);
        │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    135 │ }
    136 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function declaration.
  

```

```
invalid.ts:138:17 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function declaration.
  
    137 │ declare module "foo" {
  > 138 │ 	export default function bar();
        │ 	               ^^^^^^^^^^^^^^^
    139 │ }
    140 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function declaration.
  

```

```
invalid.ts:141:19 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    139 │ }
    140 │ 
  > 141 │ const x = { prop: () => {} }
        │                   ^^^^^^^^
    142 │ const x = { bar: { prop: () => {} } }
    143 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:142:26 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    141 │ const x = { prop: () => {} }
  > 142 │ const x = { bar: { prop: () => {} } }
        │                          ^^^^^^^^
    143 │ 
    144 │ const x = { dynamic: someFunc() }
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```

```
invalid.ts:144:7 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The variable doesn't have a type defined.
  
    142 │ const x = { bar: { prop: () => {} } }
    143 │ 
  > 144 │ const x = { dynamic: someFunc() }
        │       ^
    145 │ 
    146 │ let x;
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the variable.
  

```

```
invalid.ts:146:5 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The variable doesn't have a type defined.
  
    144 │ const x = { dynamic: someFunc() }
    145 │ 
  > 146 │ let x;
        │     ^
    147 │ let x = null;
    148 │ let x = undefined;
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the variable.
  

```

```
invalid.ts:147:5 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The variable doesn't have a type defined.
  
    146 │ let x;
  > 147 │ let x = null;
        │     ^
    148 │ let x = undefined;
    149 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the variable.
  

```

```
invalid.ts:148:5 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The variable doesn't have a type defined.
  
    146 │ let x;
    147 │ let x = null;
  > 148 │ let x = undefined;
        │     ^
    149 │ 
    150 │ const wrapped = {
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the variable.
  

```

```
invalid.ts:151:7 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Missing return type on function.
  
    150 │ const wrapped = {
  > 151 │ 	foo: () => "untyped",
        │ 	     ^^^^^^^^^^^^^^^
    152 │ };
    153 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a return type to the function.
  

```
