---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalidArguments.ts
snapshot_kind: text
---
# Input
```ts
// argument without type
export var arrowFn = (arg): string => `test ${arg}`;

// argument with any type
export var arrowFn = (arg: any): string => `test ${arg}`;

var foo = arr.map((i) => i * i);
new Promise((resolve) => resolve(1));

// js binding argument
new Promise(resolve => resolve(1));


class Test {
	constructor(foo) {}
	get prop(): number {
		return 1;
	}
	set prop(foo) {}
	method(foo): void {
		return;
	}
	arrow = (foo): string => "arrow";
}

var obj = {
	method(foo): string {
		return "test";
	},
	set prop(foo) {}
};


```

# Diagnostics
```
invalidArguments.ts:2:23 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The parameter doesn't have a type defined.
  
    1 │ // argument without type
  > 2 │ export var arrowFn = (arg): string => `test ${arg}`;
      │                       ^^^
    3 │ 
    4 │ // argument with any type
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the parameter.
  

```

```
invalidArguments.ts:5:28 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The parameter has an any type.
  
    4 │ // argument with any type
  > 5 │ export var arrowFn = (arg: any): string => `test ${arg}`;
      │                            ^^^
    6 │ 
    7 │ var foo = arr.map((i) => i * i);
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Replace any with unknown or a more specific type.
  

```

```
invalidArguments.ts:7:20 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The parameter doesn't have a type defined.
  
    5 │ export var arrowFn = (arg: any): string => `test ${arg}`;
    6 │ 
  > 7 │ var foo = arr.map((i) => i * i);
      │                    ^
    8 │ new Promise((resolve) => resolve(1));
    9 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the parameter.
  

```

```
invalidArguments.ts:8:14 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The parameter doesn't have a type defined.
  
     7 │ var foo = arr.map((i) => i * i);
   > 8 │ new Promise((resolve) => resolve(1));
       │              ^^^^^^^
     9 │ 
    10 │ // js binding argument
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the parameter.
  

```

```
invalidArguments.ts:11:13 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The parameter doesn't have a type defined.
  
    10 │ // js binding argument
  > 11 │ new Promise(resolve => resolve(1));
       │             ^^^^^^^
    12 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the parameter.
  

```

```
invalidArguments.ts:15:14 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The parameter doesn't have a type defined.
  
    14 │ class Test {
  > 15 │ 	constructor(foo) {}
       │ 	            ^^^
    16 │ 	get prop(): number {
    17 │ 		return 1;
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the parameter.
  

```

```
invalidArguments.ts:19:11 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The parameter doesn't have a type defined.
  
    17 │ 		return 1;
    18 │ 	}
  > 19 │ 	set prop(foo) {}
       │ 	         ^^^
    20 │ 	method(foo): void {
    21 │ 		return;
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the parameter.
  

```

```
invalidArguments.ts:20:9 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The parameter doesn't have a type defined.
  
    18 │ 	}
    19 │ 	set prop(foo) {}
  > 20 │ 	method(foo): void {
       │ 	       ^^^
    21 │ 		return;
    22 │ 	}
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the parameter.
  

```

```
invalidArguments.ts:23:11 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The parameter doesn't have a type defined.
  
    21 │ 		return;
    22 │ 	}
  > 23 │ 	arrow = (foo): string => "arrow";
       │ 	         ^^^
    24 │ }
    25 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the parameter.
  

```

```
invalidArguments.ts:27:9 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The parameter doesn't have a type defined.
  
    26 │ var obj = {
  > 27 │ 	method(foo): string {
       │ 	       ^^^
    28 │ 		return "test";
    29 │ 	},
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the parameter.
  

```

```
invalidArguments.ts:30:11 lint/nursery/useExplicitType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × The parameter doesn't have a type defined.
  
    28 │ 		return "test";
    29 │ 	},
  > 30 │ 	set prop(foo) {}
       │ 	         ^^^
    31 │ };
    32 │ 
  
  i Declaring the type makes the code self-documented and can speed up TypeScript type checking.
  
  i Add a type to the parameter.
  

```
