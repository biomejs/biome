---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```jsx
const a = 'a' + 'b'
const a = 'a' + 'b' + 'c'
const a = 'a' + ('b' + 'c')
const a = ('a' + 'b') + 'c'
const a = foo + 'a' + 'b' + 'c'
const a = (foo + 'a') + ('b' + 'c')
const a = ((foo + 'a') + ('b' + 'c') + 1)
const a = 'a' + `b`
const a = `a` + 'b'
const a = `a` + `b`
const a = 'a' + 1
const a = 1 + '1'
const a = 1 + `1`
const a = `1` + 1
const a = 1 + 1 + ""

```

# Diagnostics
```
invalid.js:1:11 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
  > 1 │ const a = 'a' + 'b'
      │           ^^^^^^^^^
    2 │ const a = 'a' + 'b' + 'c'
    3 │ const a = 'a' + ('b' + 'c')
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     1    │ - const·a·=·'a'·+·'b'
        1 │ + const·a·=·"ab"
     2  2 │   const a = 'a' + 'b' + 'c'
     3  3 │   const a = 'a' + ('b' + 'c')
  

```

```
invalid.js:2:11 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    1 │ const a = 'a' + 'b'
  > 2 │ const a = 'a' + 'b' + 'c'
      │           ^^^^^^^^^^^^^^^
    3 │ const a = 'a' + ('b' + 'c')
    4 │ const a = ('a' + 'b') + 'c'
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     1  1 │   const a = 'a' + 'b'
     2    │ - const·a·=·'a'·+·'b'·+·'c'
        2 │ + const·a·=·"abc"
     3  3 │   const a = 'a' + ('b' + 'c')
     4  4 │   const a = ('a' + 'b') + 'c'
  

```

```
invalid.js:3:11 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    1 │ const a = 'a' + 'b'
    2 │ const a = 'a' + 'b' + 'c'
  > 3 │ const a = 'a' + ('b' + 'c')
      │           ^^^^^^^^^^^^^^^^^
    4 │ const a = ('a' + 'b') + 'c'
    5 │ const a = foo + 'a' + 'b' + 'c'
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     1  1 │   const a = 'a' + 'b'
     2  2 │   const a = 'a' + 'b' + 'c'
     3    │ - const·a·=·'a'·+·('b'·+·'c')
        3 │ + const·a·=·"abc"
     4  4 │   const a = ('a' + 'b') + 'c'
     5  5 │   const a = foo + 'a' + 'b' + 'c'
  

```

```
invalid.js:4:11 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    2 │ const a = 'a' + 'b' + 'c'
    3 │ const a = 'a' + ('b' + 'c')
  > 4 │ const a = ('a' + 'b') + 'c'
      │           ^^^^^^^^^^^^^^^^^
    5 │ const a = foo + 'a' + 'b' + 'c'
    6 │ const a = (foo + 'a') + ('b' + 'c')
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     2  2 │   const a = 'a' + 'b' + 'c'
     3  3 │   const a = 'a' + ('b' + 'c')
     4    │ - const·a·=·('a'·+·'b')·+·'c'
        4 │ + const·a·=·"abc"
     5  5 │   const a = foo + 'a' + 'b' + 'c'
     6  6 │   const a = (foo + 'a') + ('b' + 'c')
  

```

```
invalid.js:5:11 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    3 │ const a = 'a' + ('b' + 'c')
    4 │ const a = ('a' + 'b') + 'c'
  > 5 │ const a = foo + 'a' + 'b' + 'c'
      │           ^^^^^^^^^^^^^^^^^^^^^
    6 │ const a = (foo + 'a') + ('b' + 'c')
    7 │ const a = ((foo + 'a') + ('b' + 'c') + 1)
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     3  3 │   const a = 'a' + ('b' + 'c')
     4  4 │   const a = ('a' + 'b') + 'c'
     5    │ - const·a·=·foo·+·'a'·+·'b'·+·'c'
        5 │ + const·a·=·foo·+·'a'·+·"bc"
     6  6 │   const a = (foo + 'a') + ('b' + 'c')
     7  7 │   const a = ((foo + 'a') + ('b' + 'c') + 1)
  

```

```
invalid.js:6:26 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    4 │ const a = ('a' + 'b') + 'c'
    5 │ const a = foo + 'a' + 'b' + 'c'
  > 6 │ const a = (foo + 'a') + ('b' + 'c')
      │                          ^^^^^^^^^
    7 │ const a = ((foo + 'a') + ('b' + 'c') + 1)
    8 │ const a = 'a' + `b`
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     4  4 │   const a = ('a' + 'b') + 'c'
     5  5 │   const a = foo + 'a' + 'b' + 'c'
     6    │ - const·a·=·(foo·+·'a')·+·('b'·+·'c')
        6 │ + const·a·=·(foo·+·'a')·+·("bc")
     7  7 │   const a = ((foo + 'a') + ('b' + 'c') + 1)
     8  8 │   const a = 'a' + `b`
  

```

```
invalid.js:7:27 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    5 │ const a = foo + 'a' + 'b' + 'c'
    6 │ const a = (foo + 'a') + ('b' + 'c')
  > 7 │ const a = ((foo + 'a') + ('b' + 'c') + 1)
      │                           ^^^^^^^^^
    8 │ const a = 'a' + `b`
    9 │ const a = `a` + 'b'
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     5  5 │   const a = foo + 'a' + 'b' + 'c'
     6  6 │   const a = (foo + 'a') + ('b' + 'c')
     7    │ - const·a·=·((foo·+·'a')·+·('b'·+·'c')·+·1)
        7 │ + const·a·=·((foo·+·'a')·+·("bc")·+·1)
     8  8 │   const a = 'a' + `b`
     9  9 │   const a = `a` + 'b'
  

```

```
invalid.js:8:11 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
     6 │ const a = (foo + 'a') + ('b' + 'c')
     7 │ const a = ((foo + 'a') + ('b' + 'c') + 1)
   > 8 │ const a = 'a' + `b`
       │           ^^^^^^^^^
     9 │ const a = `a` + 'b'
    10 │ const a = `a` + `b`
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     6  6 │   const a = (foo + 'a') + ('b' + 'c')
     7  7 │   const a = ((foo + 'a') + ('b' + 'c') + 1)
     8    │ - const·a·=·'a'·+·`b`
        8 │ + const·a·=·"ab"
     9  9 │   const a = `a` + 'b'
    10 10 │   const a = `a` + `b`
  

```

```
invalid.js:9:11 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
     7 │ const a = ((foo + 'a') + ('b' + 'c') + 1)
     8 │ const a = 'a' + `b`
   > 9 │ const a = `a` + 'b'
       │           ^^^^^^^^^
    10 │ const a = `a` + `b`
    11 │ const a = 'a' + 1
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     7  7 │   const a = ((foo + 'a') + ('b' + 'c') + 1)
     8  8 │   const a = 'a' + `b`
     9    │ - const·a·=·`a`·+·'b'
        9 │ + const·a·=·"ab"
    10 10 │   const a = `a` + `b`
    11 11 │   const a = 'a' + 1
  

```

```
invalid.js:10:11 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
     8 │ const a = 'a' + `b`
     9 │ const a = `a` + 'b'
  > 10 │ const a = `a` + `b`
       │           ^^^^^^^^^
    11 │ const a = 'a' + 1
    12 │ const a = 1 + '1'
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     8  8 │   const a = 'a' + `b`
     9  9 │   const a = `a` + 'b'
    10    │ - const·a·=·`a`·+·`b`
       10 │ + const·a·=·"ab"
    11 11 │   const a = 'a' + 1
    12 12 │   const a = 1 + '1'
  

```

```
invalid.js:11:11 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
     9 │ const a = `a` + 'b'
    10 │ const a = `a` + `b`
  > 11 │ const a = 'a' + 1
       │           ^^^^^^^
    12 │ const a = 1 + '1'
    13 │ const a = 1 + `1`
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
     9  9 │   const a = `a` + 'b'
    10 10 │   const a = `a` + `b`
    11    │ - const·a·=·'a'·+·1
       11 │ + const·a·=·"a1"
    12 12 │   const a = 1 + '1'
    13 13 │   const a = 1 + `1`
  

```

```
invalid.js:12:11 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    10 │ const a = `a` + `b`
    11 │ const a = 'a' + 1
  > 12 │ const a = 1 + '1'
       │           ^^^^^^^
    13 │ const a = 1 + `1`
    14 │ const a = `1` + 1
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
    10 10 │   const a = `a` + `b`
    11 11 │   const a = 'a' + 1
    12    │ - const·a·=·1·+·'1'
       12 │ + const·a·=·"11"
    13 13 │   const a = 1 + `1`
    14 14 │   const a = `1` + 1
  

```

```
invalid.js:13:11 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    11 │ const a = 'a' + 1
    12 │ const a = 1 + '1'
  > 13 │ const a = 1 + `1`
       │           ^^^^^^^
    14 │ const a = `1` + 1
    15 │ const a = 1 + 1 + ""
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
    11 11 │   const a = 'a' + 1
    12 12 │   const a = 1 + '1'
    13    │ - const·a·=·1·+·`1`
       13 │ + const·a·=·"11"
    14 14 │   const a = `1` + 1
    15 15 │   const a = 1 + 1 + ""
  

```

```
invalid.js:14:11 lint/nursery/noUselessStringConcat  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    12 │ const a = 1 + '1'
    13 │ const a = 1 + `1`
  > 14 │ const a = `1` + 1
       │           ^^^^^^^
    15 │ const a = 1 + 1 + ""
    16 │ 
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  
  i Unsafe fix: Remove the useless concatenation
  
    12 12 │   const a = 1 + '1'
    13 13 │   const a = 1 + `1`
    14    │ - const·a·=·`1`·+·1
       14 │ + const·a·=·"11"
    15 15 │   const a = 1 + 1 + ""
    16 16 │   
  

```

```
invalid.js:15:11 lint/nursery/noUselessStringConcat ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Useless string concatenation.
  
    13 │ const a = 1 + `1`
    14 │ const a = `1` + 1
  > 15 │ const a = 1 + 1 + ""
       │           ^^^^^^^^^^
    16 │ 
  
  i Consider turning the expression into a single string to improve readability and runtime performance.
  

```
