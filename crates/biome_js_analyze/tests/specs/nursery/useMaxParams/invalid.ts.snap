---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.ts
---
# Input
```ts
interface MyInterface {
    value: number;
}

function withThisParam(this: MyInterface, a: number, b: number, c: number, d: number, e: number): number {
    return this.value + a + b + c + d + e;
}

function tooManyParamsWithThis(this: MyInterface, a: number, b: number, c: number, d: number, e: number, f: number): number {
    return this.value + a + b + c + d + e + f;
}

declare function makeDate(m: number, d: number, y: number, h: number, min: number, s: number): Date;

type sum = (a: number, b: number, c: number, d: number, e: number) => number;

```

# Diagnostics
```
invalid.ts:5:1 lint/nursery/useMaxParams ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Function has 6 parameters, but only 4 are allowed.
  
    3 │ }
    4 │ 
  > 5 │ function withThisParam(this: MyInterface, a: number, b: number, c: number, d: number, e: number): number {
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 6 │     return this.value + a + b + c + d + e;
  > 7 │ }
      │ ^
    8 │ 
    9 │ function tooManyParamsWithThis(this: MyInterface, a: number, b: number, c: number, d: number, e: number, f: number): number {
  
  i Functions with many parameters are hard to read and maintain.
  
  i Consider using an options object, splitting into smaller functions, or grouping related parameters.
  

```

```
invalid.ts:9:1 lint/nursery/useMaxParams ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Function has 7 parameters, but only 4 are allowed.
  
     7 │ }
     8 │ 
   > 9 │ function tooManyParamsWithThis(this: MyInterface, a: number, b: number, c: number, d: number, e: number, f: number): number {
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 10 │     return this.value + a + b + c + d + e + f;
  > 11 │ }
       │ ^
    12 │ 
    13 │ declare function makeDate(m: number, d: number, y: number, h: number, min: number, s: number): Date;
  
  i Functions with many parameters are hard to read and maintain.
  
  i Consider using an options object, splitting into smaller functions, or grouping related parameters.
  

```

```
invalid.ts:13:9 lint/nursery/useMaxParams ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Function has 6 parameters, but only 4 are allowed.
  
    11 │ }
    12 │ 
  > 13 │ declare function makeDate(m: number, d: number, y: number, h: number, min: number, s: number): Date;
       │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    14 │ 
    15 │ type sum = (a: number, b: number, c: number, d: number, e: number) => number;
  
  i Functions with many parameters are hard to read and maintain.
  
  i Consider using an options object, splitting into smaller functions, or grouping related parameters.
  

```

```
invalid.ts:15:1 lint/nursery/useMaxParams ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Function has 5 parameters, but only 4 are allowed.
  
    13 │ declare function makeDate(m: number, d: number, y: number, h: number, min: number, s: number): Date;
    14 │ 
  > 15 │ type sum = (a: number, b: number, c: number, d: number, e: number) => number;
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    16 │ 
  
  i Functions with many parameters are hard to read and maintain.
  
  i Consider using an options object, splitting into smaller functions, or grouping related parameters.
  

```
