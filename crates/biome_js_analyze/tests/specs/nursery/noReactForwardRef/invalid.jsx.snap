---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.jsx
---
# Input
```jsx
import * as React from "react";

const Component1 = React.forwardRef((props, ref) => {
	return null;
});

const Component2 = React.forwardRef((props, ref) => null);

const Component3 = React.forwardRef(function (props, ref) {
	return null;
});

const Component4 = React.forwardRef(function Component(props) {
	return null;
});

const Component5 = React.forwardRef(function Component(props, ref) {
	return <div ref={ref} />;
});

const Component6 = React.forwardRef(function Component({ foo, bar }, ref) {
	return <div ref={ref} />;
});

const Component7 = React.memo(React.forwardRef(function Component(props, ref) {
	return <div ref={ref} />;
}));

```

# Diagnostics
```
invalid.jsx:3:20 lint/nursery/noReactForwardRef  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replaces usages of forwardRef with passing ref as a prop.
  
    1 │ import * as React from "react";
    2 │ 
  > 3 │ const Component1 = React.forwardRef((props, ref) => {
      │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 4 │ 	return null;
  > 5 │ });
      │ ^^
    6 │ 
    7 │ const Component2 = React.forwardRef((props, ref) => null);
  
  i In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.
  
  i Consider disabling this rule if you are working with React 18 or earlier.
  
  i Unsafe fix: Remove the forwardRef() call and receive the ref as a prop.
  
     1  1 │   import * as React from "react";
     2  2 │   
     3    │ - const·Component1·=·React.forwardRef((props,·ref)·=>·{
        3 │ + const·Component1·=·({·ref,·...props·})·=>·{
     4  4 │   	return null;
     5    │ - });
        5 │ + };
     6  6 │   
     7  7 │   const Component2 = React.forwardRef((props, ref) => null);
  

```

```
invalid.jsx:7:20 lint/nursery/noReactForwardRef  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replaces usages of forwardRef with passing ref as a prop.
  
    5 │ });
    6 │ 
  > 7 │ const Component2 = React.forwardRef((props, ref) => null);
      │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    8 │ 
    9 │ const Component3 = React.forwardRef(function (props, ref) {
  
  i In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.
  
  i Consider disabling this rule if you are working with React 18 or earlier.
  
  i Unsafe fix: Remove the forwardRef() call and receive the ref as a prop.
  
     5  5 │   });
     6  6 │   
     7    │ - const·Component2·=·React.forwardRef((props,·ref)·=>·null);
        7 │ + const·Component2·=·({·ref,·...props·})·=>·null;
     8  8 │   
     9  9 │   const Component3 = React.forwardRef(function (props, ref) {
  

```

```
invalid.jsx:9:20 lint/nursery/noReactForwardRef  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replaces usages of forwardRef with passing ref as a prop.
  
     7 │ const Component2 = React.forwardRef((props, ref) => null);
     8 │ 
   > 9 │ const Component3 = React.forwardRef(function (props, ref) {
       │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 10 │ 	return null;
  > 11 │ });
       │ ^^
    12 │ 
    13 │ const Component4 = React.forwardRef(function Component(props) {
  
  i In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.
  
  i Consider disabling this rule if you are working with React 18 or earlier.
  
  i Unsafe fix: Remove the forwardRef() call and receive the ref as a prop.
  
     7  7 │   const Component2 = React.forwardRef((props, ref) => null);
     8  8 │   
     9    │ - const·Component3·=·React.forwardRef(function·(props,·ref)·{
        9 │ + const·Component3·=·function·({·ref,·...props·})·{
    10 10 │   	return null;
    11    │ - });
       11 │ + };
    12 12 │   
    13 13 │   const Component4 = React.forwardRef(function Component(props) {
  

```

```
invalid.jsx:13:20 lint/nursery/noReactForwardRef  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replaces usages of forwardRef with passing ref as a prop.
  
    11 │ });
    12 │ 
  > 13 │ const Component4 = React.forwardRef(function Component(props) {
       │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 14 │ 	return null;
  > 15 │ });
       │ ^^
    16 │ 
    17 │ const Component5 = React.forwardRef(function Component(props, ref) {
  
  i In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.
  
  i Consider disabling this rule if you are working with React 18 or earlier.
  
  i Unsafe fix: Remove the forwardRef() call and receive the ref as a prop.
  
    11 11 │   });
    12 12 │   
    13    │ - const·Component4·=·React.forwardRef(function·Component(props)·{
       13 │ + const·Component4·=·function·Component(props)·{
    14 14 │   	return null;
    15    │ - });
       15 │ + };
    16 16 │   
    17 17 │   const Component5 = React.forwardRef(function Component(props, ref) {
  

```

```
invalid.jsx:17:20 lint/nursery/noReactForwardRef  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replaces usages of forwardRef with passing ref as a prop.
  
    15 │ });
    16 │ 
  > 17 │ const Component5 = React.forwardRef(function Component(props, ref) {
       │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 18 │ 	return <div ref={ref} />;
  > 19 │ });
       │ ^^
    20 │ 
    21 │ const Component6 = React.forwardRef(function Component({ foo, bar }, ref) {
  
  i In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.
  
  i Consider disabling this rule if you are working with React 18 or earlier.
  
  i Unsafe fix: Remove the forwardRef() call and receive the ref as a prop.
  
    15 15 │   });
    16 16 │   
    17    │ - const·Component5·=·React.forwardRef(function·Component(props,·ref)·{
       17 │ + const·Component5·=·function·Component({·ref,·...props·})·{
    18 18 │   	return <div ref={ref} />;
    19    │ - });
       19 │ + };
    20 20 │   
    21 21 │   const Component6 = React.forwardRef(function Component({ foo, bar }, ref) {
  

```

```
invalid.jsx:21:20 lint/nursery/noReactForwardRef  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replaces usages of forwardRef with passing ref as a prop.
  
    19 │ });
    20 │ 
  > 21 │ const Component6 = React.forwardRef(function Component({ foo, bar }, ref) {
       │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 22 │ 	return <div ref={ref} />;
  > 23 │ });
       │ ^^
    24 │ 
    25 │ const Component7 = React.memo(React.forwardRef(function Component(props, ref) {
  
  i In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.
  
  i Consider disabling this rule if you are working with React 18 or earlier.
  
  i Unsafe fix: Remove the forwardRef() call and receive the ref as a prop.
  
    19 19 │   });
    20 20 │   
    21    │ - const·Component6·=·React.forwardRef(function·Component({·foo,·bar·},·ref)·{
       21 │ + const·Component6·=·function·Component({·foo,·bar,·ref·})·{
    22 22 │   	return <div ref={ref} />;
    23    │ - });
       23 │ + };
    24 24 │   
    25 25 │   const Component7 = React.memo(React.forwardRef(function Component(props, ref) {
  

```

```
invalid.jsx:25:31 lint/nursery/noReactForwardRef  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replaces usages of forwardRef with passing ref as a prop.
  
    23 │ });
    24 │ 
  > 25 │ const Component7 = React.memo(React.forwardRef(function Component(props, ref) {
       │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 26 │ 	return <div ref={ref} />;
  > 27 │ }));
       │ ^^
    28 │ 
  
  i In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.
  
  i Consider disabling this rule if you are working with React 18 or earlier.
  
  i Unsafe fix: Remove the forwardRef() call and receive the ref as a prop.
  
    23 23 │   });
    24 24 │   
    25    │ - const·Component7·=·React.memo(React.forwardRef(function·Component(props,·ref)·{
       25 │ + const·Component7·=·React.memo(function·Component({·ref,·...props·})·{
    26 26 │   	return <div ref={ref} />;
    27    │ - }));
       27 │ + });
    28 28 │   
  

```
