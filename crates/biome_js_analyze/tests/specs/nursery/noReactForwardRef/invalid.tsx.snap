---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.tsx
---
# Input
```tsx
import * as React from "react";

interface ComponentProps {
	foo: string;
}

const Component1 = React.forwardRef<HTMLElement, ComponentProps>(function Component(props, ref) {
	return <div ref={ref} />;
});

const Component2 = React.forwardRef<HTMLElement, { foo: string }>(function Component(props, ref) {
	return <div ref={ref}>{props.foo}</div>;
});

const Component3 = React.forwardRef<HTMLElement, { foo: string }>(function Component({ foo }, ref) {
	return <div ref={ref}>{foo}</div>;
});

const Component4 = React.forwardRef<HTMLElement, { foo: string }>(function Component({ foo }, r) {
	return <div ref={r}>{foo}</div>;
});

const Component5 = React.forwardRef<HTMLElement, { foo: string, bar: number }>(function Component({ foo, ...rest }, r) {
	return <div ref={r}>{foo}</div>;
});

```

# Diagnostics
```
invalid.tsx:7:20 lint/nursery/noReactForwardRef  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Use of forwardRef is detected, which is deprecated.
  
     5 │ }
     6 │ 
   > 7 │ const Component1 = React.forwardRef<HTMLElement, ComponentProps>(function Component(props, ref) {
       │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 8 │ 	return <div ref={ref} />;
   > 9 │ });
       │ ^^
    10 │ 
    11 │ const Component2 = React.forwardRef<HTMLElement, { foo: string }>(function Component(props, ref) {
  
  i In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.
  
  i Replace the use of forwardRef with passing ref as a prop.
  
  i Unsafe fix: Remove the forwardRef() call and receive the ref as a prop.
  
     5  5 │   }
     6  6 │   
     7    │ - const·Component1·=·React.forwardRef<HTMLElement,·ComponentProps>(function·Component(props,·ref)·{
        7 │ + const·Component1·=·function·Component({·ref,·...props·}:·ComponentProps·&·{·ref?:·React.RefObject<HTMLElement·|·null>·})·{
     8  8 │   	return <div ref={ref} />;
     9    │ - });
        9 │ + };
    10 10 │   
    11 11 │   const Component2 = React.forwardRef<HTMLElement, { foo: string }>(function Component(props, ref) {
  

```

```
invalid.tsx:11:20 lint/nursery/noReactForwardRef  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Use of forwardRef is detected, which is deprecated.
  
     9 │ });
    10 │ 
  > 11 │ const Component2 = React.forwardRef<HTMLElement, { foo: string }>(function Component(props, ref) {
       │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 12 │ 	return <div ref={ref}>{props.foo}</div>;
  > 13 │ });
       │ ^^
    14 │ 
    15 │ const Component3 = React.forwardRef<HTMLElement, { foo: string }>(function Component({ foo }, ref) {
  
  i In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.
  
  i Replace the use of forwardRef with passing ref as a prop.
  
  i Unsafe fix: Remove the forwardRef() call and receive the ref as a prop.
  
     9  9 │   });
    10 10 │   
    11    │ - const·Component2·=·React.forwardRef<HTMLElement,·{·foo:·string·}>(function·Component(props,·ref)·{
       11 │ + const·Component2·=·function·Component({·ref,·...props·}:·{·foo:·string,·ref?:·React.RefObject<HTMLElement·|·null>·})·{
    12 12 │   	return <div ref={ref}>{props.foo}</div>;
    13    │ - });
       13 │ + };
    14 14 │   
    15 15 │   const Component3 = React.forwardRef<HTMLElement, { foo: string }>(function Component({ foo }, ref) {
  

```

```
invalid.tsx:15:20 lint/nursery/noReactForwardRef  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Use of forwardRef is detected, which is deprecated.
  
    13 │ });
    14 │ 
  > 15 │ const Component3 = React.forwardRef<HTMLElement, { foo: string }>(function Component({ foo }, ref) {
       │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 16 │ 	return <div ref={ref}>{foo}</div>;
  > 17 │ });
       │ ^^
    18 │ 
    19 │ const Component4 = React.forwardRef<HTMLElement, { foo: string }>(function Component({ foo }, r) {
  
  i In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.
  
  i Replace the use of forwardRef with passing ref as a prop.
  
  i Unsafe fix: Remove the forwardRef() call and receive the ref as a prop.
  
    13 13 │   });
    14 14 │   
    15    │ - const·Component3·=·React.forwardRef<HTMLElement,·{·foo:·string·}>(function·Component({·foo·},·ref)·{
       15 │ + const·Component3·=·function·Component({·foo,·ref·}:·{·foo:·string,·ref?:·React.RefObject<HTMLElement·|·null>·})·{
    16 16 │   	return <div ref={ref}>{foo}</div>;
    17    │ - });
       17 │ + };
    18 18 │   
    19 19 │   const Component4 = React.forwardRef<HTMLElement, { foo: string }>(function Component({ foo }, r) {
  

```

```
invalid.tsx:19:20 lint/nursery/noReactForwardRef  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Use of forwardRef is detected, which is deprecated.
  
    17 │ });
    18 │ 
  > 19 │ const Component4 = React.forwardRef<HTMLElement, { foo: string }>(function Component({ foo }, r) {
       │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 20 │ 	return <div ref={r}>{foo}</div>;
  > 21 │ });
       │ ^^
    22 │ 
    23 │ const Component5 = React.forwardRef<HTMLElement, { foo: string, bar: number }>(function Component({ foo, ...rest }, r) {
  
  i In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.
  
  i Replace the use of forwardRef with passing ref as a prop.
  
  i Unsafe fix: Remove the forwardRef() call and receive the ref as a prop.
  
    17 17 │   });
    18 18 │   
    19    │ - const·Component4·=·React.forwardRef<HTMLElement,·{·foo:·string·}>(function·Component({·foo·},·r)·{
       19 │ + const·Component4·=·function·Component({·foo,·ref:·r·}:·{·foo:·string,·ref?:·React.RefObject<HTMLElement·|·null>·})·{
    20 20 │   	return <div ref={r}>{foo}</div>;
    21    │ - });
       21 │ + };
    22 22 │   
    23 23 │   const Component5 = React.forwardRef<HTMLElement, { foo: string, bar: number }>(function Component({ foo, ...rest }, r) {
  

```

```
invalid.tsx:23:20 lint/nursery/noReactForwardRef  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Use of forwardRef is detected, which is deprecated.
  
    21 │ });
    22 │ 
  > 23 │ const Component5 = React.forwardRef<HTMLElement, { foo: string, bar: number }>(function Component({ foo, ...rest }, r) {
       │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 24 │ 	return <div ref={r}>{foo}</div>;
  > 25 │ });
       │ ^^
    26 │ 
  
  i In React 19, 'forwardRef' is no longer necessary. Pass 'ref' as a prop instead.
  
  i Replace the use of forwardRef with passing ref as a prop.
  
  i Unsafe fix: Remove the forwardRef() call and receive the ref as a prop.
  
    21 21 │   });
    22 22 │   
    23    │ - const·Component5·=·React.forwardRef<HTMLElement,·{·foo:·string,·bar:·number·}>(function·Component({·foo,·...rest·},·r)·{
       23 │ + const·Component5·=·function·Component({·foo,·ref:·r,·...rest·}:·{·foo:·string,·bar:·number,·ref?:·React.RefObject<HTMLElement·|·null>·})·{
    24 24 │   	return <div ref={r}>{foo}</div>;
    25    │ - });
       25 │ + };
    26 26 │   
  

```
