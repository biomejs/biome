---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.jsx
---
# Input
```jsx
// should emit diagnostics
import { component$, useSignal, useTask$, useStore, useComputed$, useResource$, $, useWatch$ } from "@builder.io/qwik";

// 1. minimal example and concise-body arrow function without braces
const f = () => "bar";

// 2. $ usage in module scope
const moduleHandler = $(() => {
  console.log("invalid module scope");
});

// 3. $ usage in regular function
function regularFunction() {
  const handler = $(() => {
    console.log("invalid regular function");
  });
}

// 4. $ usage in arrow function
const arrowFunction = () => {
  const handler = $(() => {
    console.log("invalid arrow function");
  });
};

// 5. $ usage in class method
class MyClass {
  method() {
    const handler = $(() => {
      console.log("invalid class method");
    });
  }
}

// 6. $ usage in object method
const myObject = {
  method: function() {
    const handler = $(() => {
      console.log("invalid object method");
    });
  }
};

// 7. $ usage in nested regular function inside component$
export const Component = component$(() => {
  function nestedRegular() {
    const handler = $(() => {
      console.log("invalid nested function");
    });
  }
  return <div />;
});

// 8. $ usage in event handler not using $
export const ComponentWithEvent = component$(() => {
  const handleClick = () => {
    const handler = $(() => {
      console.log("invalid event handler");
    });
  };
  return <button onClick={handleClick}>Click</button>;
});

// 9. $ usage in conditional block without proper context
export const ConditionalComponent = component$(() => {
  if (true) {
    const regularFunction = () => {
      const handler = $(() => {
        console.log("invalid conditional");
      });
    };
  }
  return <div />;
});

// 10. $ usage in loop without proper context
export const LoopComponent = component$(() => {
  for (let i = 0; i < 5; i++) {
    const regularFunction = () => {
      const handler = $(() => {
        console.log("invalid loop");
      });
    };
  }
  return <div />;
});

// 11. $ usage in try-catch without proper context
export const TryCatchComponent = component$(() => {
  try {
    const regularFunction = () => {
      const handler = $(() => {
        console.log("invalid try-catch");
      });
    };
  } catch (e) {
    console.error(e);
  }
  return <div />;
});

// 12. $ usage in async function
async function asyncFunction() {
  const handler = $(() => {
    console.log("invalid async function");
  });
}

// 13. $ usage in generator function
function* generatorFunction() {
  const handler = $(() => {
    console.log("invalid generator function");
  });
  yield 1;
}

// 14. $ usage in exported regular function
export function exportedFunction() {
  const handler = $(() => {
    console.log("invalid exported function");
  });
}

// 15. $ usage in default export function
export default function() {
  const handler = $(() => {
    console.log("invalid default export");
  });
}

// 16. Multiple $ usages in same invalid context
const multipleInvalid = () => {
  const handler1 = $(() => console.log("first"));
  const handler2 = $(() => console.log("second"));
  const handler3 = $(() => console.log("third"));
};

// 17. $ usage in IIFE
(function() {
  const handler = $(() => {
    console.log("invalid IIFE");
  });
})();

// 18. $ usage in arrow function property
const objWithArrow = {
  method: () => {
    const handler = $(() => {
      console.log("invalid arrow property");
    });
  }
};

// 19. $ usage in callback function
[1, 2, 3].forEach(function(item) {
  const handler = $(() => {
    console.log("invalid callback");
  });
});

// 20. $ usage in promise then
Promise.resolve().then(() => {
  const handler = $(() => {
    console.log("invalid promise then");
  });
});
```

# Diagnostics
```
invalid.jsx:5:11 lint/nursery/useQwikValidLexicalScope ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Non-serializable expression must be wrapped with $(...)
  
    4 │ // 1. minimal example and concise-body arrow function without braces
  > 5 │ const f = () => "bar";
      │           ^^^^^^^^^^^
    6 │ 
    7 │ // 2. $ usage in module scope
  
  i Qwik requires serializable closures for:
    - Resumability (pausing/resuming execution)
    - Code splitting (lazy loading components)
    - Optimized rehydration (client-side continuation)
  
  i Wrap the expression with $(...) to make it serializable. Learn more: Qwik documentation.
  

```

```
invalid.jsx:20:23 lint/nursery/useQwikValidLexicalScope ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Non-serializable expression must be wrapped with $(...)
  
    19 │ // 4. $ usage in arrow function
  > 20 │ const arrowFunction = () => {
       │                       ^^^^^^^
  > 21 │   const handler = $(() => {
  > 22 │     console.log("invalid arrow function");
  > 23 │   });
  > 24 │ };
       │ ^
    25 │ 
    26 │ // 5. $ usage in class method
  
  i Qwik requires serializable closures for:
    - Resumability (pausing/resuming execution)
    - Code splitting (lazy loading components)
    - Optimized rehydration (client-side continuation)
  
  i Wrap the expression with $(...) to make it serializable. Learn more: Qwik documentation.
  

```

```
invalid.jsx:56:23 lint/nursery/useQwikValidLexicalScope ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Non-serializable expression must be wrapped with $(...)
  
    54 │ // 8. $ usage in event handler not using $
    55 │ export const ComponentWithEvent = component$(() => {
  > 56 │   const handleClick = () => {
       │                       ^^^^^^^
  > 57 │     const handler = $(() => {
  > 58 │       console.log("invalid event handler");
  > 59 │     });
  > 60 │   };
       │   ^
    61 │   return <button onClick={handleClick}>Click</button>;
    62 │ });
  
  i Qwik requires serializable closures for:
    - Resumability (pausing/resuming execution)
    - Code splitting (lazy loading components)
    - Optimized rehydration (client-side continuation)
  
  i Wrap the expression with $(...) to make it serializable. Learn more: Qwik documentation.
  

```

```
invalid.jsx:67:29 lint/nursery/useQwikValidLexicalScope ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Non-serializable expression must be wrapped with $(...)
  
    65 │ export const ConditionalComponent = component$(() => {
    66 │   if (true) {
  > 67 │     const regularFunction = () => {
       │                             ^^^^^^^
  > 68 │       const handler = $(() => {
  > 69 │         console.log("invalid conditional");
  > 70 │       });
  > 71 │     };
       │     ^
    72 │   }
    73 │   return <div />;
  
  i Qwik requires serializable closures for:
    - Resumability (pausing/resuming execution)
    - Code splitting (lazy loading components)
    - Optimized rehydration (client-side continuation)
  
  i Wrap the expression with $(...) to make it serializable. Learn more: Qwik documentation.
  

```

```
invalid.jsx:79:29 lint/nursery/useQwikValidLexicalScope ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Non-serializable expression must be wrapped with $(...)
  
    77 │ export const LoopComponent = component$(() => {
    78 │   for (let i = 0; i < 5; i++) {
  > 79 │     const regularFunction = () => {
       │                             ^^^^^^^
  > 80 │       const handler = $(() => {
  > 81 │         console.log("invalid loop");
  > 82 │       });
  > 83 │     };
       │     ^
    84 │   }
    85 │   return <div />;
  
  i Qwik requires serializable closures for:
    - Resumability (pausing/resuming execution)
    - Code splitting (lazy loading components)
    - Optimized rehydration (client-side continuation)
  
  i Wrap the expression with $(...) to make it serializable. Learn more: Qwik documentation.
  

```

```
invalid.jsx:91:29 lint/nursery/useQwikValidLexicalScope ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Non-serializable expression must be wrapped with $(...)
  
    89 │ export const TryCatchComponent = component$(() => {
    90 │   try {
  > 91 │     const regularFunction = () => {
       │                             ^^^^^^^
  > 92 │       const handler = $(() => {
  > 93 │         console.log("invalid try-catch");
  > 94 │       });
  > 95 │     };
       │     ^
    96 │   } catch (e) {
    97 │     console.error(e);
  
  i Qwik requires serializable closures for:
    - Resumability (pausing/resuming execution)
    - Code splitting (lazy loading components)
    - Optimized rehydration (client-side continuation)
  
  i Wrap the expression with $(...) to make it serializable. Learn more: Qwik documentation.
  

```

```
invalid.jsx:132:25 lint/nursery/useQwikValidLexicalScope ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Non-serializable expression must be wrapped with $(...)
  
    131 │ // 16. Multiple $ usages in same invalid context
  > 132 │ const multipleInvalid = () => {
        │                         ^^^^^^^
  > 133 │   const handler1 = $(() => console.log("first"));
  > 134 │   const handler2 = $(() => console.log("second"));
  > 135 │   const handler3 = $(() => console.log("third"));
  > 136 │ };
        │ ^
    137 │ 
    138 │ // 17. $ usage in IIFE
  
  i Qwik requires serializable closures for:
    - Resumability (pausing/resuming execution)
    - Code splitting (lazy loading components)
    - Optimized rehydration (client-side continuation)
  
  i Wrap the expression with $(...) to make it serializable. Learn more: Qwik documentation.
  

```
