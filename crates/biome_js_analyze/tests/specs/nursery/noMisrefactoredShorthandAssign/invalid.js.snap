---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```js
a += a + b

a -= a - b

a *= a * b

a /= a / b

a %= a % b

a **= a ** b

a >>= a >> b

a <<= a << b

a >>>= a >>> b

a &= a & b

a |= a | b

a ^= a ^ b


```

# Diagnostics
```
invalid.js:1:1 lint/nursery/noMisrefactoredShorthandAssign  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Variable appears on both sides of an assignment operation
  
  > 1 │ a += a + b
      │ ^^^^^^^^^^
    2 │ 
    3 │ a -= a - b
  
  i This assignment might be result of a wrong refactoring, use a += b instead.
  
  i Unsafe fix: Use a += b instead.
  
    1 │ a·+=·a·+·b
      │      ---- 

```

```
invalid.js:3:1 lint/nursery/noMisrefactoredShorthandAssign  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Variable appears on both sides of an assignment operation
  
    1 │ a += a + b
    2 │ 
  > 3 │ a -= a - b
      │ ^^^^^^^^^^
    4 │ 
    5 │ a *= a * b
  
  i This assignment might be result of a wrong refactoring, use a -= b instead.
  
  i Unsafe fix: Use a -= b instead.
  
    3 │ a·-=·a·-·b
      │      ---- 

```

```
invalid.js:5:1 lint/nursery/noMisrefactoredShorthandAssign  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Variable appears on both sides of an assignment operation
  
    3 │ a -= a - b
    4 │ 
  > 5 │ a *= a * b
      │ ^^^^^^^^^^
    6 │ 
    7 │ a /= a / b
  
  i This assignment might be result of a wrong refactoring, use a *= b instead.
  
  i Unsafe fix: Use a *= b instead.
  
    5 │ a·*=·a·*·b
      │      ---- 

```

```
invalid.js:7:1 lint/nursery/noMisrefactoredShorthandAssign  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Variable appears on both sides of an assignment operation
  
    5 │ a *= a * b
    6 │ 
  > 7 │ a /= a / b
      │ ^^^^^^^^^^
    8 │ 
    9 │ a %= a % b
  
  i This assignment might be result of a wrong refactoring, use a /= b instead.
  
  i Unsafe fix: Use a /= b instead.
  
    7 │ a·/=·a·/·b
      │      ---- 

```

```
invalid.js:9:1 lint/nursery/noMisrefactoredShorthandAssign  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Variable appears on both sides of an assignment operation
  
     7 │ a /= a / b
     8 │ 
   > 9 │ a %= a % b
       │ ^^^^^^^^^^
    10 │ 
    11 │ a **= a ** b
  
  i This assignment might be result of a wrong refactoring, use a %= b instead.
  
  i Unsafe fix: Use a %= b instead.
  
    9 │ a·%=·a·%·b
      │      ---- 

```

```
invalid.js:11:1 lint/nursery/noMisrefactoredShorthandAssign  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Variable appears on both sides of an assignment operation
  
     9 │ a %= a % b
    10 │ 
  > 11 │ a **= a ** b
       │ ^^^^^^^^^^^^
    12 │ 
    13 │ a >>= a >> b
  
  i This assignment might be result of a wrong refactoring, use a **= b instead.
  
  i Unsafe fix: Use a **= b instead.
  
    11 │ a·**=·a·**·b
       │       ----- 

```

```
invalid.js:13:1 lint/nursery/noMisrefactoredShorthandAssign  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Variable appears on both sides of an assignment operation
  
    11 │ a **= a ** b
    12 │ 
  > 13 │ a >>= a >> b
       │ ^^^^^^^^^^^^
    14 │ 
    15 │ a <<= a << b
  
  i This assignment might be result of a wrong refactoring, use a >>= b instead.
  
  i Unsafe fix: Use a >>= b instead.
  
    13 │ a·>>=·a·>>·b
       │       ----- 

```

```
invalid.js:15:1 lint/nursery/noMisrefactoredShorthandAssign  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Variable appears on both sides of an assignment operation
  
    13 │ a >>= a >> b
    14 │ 
  > 15 │ a <<= a << b
       │ ^^^^^^^^^^^^
    16 │ 
    17 │ a >>>= a >>> b
  
  i This assignment might be result of a wrong refactoring, use a <<= b instead.
  
  i Unsafe fix: Use a <<= b instead.
  
    15 │ a·<<=·a·<<·b
       │       ----- 

```

```
invalid.js:17:1 lint/nursery/noMisrefactoredShorthandAssign  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Variable appears on both sides of an assignment operation
  
    15 │ a <<= a << b
    16 │ 
  > 17 │ a >>>= a >>> b
       │ ^^^^^^^^^^^^^^
    18 │ 
    19 │ a &= a & b
  
  i This assignment might be result of a wrong refactoring, use a >>>= b instead.
  
  i Unsafe fix: Use a >>>= b instead.
  
    17 │ a·>>>=·a·>>>·b
       │        ------ 

```

```
invalid.js:19:1 lint/nursery/noMisrefactoredShorthandAssign  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Variable appears on both sides of an assignment operation
  
    17 │ a >>>= a >>> b
    18 │ 
  > 19 │ a &= a & b
       │ ^^^^^^^^^^
    20 │ 
    21 │ a |= a | b
  
  i This assignment might be result of a wrong refactoring, use a &= b instead.
  
  i Unsafe fix: Use a &= b instead.
  
    19 │ a·&=·a·&·b
       │      ---- 

```

```
invalid.js:21:1 lint/nursery/noMisrefactoredShorthandAssign  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Variable appears on both sides of an assignment operation
  
    19 │ a &= a & b
    20 │ 
  > 21 │ a |= a | b
       │ ^^^^^^^^^^
    22 │ 
    23 │ a ^= a ^ b
  
  i This assignment might be result of a wrong refactoring, use a |= b instead.
  
  i Unsafe fix: Use a |= b instead.
  
    21 │ a·|=·a·|·b
       │      ---- 

```

```
invalid.js:23:1 lint/nursery/noMisrefactoredShorthandAssign  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Variable appears on both sides of an assignment operation
  
    21 │ a |= a | b
    22 │ 
  > 23 │ a ^= a ^ b
       │ ^^^^^^^^^^
    24 │ 
  
  i This assignment might be result of a wrong refactoring, use a ^= b instead.
  
  i Unsafe fix: Use a ^= b instead.
  
    23 │ a·^=·a·^·b
       │      ---- 

```


