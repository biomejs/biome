---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: valid.js
---
# Input
```js
/* should not generate diagnostics */
Boolean(foo);
foo.indexOf(1) !== -1;
Number(foo);
parseInt(foo);
parseFloat(foo);
String(foo);
!foo;
~foo;
-foo;
+1234;
-1234;
- -1234;
+Number(lol);
-parseFloat(lol);
2 * foo;
1 * 1234;
123 - 0;
1 * Number(foo);
1 * parseInt(foo);
1 * parseFloat(foo);
Number(foo) * 1;
Number(foo) - 0;
parseInt(foo) * 1;
parseFloat(foo) * 1;
- -Number(foo);
1 * 1234 * 678 * Number(foo);
1 * 1234 * 678 * parseInt(foo);
(1 - 0) * parseInt(foo);
1234 * 1 * 678 * Number(foo);
1234 * 1 * Number(foo) * Number(bar);
1234 * 1 * Number(foo) * parseInt(bar);
1234 * 1 * Number(foo) * parseFloat(bar);
1234 * 1 * parseInt(foo) * parseFloat(bar);
1234 * 1 * parseInt(foo) * Number(bar);
1234 * 1 * parseFloat(foo) * Number(bar);
1234 * Number(foo) * 1 * Number(bar);
1234 * parseInt(foo) * 1 * Number(bar);
1234 * parseFloat(foo) * 1 * parseInt(bar);
1234 * parseFloat(foo) * 1 * Number(bar);
(- -1234) * (parseFloat(foo) - 0) * (Number(bar) - 0);
1234*foo*1;
1234*1*foo;
1234*bar*1*foo;
1234*1*foo*bar;
1234*1*foo*Number(bar);
1234*1*Number(foo)*bar;
1234*1*parseInt(foo)*bar;
0 + foo;
~foo.bar();
foo + 'bar';
1 / foo;
1 / (foo + bar);
1 / 2;

```
