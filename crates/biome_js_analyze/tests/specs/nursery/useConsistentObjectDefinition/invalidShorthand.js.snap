---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalidShorthand.js
---
# Input
```js
const invalidShorthand = {
    // Basic property explicit violations
    prop,
    shortProp,

    // Method explicit violations
    method() { return "method"; },
    async async() { return "async"; },
    *generator() { yield "gen"; },
    async *asyncGenerator() { yield "async gen"; },

    // Computed methods
    [computed]() { return "computed"; },
    async [computed]() { return "async computed"; },
    *[computed]() { yield "computed gen"; },
    ["computed-string"]() { return "computed string"; },
    ["comp" + "uted" + "-con" + "cat"]() { return "computed concat"; },
    [computed()]() { return "computed dynamic"; },

    // String literal methods
    'quotedMethod'() { return "quoted"; },
    "doubleQuoted"() { return "double quoted"; },
    async 'asyncQuoted'() { return "async quoted"; },
};

```

# Diagnostics
```
invalidShorthand.js:3:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
    1 │ const invalidShorthand = {
    2 │     // Basic property explicit violations
  > 3 │     prop,
      │     ^^^^
    4 │     shortProp,
    5 │ 
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
    3 │ ····prop:·prop,
      │         ++++++ 

```

```
invalidShorthand.js:4:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
    2 │     // Basic property explicit violations
    3 │     prop,
  > 4 │     shortProp,
      │     ^^^^^^^^^
    5 │ 
    6 │     // Method explicit violations
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
    4 │ ····shortProp:·shortProp,
      │              +++++++++++ 

```

```
invalidShorthand.js:7:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
    6 │     // Method explicit violations
  > 7 │     method() { return "method"; },
      │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    8 │     async async() { return "async"; },
    9 │     *generator() { yield "gen"; },
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
    7 │ ····method:·function·()·{·return·"method";·},
      │           +++++++++++                        

```

```
invalidShorthand.js:8:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
     6 │     // Method explicit violations
     7 │     method() { return "method"; },
   > 8 │     async async() { return "async"; },
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     9 │     *generator() { yield "gen"; },
    10 │     async *asyncGenerator() { yield "async gen"; },
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
    8 │ ····async:·async·function·()·{·return·"async";·},
      │          +      ++++++++++                       

```

```
invalidShorthand.js:9:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
     7 │     method() { return "method"; },
     8 │     async async() { return "async"; },
   > 9 │     *generator() { yield "gen"; },
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    10 │     async *asyncGenerator() { yield "async gen"; },
    11 │ 
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
     7  7 │       method() { return "method"; },
     8  8 │       async async() { return "async"; },
     9    │ - ····*generator()·{·yield·"gen";·},
        9 │ + ····generator:·function*·()·{·yield·"gen";·},
    10 10 │       async *asyncGenerator() { yield "async gen"; },
    11 11 │   
  

```

```
invalidShorthand.js:10:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
     8 │     async async() { return "async"; },
     9 │     *generator() { yield "gen"; },
  > 10 │     async *asyncGenerator() { yield "async gen"; },
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    11 │ 
    12 │     // Computed methods
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
     8  8 │       async async() { return "async"; },
     9  9 │       *generator() { yield "gen"; },
    10    │ - ····async·*asyncGenerator()·{·yield·"async·gen";·},
       10 │ + ····asyncGenerator:·async·function*·()·{·yield·"async·gen";·},
    11 11 │   
    12 12 │       // Computed methods
  

```

```
invalidShorthand.js:13:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
    12 │     // Computed methods
  > 13 │     [computed]() { return "computed"; },
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    14 │     async [computed]() { return "async computed"; },
    15 │     *[computed]() { yield "computed gen"; },
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
    13 │ ····[computed]:·function·()·{·return·"computed";·},
       │               +++++++++++                          

```

```
invalidShorthand.js:14:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
    12 │     // Computed methods
    13 │     [computed]() { return "computed"; },
  > 14 │     async [computed]() { return "async computed"; },
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    15 │     *[computed]() { yield "computed gen"; },
    16 │     ["computed-string"]() { return "computed string"; },
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
    12 12 │       // Computed methods
    13 13 │       [computed]() { return "computed"; },
    14    │ - ····async·[computed]()·{·return·"async·computed";·},
       14 │ + ····[computed]:·async·function·()·{·return·"async·computed";·},
    15 15 │       *[computed]() { yield "computed gen"; },
    16 16 │       ["computed-string"]() { return "computed string"; },
  

```

```
invalidShorthand.js:15:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
    13 │     [computed]() { return "computed"; },
    14 │     async [computed]() { return "async computed"; },
  > 15 │     *[computed]() { yield "computed gen"; },
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    16 │     ["computed-string"]() { return "computed string"; },
    17 │     ["comp" + "uted" + "-con" + "cat"]() { return "computed concat"; },
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
    13 13 │       [computed]() { return "computed"; },
    14 14 │       async [computed]() { return "async computed"; },
    15    │ - ····*[computed]()·{·yield·"computed·gen";·},
       15 │ + ····[computed]:·function*·()·{·yield·"computed·gen";·},
    16 16 │       ["computed-string"]() { return "computed string"; },
    17 17 │       ["comp" + "uted" + "-con" + "cat"]() { return "computed concat"; },
  

```

```
invalidShorthand.js:16:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
    14 │     async [computed]() { return "async computed"; },
    15 │     *[computed]() { yield "computed gen"; },
  > 16 │     ["computed-string"]() { return "computed string"; },
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    17 │     ["comp" + "uted" + "-con" + "cat"]() { return "computed concat"; },
    18 │     [computed()]() { return "computed dynamic"; },
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
    16 │ ····["computed-string"]:·function·()·{·return·"computed·string";·},
       │                        +++++++++++                                 

```

```
invalidShorthand.js:17:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
    15 │     *[computed]() { yield "computed gen"; },
    16 │     ["computed-string"]() { return "computed string"; },
  > 17 │     ["comp" + "uted" + "-con" + "cat"]() { return "computed concat"; },
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    18 │     [computed()]() { return "computed dynamic"; },
    19 │ 
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
    17 │ ····["comp"·+·"uted"·+·"-con"·+·"cat"]:·function·()·{·return·"computed·concat";·},
       │                                       +++++++++++                                 

```

```
invalidShorthand.js:18:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
    16 │     ["computed-string"]() { return "computed string"; },
    17 │     ["comp" + "uted" + "-con" + "cat"]() { return "computed concat"; },
  > 18 │     [computed()]() { return "computed dynamic"; },
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    19 │ 
    20 │     // String literal methods
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
    18 │ ····[computed()]:·function·()·{·return·"computed·dynamic";·},
       │                 +++++++++++                                  

```

```
invalidShorthand.js:21:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
    20 │     // String literal methods
  > 21 │     'quotedMethod'() { return "quoted"; },
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    22 │     "doubleQuoted"() { return "double quoted"; },
    23 │     async 'asyncQuoted'() { return "async quoted"; },
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
    21 │ ····'quotedMethod':·function·()·{·return·"quoted";·},
       │                   +++++++++++                        

```

```
invalidShorthand.js:22:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
    20 │     // String literal methods
    21 │     'quotedMethod'() { return "quoted"; },
  > 22 │     "doubleQuoted"() { return "double quoted"; },
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    23 │     async 'asyncQuoted'() { return "async quoted"; },
    24 │ };
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
    22 │ ····"doubleQuoted":·function·()·{·return·"double·quoted";·},
       │                   +++++++++++                               

```

```
invalidShorthand.js:23:5 lint/nursery/useConsistentObjectDefinition  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  × Do not use shorthand object property syntax.
  
    21 │     'quotedMethod'() { return "quoted"; },
    22 │     "doubleQuoted"() { return "double quoted"; },
  > 23 │     async 'asyncQuoted'() { return "async quoted"; },
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    24 │ };
    25 │ 
  
  i Using explicit object property syntax makes object definitions more readable and consistent.
  
  i Safe fix: Use explicit object property syntax.
  
    21 21 │       'quotedMethod'() { return "quoted"; },
    22 22 │       "doubleQuoted"() { return "double quoted"; },
    23    │ - ····async·'asyncQuoted'()·{·return·"async·quoted";·},
       23 │ + ····'asyncQuoted':·async·function·()·{·return·"async·quoted";·},
    24 24 │   };
    25 25 │   
  

```
