---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```js
var sum = 0, i; for (i = 0; i < 10; i++) { if (i <= 5) { continue; } sum += i; }
var sum = 0, i; myLabel: for (i = 0; i < 10; i++) { if (i <= 5) { continue myLabel; } sum += i; }
var sum = 0, i = 0; while (i < 10) { if (i <= 5) { i++; continue; } sum += i; i++; }
var sum = 0, i = 0; myLabel: while (i < 10) { if (i <= 5) { i++; continue myLabel; } sum += i; i++; }

```

# Diagnostics
```
invalid.js:1:58 lint/nursery/noContinue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of continue statement.
  
  > 1 │ var sum = 0, i; for (i = 0; i < 10; i++) { if (i <= 5) { continue; } sum += i; }
      │                                                          ^^^^^^^^^
    2 │ var sum = 0, i; myLabel: for (i = 0; i < 10; i++) { if (i <= 5) { continue myLabel; } sum += i; }
    3 │ var sum = 0, i = 0; while (i < 10) { if (i <= 5) { i++; continue; } sum += i; i++; }
  
  i The continue statement terminates execution of the statements in the current iteration, when used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as if should be used instead.
  

```

```
invalid.js:2:67 lint/nursery/noContinue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of continue statement.
  
    1 │ var sum = 0, i; for (i = 0; i < 10; i++) { if (i <= 5) { continue; } sum += i; }
  > 2 │ var sum = 0, i; myLabel: for (i = 0; i < 10; i++) { if (i <= 5) { continue myLabel; } sum += i; }
      │                                                                   ^^^^^^^^^^^^^^^^^
    3 │ var sum = 0, i = 0; while (i < 10) { if (i <= 5) { i++; continue; } sum += i; i++; }
    4 │ var sum = 0, i = 0; myLabel: while (i < 10) { if (i <= 5) { i++; continue myLabel; } sum += i; i++; }
  
  i The continue statement terminates execution of the statements in the current iteration, when used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as if should be used instead.
  

```

```
invalid.js:3:57 lint/nursery/noContinue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of continue statement.
  
    1 │ var sum = 0, i; for (i = 0; i < 10; i++) { if (i <= 5) { continue; } sum += i; }
    2 │ var sum = 0, i; myLabel: for (i = 0; i < 10; i++) { if (i <= 5) { continue myLabel; } sum += i; }
  > 3 │ var sum = 0, i = 0; while (i < 10) { if (i <= 5) { i++; continue; } sum += i; i++; }
      │                                                         ^^^^^^^^^
    4 │ var sum = 0, i = 0; myLabel: while (i < 10) { if (i <= 5) { i++; continue myLabel; } sum += i; i++; }
    5 │ 
  
  i The continue statement terminates execution of the statements in the current iteration, when used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as if should be used instead.
  

```

```
invalid.js:4:66 lint/nursery/noContinue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of continue statement.
  
    2 │ var sum = 0, i; myLabel: for (i = 0; i < 10; i++) { if (i <= 5) { continue myLabel; } sum += i; }
    3 │ var sum = 0, i = 0; while (i < 10) { if (i <= 5) { i++; continue; } sum += i; i++; }
  > 4 │ var sum = 0, i = 0; myLabel: while (i < 10) { if (i <= 5) { i++; continue myLabel; } sum += i; i++; }
      │                                                                  ^^^^^^^^^^^^^^^^^
    5 │ 
  
  i The continue statement terminates execution of the statements in the current iteration, when used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as if should be used instead.
  

```
