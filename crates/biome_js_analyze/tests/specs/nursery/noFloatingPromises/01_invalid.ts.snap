---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: 01_invalid.ts
---
# Input
```ts

[1, 2, 3].map(async (x) => x + 1);

async function floatingArray() {
	[1, 2, 3].map((x) => Promise.resolve(x + 1));
}

```

# Diagnostics
```
01_invalid.ts:2:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i An array of Promises was found, meaning they are not properly handled and could lead to ignored errors or unexpected behavior.
  
  > 2 │ [1, 2, 3].map(async (x) => x + 1);
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    3 │ 
    4 │ async function floatingArray() {
  
  i This happens when an array of Promises is not wrapped with Promise.all() or a similar method, and is not explicitly ignored using the `void` operator.
  

```

```
01_invalid.ts:5:2 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i An array of Promises was found, meaning they are not properly handled and could lead to ignored errors or unexpected behavior.
  
    4 │ async function floatingArray() {
  > 5 │ 	[1, 2, 3].map((x) => Promise.resolve(x + 1));
      │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    6 │ }
    7 │ 
  
  i This happens when an array of Promises is not wrapped with Promise.all() or a similar method, and is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Wrap in Promise.all() and add await operator.
  
    5 │ → await·Promise.all([1,·2,·3].map((x)·=>·Promise.resolve(x·+·1)));
      │   ++++++++++++++++++                                            + 

```
