---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.ts
---
# Input
```ts
import { returnPromiseResult } from "./returnPromiseResult.ts";
import { returnPromiseResult as returnAliasedPromiseResult } from "./returnPromiseResult.ts";

async function returnsPromise(): Promise<string> {
	return "value";
}
returnsPromise();
returnsPromise()
	.then(() => {})
	.finally(() => {});

async function returnsPromiseInAsyncFunction(): Promise<void> {
	returnsPromise();
}

const returnsPromiseInAsyncArrowFunction = async (): Promise<void> => {
	returnsPromise()
		.then(() => {})
		.finally(() => {});
};

class Test {
	async returnsPromiseInAsyncClassMethod(): Promise<void> {
		returnsPromise();
	}
}

function returnsPromiseWithoutAsync(): Promise<string> {
	return Promise.resolve("value");
}

returnsPromiseWithoutAsync();

const returnsPromiseAssignedArrowFunction = async (): Promise<string> => {
	return "value";
};

returnsPromiseAssignedArrowFunction();

const returnsPromiseAssignedFunction = async function (): Promise<string> {
	return "value";
};

async function returnsPromiseAssignedFunctionInAsyncFunction(): Promise<void> {
	returnsPromiseAssignedFunction().then(() => {});
}

const returnsPromiseAssignedArrowFunctionAnnotatedType: () => Promise<string> =
	() => {
		return Promise.resolve("value");
	};

returnsPromiseAssignedArrowFunctionAnnotatedType();

const promise = new Promise((resolve) => resolve("value"));
promise.then(() => {}).finally(() => {});

Promise.resolve("value").then(() => {});
Promise.all([p1, p2, p3]);

const promiseWithParentheses = new Promise((resolve, reject) =>
	resolve("value")
);
promiseWithParentheses;
returnsPromise();

const promiseWithGlobalIdentifier = new window.Promise((resolve, reject) =>
	resolve("value")
);
promiseWithGlobalIdentifier.then(() => {}).finally(() => {});
globalThis.Promise.reject("value").finally();

class InvalidTestClassParent {
	async returnsPromiseFromParent(): Promise<string> {
		return "value";
	}
}
class InvalidTestClass extends InvalidTestClassParent {
	returnsPromiseFunctionProperty: () => Promise<void>;
	returnsPromiseProperty: Promise<void>;
	constructor() {
		super();
		this.returnsPromiseFunctionProperty = () => Promise.resolve();
		this.returnsPromiseProperty = new Promise((resolve, reject) => {});
	}

	async returnsPromiseMethod(): Promise<string> {
		return "value";
	}
	async someMethod() {
		this.returnsPromiseMethod();
	}

	async someMethod2() {
		this.returnsPromiseFromParent()
			.then(() => {})
			.finally(() => {});
	}

	async someMethod3() {
		this.returnsPromiseFunctionProperty();
	}

	async someMethod4() {
		this.returnsPromiseProperty.then(() => {}).finally(() => {});
	}

	async #returnsPromisePrivateMethod(): Promise<string> {
		return "value";
	}
	async someMethod5() {
		this.#returnsPromisePrivateMethod()
			.then(() => {})
			.finally(() => {});
	}

	returnsPromiseFunction = async function (): Promise<string> {
		return "value";
	};
	returnsPromiseArrowFunction = async (): Promise<string> => {
		return "value";
	};

	async someMetho3() {
		this.returnsPromiseFunction()
			.then(() => {})
			.finally(() => {});
		this.returnsPromiseArrowFunction();
	}
}

const invalidTestClass = new InvalidTestClass();
invalidTestClass
	.returnsPromiseMethod()
	.then(() => {})
	.finally(() => {});
invalidTestClass.returnsPromiseFunctionProperty();
invalidTestClass.returnsPromiseProperty;
invalidTestClass.returnsPromiseProperty.then(() => {}).finally(() => {});

const InvalidTestClassInitializedExpression = class InvalidTestClass extends InvalidTestClassParent {
	returnsPromiseFunctionProperty: () => Promise<void>;
	returnsPromiseProperty: Promise<void>;
	constructor() {
		super();
		this.returnsPromiseFunctionProperty = () => Promise.resolve();
		this.returnsPromiseProperty = new Promise((resolve, reject) => {});
	}

	async returnsPromiseMethod(): Promise<string> {
		return "value";
	}
	async someMethod() {
		this.returnsPromiseMethod();
	}

	async someMethod2() {
		this.returnsPromiseFromParent()
			.then(() => {})
			.finally(() => {});
	}

	async someMethod3() {
		this.returnsPromiseFunctionProperty();
	}

	async someMethod4() {
		this.returnsPromiseProperty.then(() => {}).finally(() => {});
	}

	async #returnsPromisePrivateMethod(): Promise<string> {
		return "value";
	}
	async someMethod5() {
		this.#returnsPromisePrivateMethod()
			.then(() => {})
			.finally(() => {});
	}

	returnsPromiseFunction = async function (): Promise<string> {
		return "value";
	};
	returnsPromiseArrowFunction = async (): Promise<string> => {
		return "value";
	};

	async someMetho3() {
		this.returnsPromiseFunction()
			.then(() => {})
			.finally(() => {});
		this.returnsPromiseArrowFunction();
	}
};

const invalidTestClassExpression = new InvalidTestClassInitializedExpression();
invalidTestClassExpression
	.returnsPromiseMethod()
	.then(() => {})
	.finally(() => {});
invalidTestClassExpression.returnsPromiseFunctionProperty();
invalidTestClassExpression.returnsPromiseProperty;
invalidTestClassExpression.returnsPromiseProperty
	.then(() => {})
	.finally(() => {});

const InvalidTestUnnamedClassInitializedExpression = class extends InvalidTestClassParent {
	returnsPromiseFunctionProperty: () => Promise<void>;
	returnsPromiseProperty: Promise<void>;
	constructor() {
		super();
		this.returnsPromiseFunctionProperty = () => Promise.resolve();
		this.returnsPromiseProperty = new Promise((resolve, reject) => {});
	}

	async returnsPromiseMethod(): Promise<string> {
		return "value";
	}
	async someMethod() {
		this.returnsPromiseMethod();
	}

	async someMethod2() {
		this.returnsPromiseFromParent()
			.then(() => {})
			.finally(() => {});
	}

	async someMethod3() {
		this.returnsPromiseFunctionProperty();
	}

	async someMethod4() {
		this.returnsPromiseProperty.then(() => {}).finally(() => {});
	}

	async #returnsPromisePrivateMethod(): Promise<string> {
		return "value";
	}
	async someMethod5() {
		this.#returnsPromisePrivateMethod()
			.then(() => {})
			.finally(() => {});
	}

	returnsPromiseFunction = async function (): Promise<string> {
		return "value";
	};
	returnsPromiseArrowFunction = async (): Promise<string> => {
		return "value";
	};

	async someMetho3() {
		this.returnsPromiseFunction()
			.then(() => {})
			.finally(() => {});
		this.returnsPromiseArrowFunction();
	}
};

const invalidTestUnnamedClassInitializedExpression =
	new InvalidTestUnnamedClassInitializedExpression();
invalidTestUnnamedClassInitializedExpression
	.returnsPromiseMethod()
	.then(() => {})
	.finally(() => {});
invalidTestUnnamedClassInitializedExpression.returnsPromiseFunctionProperty();
invalidTestUnnamedClassInitializedExpression.returnsPromiseProperty;
invalidTestUnnamedClassInitializedExpression.returnsPromiseProperty
	.then(() => {})
	.finally(() => {});
invalidTestClassExpression.returnsPromiseProperty
	.then(() => {})
	.finally(() => {});

const invalidTestObject = {
	returnsPromiseArrowFunction: async (): Promise<string> => {
		return "value";
	},

	returnsPromiseFunction: async function (): Promise<string> {
		return "value";
	},

	async returnsPromiseMethod(): Promise<string> {
		return "value";
	},

	someMethod() {
		this.returnsPromiseArrowFunction();
		this.returnsPromiseFunction().then(() => {});
		this["returnsPromiseMethod"]();
	},
};
async function testInvalidObejctMethodCalls(): Promise<void> {
	invalidTestObject.returnsPromiseArrowFunction();
	invalidTestObject.returnsPromiseFunction().then(() => {});
	invalidTestObject
		.returnsPromiseMethod()
		.then(() => {})
		.finally(() => {});
	invalidTestObject["returnsPromiseMethod"]();
}

type Props = {
	a: string;
	returnsPromise: () => Promise<void>;
};
async function testCallingReturnsPromise(props: Props) {
	props.returnsPromise().then(() => {});
}
const testDestructuringAndCallingReturnsPromise = async ({
	returnsPromise,
}: Props) => {
	returnsPromise();
};
async function testPassingReturnsPromiseDirectly(
	returnsPromise: () => Promise<void>
) {
	returnsPromise();
}
async function testCallingReturnsPromiseFromObject(props: {
	returnsPromise: () => Promise<void>;
}) {
	props.returnsPromise();
}
async function testDestructuringAndCallingReturnsPromiseFromRest({
	a,
	...rest
}: Props) {
	rest
		.returnsPromise()
		.then(() => {})
		.finally(() => {});
}

import("some-module").then(() => {});

returnPromiseResult();
returnAliasedPromiseResult();

function returnMaybePromise(): Promise<void> | undefined {
	if (!false) {
		return;
	}

	return Promise.resolve();
}

returnMaybePromise();

```

# Diagnostics
```
invalid.ts:7:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    5 │ 	return "value";
    6 │ }
  > 7 │ returnsPromise();
      │ ^^^^^^^^^^^^^^^^^
    8 │ returnsPromise()
    9 │ 	.then(() => {})
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:8:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
     6 │ }
     7 │ returnsPromise();
   > 8 │ returnsPromise()
       │ ^^^^^^^^^^^^^^^^
   > 9 │ 	.then(() => {})
  > 10 │ 	.finally(() => {});
       │ 	^^^^^^^^^^^^^^^^^^^
    11 │ 
    12 │ async function returnsPromiseInAsyncFunction(): Promise<void> {
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:13:2 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    12 │ async function returnsPromiseInAsyncFunction(): Promise<void> {
  > 13 │ 	returnsPromise();
       │ 	^^^^^^^^^^^^^^^^^
    14 │ }
    15 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    13 │ → await·returnsPromise();
       │   ++++++                 

```

```
invalid.ts:17:2 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    16 │ const returnsPromiseInAsyncArrowFunction = async (): Promise<void> => {
  > 17 │ 	returnsPromise()
       │ 	^^^^^^^^^^^^^^^^
  > 18 │ 		.then(() => {})
  > 19 │ 		.finally(() => {});
       │ 		^^^^^^^^^^^^^^^^^^^
    20 │ };
    21 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    17 │ → await·returnsPromise()
       │   ++++++                

```

```
invalid.ts:24:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    22 │ class Test {
    23 │ 	async returnsPromiseInAsyncClassMethod(): Promise<void> {
  > 24 │ 		returnsPromise();
       │ 		^^^^^^^^^^^^^^^^^
    25 │ 	}
    26 │ }
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    24 │ → → await·returnsPromise();
       │     ++++++                 

```

```
invalid.ts:32:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    30 │ }
    31 │ 
  > 32 │ returnsPromiseWithoutAsync();
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    33 │ 
    34 │ const returnsPromiseAssignedArrowFunction = async (): Promise<string> => {
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:38:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    36 │ };
    37 │ 
  > 38 │ returnsPromiseAssignedArrowFunction();
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    39 │ 
    40 │ const returnsPromiseAssignedFunction = async function (): Promise<string> {
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:45:2 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    44 │ async function returnsPromiseAssignedFunctionInAsyncFunction(): Promise<void> {
  > 45 │ 	returnsPromiseAssignedFunction().then(() => {});
       │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    46 │ }
    47 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    45 │ → await·returnsPromiseAssignedFunction().then(()·=>·{});
       │   ++++++                                                

```

```
invalid.ts:53:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    51 │ 	};
    52 │ 
  > 53 │ returnsPromiseAssignedArrowFunctionAnnotatedType();
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    54 │ 
    55 │ const promise = new Promise((resolve) => resolve("value"));
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:56:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    55 │ const promise = new Promise((resolve) => resolve("value"));
  > 56 │ promise.then(() => {}).finally(() => {});
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    57 │ 
    58 │ Promise.resolve("value").then(() => {});
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:58:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    56 │ promise.then(() => {}).finally(() => {});
    57 │ 
  > 58 │ Promise.resolve("value").then(() => {});
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    59 │ Promise.all([p1, p2, p3]);
    60 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:59:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    58 │ Promise.resolve("value").then(() => {});
  > 59 │ Promise.all([p1, p2, p3]);
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^
    60 │ 
    61 │ const promiseWithParentheses = new Promise((resolve, reject) =>
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:64:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    62 │ 	resolve("value")
    63 │ );
  > 64 │ promiseWithParentheses;
       │ ^^^^^^^^^^^^^^^^^^^^^^^
    65 │ returnsPromise();
    66 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:65:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    63 │ );
    64 │ promiseWithParentheses;
  > 65 │ returnsPromise();
       │ ^^^^^^^^^^^^^^^^^
    66 │ 
    67 │ const promiseWithGlobalIdentifier = new window.Promise((resolve, reject) =>
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:70:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    68 │ 	resolve("value")
    69 │ );
  > 70 │ promiseWithGlobalIdentifier.then(() => {}).finally(() => {});
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    71 │ globalThis.Promise.reject("value").finally();
    72 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:71:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    69 │ );
    70 │ promiseWithGlobalIdentifier.then(() => {}).finally(() => {});
  > 71 │ globalThis.Promise.reject("value").finally();
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    72 │ 
    73 │ class InvalidTestClassParent {
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:91:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    89 │ 	}
    90 │ 	async someMethod() {
  > 91 │ 		this.returnsPromiseMethod();
       │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    92 │ 	}
    93 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    91 │ → → await·this.returnsPromiseMethod();
       │     ++++++                            

```

```
invalid.ts:95:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    94 │ 	async someMethod2() {
  > 95 │ 		this.returnsPromiseFromParent()
       │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 96 │ 			.then(() => {})
  > 97 │ 			.finally(() => {});
       │ 			^^^^^^^^^^^^^^^^^^^
    98 │ 	}
    99 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    95 │ → → await·this.returnsPromiseFromParent()
       │     ++++++                               

```

```
invalid.ts:101:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    100 │ 	async someMethod3() {
  > 101 │ 		this.returnsPromiseFunctionProperty();
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    102 │ 	}
    103 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    101 │ → → await·this.returnsPromiseFunctionProperty();
        │     ++++++                                      

```

```
invalid.ts:105:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    104 │ 	async someMethod4() {
  > 105 │ 		this.returnsPromiseProperty.then(() => {}).finally(() => {});
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    106 │ 	}
    107 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    105 │ → → await·this.returnsPromiseProperty.then(()·=>·{}).finally(()·=>·{});
        │     ++++++                                                             

```

```
invalid.ts:112:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    110 │ 	}
    111 │ 	async someMethod5() {
  > 112 │ 		this.#returnsPromisePrivateMethod()
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 113 │ 			.then(() => {})
  > 114 │ 			.finally(() => {});
        │ 			^^^^^^^^^^^^^^^^^^^
    115 │ 	}
    116 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    112 │ → → await·this.#returnsPromisePrivateMethod()
        │     ++++++                                   

```

```
invalid.ts:125:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    124 │ 	async someMetho3() {
  > 125 │ 		this.returnsPromiseFunction()
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 126 │ 			.then(() => {})
  > 127 │ 			.finally(() => {});
        │ 			^^^^^^^^^^^^^^^^^^^
    128 │ 		this.returnsPromiseArrowFunction();
    129 │ 	}
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    125 │ → → await·this.returnsPromiseFunction()
        │     ++++++                             

```

```
invalid.ts:128:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    126 │ 			.then(() => {})
    127 │ 			.finally(() => {});
  > 128 │ 		this.returnsPromiseArrowFunction();
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    129 │ 	}
    130 │ }
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    128 │ → → await·this.returnsPromiseArrowFunction();
        │     ++++++                                   

```

```
invalid.ts:133:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    132 │ const invalidTestClass = new InvalidTestClass();
  > 133 │ invalidTestClass
        │ ^^^^^^^^^^^^^^^^
  > 134 │ 	.returnsPromiseMethod()
  > 135 │ 	.then(() => {})
  > 136 │ 	.finally(() => {});
        │ 	^^^^^^^^^^^^^^^^^^^
    137 │ invalidTestClass.returnsPromiseFunctionProperty();
    138 │ invalidTestClass.returnsPromiseProperty;
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:137:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    135 │ 	.then(() => {})
    136 │ 	.finally(() => {});
  > 137 │ invalidTestClass.returnsPromiseFunctionProperty();
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    138 │ invalidTestClass.returnsPromiseProperty;
    139 │ invalidTestClass.returnsPromiseProperty.then(() => {}).finally(() => {});
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:138:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    136 │ 	.finally(() => {});
    137 │ invalidTestClass.returnsPromiseFunctionProperty();
  > 138 │ invalidTestClass.returnsPromiseProperty;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    139 │ invalidTestClass.returnsPromiseProperty.then(() => {}).finally(() => {});
    140 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:139:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    137 │ invalidTestClass.returnsPromiseFunctionProperty();
    138 │ invalidTestClass.returnsPromiseProperty;
  > 139 │ invalidTestClass.returnsPromiseProperty.then(() => {}).finally(() => {});
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    140 │ 
    141 │ const InvalidTestClassInitializedExpression = class InvalidTestClass extends InvalidTestClassParent {
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:154:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    152 │ 	}
    153 │ 	async someMethod() {
  > 154 │ 		this.returnsPromiseMethod();
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    155 │ 	}
    156 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    154 │ → → await·this.returnsPromiseMethod();
        │     ++++++                            

```

```
invalid.ts:158:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    157 │ 	async someMethod2() {
  > 158 │ 		this.returnsPromiseFromParent()
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 159 │ 			.then(() => {})
  > 160 │ 			.finally(() => {});
        │ 			^^^^^^^^^^^^^^^^^^^
    161 │ 	}
    162 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    158 │ → → await·this.returnsPromiseFromParent()
        │     ++++++                               

```

```
invalid.ts:164:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    163 │ 	async someMethod3() {
  > 164 │ 		this.returnsPromiseFunctionProperty();
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    165 │ 	}
    166 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    164 │ → → await·this.returnsPromiseFunctionProperty();
        │     ++++++                                      

```

```
invalid.ts:168:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    167 │ 	async someMethod4() {
  > 168 │ 		this.returnsPromiseProperty.then(() => {}).finally(() => {});
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    169 │ 	}
    170 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    168 │ → → await·this.returnsPromiseProperty.then(()·=>·{}).finally(()·=>·{});
        │     ++++++                                                             

```

```
invalid.ts:175:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    173 │ 	}
    174 │ 	async someMethod5() {
  > 175 │ 		this.#returnsPromisePrivateMethod()
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 176 │ 			.then(() => {})
  > 177 │ 			.finally(() => {});
        │ 			^^^^^^^^^^^^^^^^^^^
    178 │ 	}
    179 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    175 │ → → await·this.#returnsPromisePrivateMethod()
        │     ++++++                                   

```

```
invalid.ts:188:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    187 │ 	async someMetho3() {
  > 188 │ 		this.returnsPromiseFunction()
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 189 │ 			.then(() => {})
  > 190 │ 			.finally(() => {});
        │ 			^^^^^^^^^^^^^^^^^^^
    191 │ 		this.returnsPromiseArrowFunction();
    192 │ 	}
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    188 │ → → await·this.returnsPromiseFunction()
        │     ++++++                             

```

```
invalid.ts:191:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    189 │ 			.then(() => {})
    190 │ 			.finally(() => {});
  > 191 │ 		this.returnsPromiseArrowFunction();
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    192 │ 	}
    193 │ };
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    191 │ → → await·this.returnsPromiseArrowFunction();
        │     ++++++                                   

```

```
invalid.ts:196:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    195 │ const invalidTestClassExpression = new InvalidTestClassInitializedExpression();
  > 196 │ invalidTestClassExpression
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 197 │ 	.returnsPromiseMethod()
  > 198 │ 	.then(() => {})
  > 199 │ 	.finally(() => {});
        │ 	^^^^^^^^^^^^^^^^^^^
    200 │ invalidTestClassExpression.returnsPromiseFunctionProperty();
    201 │ invalidTestClassExpression.returnsPromiseProperty;
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:200:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    198 │ 	.then(() => {})
    199 │ 	.finally(() => {});
  > 200 │ invalidTestClassExpression.returnsPromiseFunctionProperty();
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    201 │ invalidTestClassExpression.returnsPromiseProperty;
    202 │ invalidTestClassExpression.returnsPromiseProperty
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:201:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    199 │ 	.finally(() => {});
    200 │ invalidTestClassExpression.returnsPromiseFunctionProperty();
  > 201 │ invalidTestClassExpression.returnsPromiseProperty;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    202 │ invalidTestClassExpression.returnsPromiseProperty
    203 │ 	.then(() => {})
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:202:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    200 │ invalidTestClassExpression.returnsPromiseFunctionProperty();
    201 │ invalidTestClassExpression.returnsPromiseProperty;
  > 202 │ invalidTestClassExpression.returnsPromiseProperty
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 203 │ 	.then(() => {})
  > 204 │ 	.finally(() => {});
        │ 	^^^^^^^^^^^^^^^^^^^
    205 │ 
    206 │ const InvalidTestUnnamedClassInitializedExpression = class extends InvalidTestClassParent {
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:219:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    217 │ 	}
    218 │ 	async someMethod() {
  > 219 │ 		this.returnsPromiseMethod();
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    220 │ 	}
    221 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    219 │ → → await·this.returnsPromiseMethod();
        │     ++++++                            

```

```
invalid.ts:223:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    222 │ 	async someMethod2() {
  > 223 │ 		this.returnsPromiseFromParent()
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 224 │ 			.then(() => {})
  > 225 │ 			.finally(() => {});
        │ 			^^^^^^^^^^^^^^^^^^^
    226 │ 	}
    227 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    223 │ → → await·this.returnsPromiseFromParent()
        │     ++++++                               

```

```
invalid.ts:229:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    228 │ 	async someMethod3() {
  > 229 │ 		this.returnsPromiseFunctionProperty();
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    230 │ 	}
    231 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    229 │ → → await·this.returnsPromiseFunctionProperty();
        │     ++++++                                      

```

```
invalid.ts:233:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    232 │ 	async someMethod4() {
  > 233 │ 		this.returnsPromiseProperty.then(() => {}).finally(() => {});
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    234 │ 	}
    235 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    233 │ → → await·this.returnsPromiseProperty.then(()·=>·{}).finally(()·=>·{});
        │     ++++++                                                             

```

```
invalid.ts:240:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    238 │ 	}
    239 │ 	async someMethod5() {
  > 240 │ 		this.#returnsPromisePrivateMethod()
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 241 │ 			.then(() => {})
  > 242 │ 			.finally(() => {});
        │ 			^^^^^^^^^^^^^^^^^^^
    243 │ 	}
    244 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    240 │ → → await·this.#returnsPromisePrivateMethod()
        │     ++++++                                   

```

```
invalid.ts:253:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    252 │ 	async someMetho3() {
  > 253 │ 		this.returnsPromiseFunction()
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 254 │ 			.then(() => {})
  > 255 │ 			.finally(() => {});
        │ 			^^^^^^^^^^^^^^^^^^^
    256 │ 		this.returnsPromiseArrowFunction();
    257 │ 	}
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    253 │ → → await·this.returnsPromiseFunction()
        │     ++++++                             

```

```
invalid.ts:256:3 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    254 │ 			.then(() => {})
    255 │ 			.finally(() => {});
  > 256 │ 		this.returnsPromiseArrowFunction();
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    257 │ 	}
    258 │ };
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    256 │ → → await·this.returnsPromiseArrowFunction();
        │     ++++++                                   

```

```
invalid.ts:262:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    260 │ const invalidTestUnnamedClassInitializedExpression =
    261 │ 	new InvalidTestUnnamedClassInitializedExpression();
  > 262 │ invalidTestUnnamedClassInitializedExpression
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 263 │ 	.returnsPromiseMethod()
  > 264 │ 	.then(() => {})
  > 265 │ 	.finally(() => {});
        │ 	^^^^^^^^^^^^^^^^^^^
    266 │ invalidTestUnnamedClassInitializedExpression.returnsPromiseFunctionProperty();
    267 │ invalidTestUnnamedClassInitializedExpression.returnsPromiseProperty;
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:266:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    264 │ 	.then(() => {})
    265 │ 	.finally(() => {});
  > 266 │ invalidTestUnnamedClassInitializedExpression.returnsPromiseFunctionProperty();
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    267 │ invalidTestUnnamedClassInitializedExpression.returnsPromiseProperty;
    268 │ invalidTestUnnamedClassInitializedExpression.returnsPromiseProperty
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:267:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    265 │ 	.finally(() => {});
    266 │ invalidTestUnnamedClassInitializedExpression.returnsPromiseFunctionProperty();
  > 267 │ invalidTestUnnamedClassInitializedExpression.returnsPromiseProperty;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    268 │ invalidTestUnnamedClassInitializedExpression.returnsPromiseProperty
    269 │ 	.then(() => {})
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:268:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    266 │ invalidTestUnnamedClassInitializedExpression.returnsPromiseFunctionProperty();
    267 │ invalidTestUnnamedClassInitializedExpression.returnsPromiseProperty;
  > 268 │ invalidTestUnnamedClassInitializedExpression.returnsPromiseProperty
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 269 │ 	.then(() => {})
  > 270 │ 	.finally(() => {});
        │ 	^^^^^^^^^^^^^^^^^^^
    271 │ invalidTestClassExpression.returnsPromiseProperty
    272 │ 	.then(() => {})
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:271:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    269 │ 	.then(() => {})
    270 │ 	.finally(() => {});
  > 271 │ invalidTestClassExpression.returnsPromiseProperty
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 272 │ 	.then(() => {})
  > 273 │ 	.finally(() => {});
        │ 	^^^^^^^^^^^^^^^^^^^
    274 │ 
    275 │ const invalidTestObject = {
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:289:3 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    288 │ 	someMethod() {
  > 289 │ 		this.returnsPromiseArrowFunction();
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    290 │ 		this.returnsPromiseFunction().then(() => {});
    291 │ 		this["returnsPromiseMethod"]();
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:290:3 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    288 │ 	someMethod() {
    289 │ 		this.returnsPromiseArrowFunction();
  > 290 │ 		this.returnsPromiseFunction().then(() => {});
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    291 │ 		this["returnsPromiseMethod"]();
    292 │ 	},
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:291:3 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    289 │ 		this.returnsPromiseArrowFunction();
    290 │ 		this.returnsPromiseFunction().then(() => {});
  > 291 │ 		this["returnsPromiseMethod"]();
        │ 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    292 │ 	},
    293 │ };
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:295:2 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    293 │ };
    294 │ async function testInvalidObejctMethodCalls(): Promise<void> {
  > 295 │ 	invalidTestObject.returnsPromiseArrowFunction();
        │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    296 │ 	invalidTestObject.returnsPromiseFunction().then(() => {});
    297 │ 	invalidTestObject
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    295 │ → await·invalidTestObject.returnsPromiseArrowFunction();
        │   ++++++                                                

```

```
invalid.ts:296:2 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    294 │ async function testInvalidObejctMethodCalls(): Promise<void> {
    295 │ 	invalidTestObject.returnsPromiseArrowFunction();
  > 296 │ 	invalidTestObject.returnsPromiseFunction().then(() => {});
        │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    297 │ 	invalidTestObject
    298 │ 		.returnsPromiseMethod()
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    296 │ → await·invalidTestObject.returnsPromiseFunction().then(()·=>·{});
        │   ++++++                                                          

```

```
invalid.ts:297:2 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    295 │ 	invalidTestObject.returnsPromiseArrowFunction();
    296 │ 	invalidTestObject.returnsPromiseFunction().then(() => {});
  > 297 │ 	invalidTestObject
        │ 	^^^^^^^^^^^^^^^^^
  > 298 │ 		.returnsPromiseMethod()
  > 299 │ 		.then(() => {})
  > 300 │ 		.finally(() => {});
        │ 		^^^^^^^^^^^^^^^^^^^
    301 │ 	invalidTestObject["returnsPromiseMethod"]();
    302 │ }
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    297 │ → await·invalidTestObject
        │   ++++++                 

```

```
invalid.ts:301:2 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    299 │ 		.then(() => {})
    300 │ 		.finally(() => {});
  > 301 │ 	invalidTestObject["returnsPromiseMethod"]();
        │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    302 │ }
    303 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    301 │ → await·invalidTestObject["returnsPromiseMethod"]();
        │   ++++++                                            

```

```
invalid.ts:309:2 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    307 │ };
    308 │ async function testCallingReturnsPromise(props: Props) {
  > 309 │ 	props.returnsPromise().then(() => {});
        │ 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    310 │ }
    311 │ const testDestructuringAndCallingReturnsPromise = async ({
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    309 │ → await·props.returnsPromise().then(()·=>·{});
        │   ++++++                                      

```

```
invalid.ts:314:2 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    312 │ 	returnsPromise,
    313 │ }: Props) => {
  > 314 │ 	returnsPromise();
        │ 	^^^^^^^^^^^^^^^^^
    315 │ };
    316 │ async function testPassingReturnsPromiseDirectly(
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    314 │ → await·returnsPromise();
        │   ++++++                 

```

```
invalid.ts:319:2 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    317 │ 	returnsPromise: () => Promise<void>
    318 │ ) {
  > 319 │ 	returnsPromise();
        │ 	^^^^^^^^^^^^^^^^^
    320 │ }
    321 │ async function testCallingReturnsPromiseFromObject(props: {
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    319 │ → await·returnsPromise();
        │   ++++++                 

```

```
invalid.ts:324:2 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    322 │ 	returnsPromise: () => Promise<void>;
    323 │ }) {
  > 324 │ 	props.returnsPromise();
        │ 	^^^^^^^^^^^^^^^^^^^^^^^
    325 │ }
    326 │ async function testDestructuringAndCallingReturnsPromiseFromRest({
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    324 │ → await·props.returnsPromise();
        │   ++++++                       

```

```
invalid.ts:330:2 lint/nursery/noFloatingPromises  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    328 │ 	...rest
    329 │ }: Props) {
  > 330 │ 	rest
        │ 	^^^^
  > 331 │ 		.returnsPromise()
  > 332 │ 		.then(() => {})
  > 333 │ 		.finally(() => {});
        │ 		^^^^^^^^^^^^^^^^^^^
    334 │ }
    335 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  
  i Unsafe fix: Add await operator.
  
    330 │ → await·rest
        │   ++++++    

```

```
invalid.ts:336:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    334 │ }
    335 │ 
  > 336 │ import("some-module").then(() => {});
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    337 │ 
    338 │ returnPromiseResult();
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:338:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    336 │ import("some-module").then(() => {});
    337 │ 
  > 338 │ returnPromiseResult();
        │ ^^^^^^^^^^^^^^^^^^^^^^
    339 │ returnAliasedPromiseResult();
    340 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:339:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    338 │ returnPromiseResult();
  > 339 │ returnAliasedPromiseResult();
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    340 │ 
    341 │ function returnMaybePromise(): Promise<void> | undefined {
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```

```
invalid.ts:349:1 lint/nursery/noFloatingPromises ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i A "floating" Promise was found, meaning it is not properly handled and could lead to ignored errors or unexpected behavior.
  
    347 │ }
    348 │ 
  > 349 │ returnMaybePromise();
        │ ^^^^^^^^^^^^^^^^^^^^^
    350 │ 
  
  i This happens when a Promise is not awaited, lacks a `.catch` or `.then` rejection handler, or is not explicitly ignored using the `void` operator.
  

```
