---
source: crates/biome_js_analyze/tests/spec_tests.rs
assertion_line: 152
expression: invalid.js
---
# Input
```js


try { /* ... */ } catch (unused) { }

try { /* ... */ } catch (_unused) { }


try { /* ... */ } catch ({ unused }) { }

try { /* ... */ } catch ({ _unused }) { }

try { /* ... */ } catch ({ unused, _unused }) { }


try { /* ... */ } catch (/* leading inner */ unused /* trailing inner */) { }

try { /* ... */ } catch /* leading outer */ (unused) /* trailing outer */ { }

try { /* ... */ } catch /* leading outer */ (/* leading inner */ unused /* trailing inner */) /* trailing outer */ { }

try { /* ... */ } catch /* leading outer */ (/* leading inner 1 */ { /* leading inner 2 */ unused /* trailing inner 2 */ } /* trailing inner 1 */) /* trailing outer */ { }

```

# Diagnostics
```
invalid.js:3:25 lint/nursery/noUselessCatchBinding  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This catch binding is unused.
  
  > 3 │ try { /* ... */ } catch (unused) { }
      │                         ^^^^^^^^
    4 │ 
    5 │ try { /* ... */ } catch (_unused) { }
  
  i Since ECMAScript 2019, catch bindings are optional; you can omit the catch binding if you don't need it.
  
  i Unsafe fix: Remove the catch binding.
  
    3 │ try·{·/*·...·*/·}·catch·(unused)·{·}
      │                         ---------   

```

```
invalid.js:5:25 lint/nursery/noUselessCatchBinding  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This catch binding is unused.
  
    3 │ try { /* ... */ } catch (unused) { }
    4 │ 
  > 5 │ try { /* ... */ } catch (_unused) { }
      │                         ^^^^^^^^^
    6 │ 
  
  i Since ECMAScript 2019, catch bindings are optional; you can omit the catch binding if you don't need it.
  
  i Unsafe fix: Remove the catch binding.
  
    5 │ try·{·/*·...·*/·}·catch·(_unused)·{·}
      │                         ----------   

```

```
invalid.js:8:25 lint/nursery/noUselessCatchBinding  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This catch binding is unused.
  
   > 8 │ try { /* ... */ } catch ({ unused }) { }
       │                         ^^^^^^^^^^^^
     9 │ 
    10 │ try { /* ... */ } catch ({ _unused }) { }
  
  i Since ECMAScript 2019, catch bindings are optional; you can omit the catch binding if you don't need it.
  
  i Unsafe fix: Remove the catch binding.
  
    8 │ try·{·/*·...·*/·}·catch·({·unused·})·{·}
      │                         -------------   

```

```
invalid.js:10:25 lint/nursery/noUselessCatchBinding  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This catch binding is unused.
  
     8 │ try { /* ... */ } catch ({ unused }) { }
     9 │ 
  > 10 │ try { /* ... */ } catch ({ _unused }) { }
       │                         ^^^^^^^^^^^^^
    11 │ 
    12 │ try { /* ... */ } catch ({ unused, _unused }) { }
  
  i Since ECMAScript 2019, catch bindings are optional; you can omit the catch binding if you don't need it.
  
  i Unsafe fix: Remove the catch binding.
  
    10 │ try·{·/*·...·*/·}·catch·({·_unused·})·{·}
       │                         --------------   

```

```
invalid.js:12:25 lint/nursery/noUselessCatchBinding  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This catch binding is unused.
  
    10 │ try { /* ... */ } catch ({ _unused }) { }
    11 │ 
  > 12 │ try { /* ... */ } catch ({ unused, _unused }) { }
       │                         ^^^^^^^^^^^^^^^^^^^^^
    13 │ 
  
  i Since ECMAScript 2019, catch bindings are optional; you can omit the catch binding if you don't need it.
  
  i Unsafe fix: Remove the catch binding.
  
    12 │ try·{·/*·...·*/·}·catch·({·unused,·_unused·})·{·}
       │                         ----------------------   

```

```
invalid.js:15:25 lint/nursery/noUselessCatchBinding  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This catch binding is unused.
  
  > 15 │ try { /* ... */ } catch (/* leading inner */ unused /* trailing inner */) { }
       │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    16 │ 
    17 │ try { /* ... */ } catch /* leading outer */ (unused) /* trailing outer */ { }
  
  i Since ECMAScript 2019, catch bindings are optional; you can omit the catch binding if you don't need it.
  
  i Unsafe fix: Remove the catch binding.
  
    15 │ try·{·/*·...·*/·}·catch·(/*·leading·inner·*/·unused·/*·trailing·inner·*/)·{·}
       │                         --------------------------------------------------   

```

```
invalid.js:17:45 lint/nursery/noUselessCatchBinding  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This catch binding is unused.
  
    15 │ try { /* ... */ } catch (/* leading inner */ unused /* trailing inner */) { }
    16 │ 
  > 17 │ try { /* ... */ } catch /* leading outer */ (unused) /* trailing outer */ { }
       │                                             ^^^^^^^^
    18 │ 
    19 │ try { /* ... */ } catch /* leading outer */ (/* leading inner */ unused /* trailing inner */) /* trailing outer */ { }
  
  i Since ECMAScript 2019, catch bindings are optional; you can omit the catch binding if you don't need it.
  
  i Unsafe fix: Remove the catch binding.
  
    15 15 │   try { /* ... */ } catch (/* leading inner */ unused /* trailing inner */) { }
    16 16 │   
    17    │ - try·{·/*·...·*/·}·catch·/*·leading·outer·*/·(unused)·/*·trailing·outer·*/·{·}
       17 │ + try·{·/*·...·*/·}·catch·/*·leading·outer·*/·/*·trailing·outer·*/·{·}
    18 18 │   
    19 19 │   try { /* ... */ } catch /* leading outer */ (/* leading inner */ unused /* trailing inner */) /* trailing outer */ { }
  

```

```
invalid.js:19:45 lint/nursery/noUselessCatchBinding  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This catch binding is unused.
  
    17 │ try { /* ... */ } catch /* leading outer */ (unused) /* trailing outer */ { }
    18 │ 
  > 19 │ try { /* ... */ } catch /* leading outer */ (/* leading inner */ unused /* trailing inner */) /* trailing outer */ { }
       │                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    20 │ 
    21 │ try { /* ... */ } catch /* leading outer */ (/* leading inner 1 */ { /* leading inner 2 */ unused /* trailing inner 2 */ } /* trailing inner 1 */) /* trailing outer */ { }
  
  i Since ECMAScript 2019, catch bindings are optional; you can omit the catch binding if you don't need it.
  
  i Unsafe fix: Remove the catch binding.
  
    17 17 │   try { /* ... */ } catch /* leading outer */ (unused) /* trailing outer */ { }
    18 18 │   
    19    │ - try·{·/*·...·*/·}·catch·/*·leading·outer·*/·(/*·leading·inner·*/·unused·/*·trailing·inner·*/)·/*·trailing·outer·*/·{·}
       19 │ + try·{·/*·...·*/·}·catch·/*·leading·outer·*/·/*·trailing·outer·*/·{·}
    20 20 │   
    21 21 │   try { /* ... */ } catch /* leading outer */ (/* leading inner 1 */ { /* leading inner 2 */ unused /* trailing inner 2 */ } /* trailing inner 1 */) /* trailing outer */ { }
  

```

```
invalid.js:21:45 lint/nursery/noUselessCatchBinding  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This catch binding is unused.
  
    19 │ try { /* ... */ } catch /* leading outer */ (/* leading inner */ unused /* trailing inner */) /* trailing outer */ { }
    20 │ 
  > 21 │ try { /* ... */ } catch /* leading outer */ (/* leading inner 1 */ { /* leading inner 2 */ unused /* trailing inner 2 */ } /* trailing inner 1 */) /* trailing outer */ { }
       │                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    22 │ 
  
  i Since ECMAScript 2019, catch bindings are optional; you can omit the catch binding if you don't need it.
  
  i Unsafe fix: Remove the catch binding.
  
    19 19 │   try { /* ... */ } catch /* leading outer */ (/* leading inner */ unused /* trailing inner */) /* trailing outer */ { }
    20 20 │   
    21    │ - try·{·/*·...·*/·}·catch·/*·leading·outer·*/·(/*·leading·inner·1·*/·{·/*·leading·inner·2·*/·unused·/*·trailing·inner·2·*/·}·/*·trailing·inner·1·*/)·/*·trailing·outer·*/·{·}
       21 │ + try·{·/*·...·*/·}·catch·/*·leading·outer·*/·/*·trailing·outer·*/·{·}
    22 22 │   
  

```
