---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```js
useVisibleTask$(() => {
  console.log('Component is visible');
});

useVisibleTask$(({ cleanup }) => {
  const subscription = someObservable.subscribe();
  cleanup(() => subscription.unsubscribe());
});

useVisibleTask$(() => {
  document.title = 'New Title';
}, { eagerness: 'visible' });

const MyComponent = component$(() => {
  useVisibleTask$(() => {
    console.log('Component mounted');
  });
  return <div>Hello</div>;
});

export const App = component$(() => {
  useVisibleTask$(({ track }) => {
    track(() => state.value);
    console.log('State changed');
  });
  return <div>App</div>;
});

function setupComponent() {
  useVisibleTask$(() => {
    // Setup logic
  });
}

const setup = () => {
  useVisibleTask$(() => {
    // Setup in arrow function
  });
};

class MyClass {
  constructor() {
    useVisibleTask$(() => {
      // Setup in constructor
    });
  }
}

useVisibleTask$(() => {
  console.log('First task');
});

useVisibleTask$(() => {
  console.log('Second task');
});

useVisibleTask$(({ track, cleanup }) => {
  const interval = setInterval(() => {
    track(() => count.value);
    console.log('Count:', count.value);
  }, 1000);
  cleanup(() => clearInterval(interval));
}); 
```

# Diagnostics
```
invalid.js:1:1 lint/nursery/noQwikUseVisibleTask ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! useVisibleTask$() should be used with care in Qwik applications.
  
  > 1 │ useVisibleTask$(() => {
      │ ^^^^^^^^^^^^^^^
    2 │   console.log('Component is visible');
    3 │ });
  
  i Consider using useTask$() or other Qwik lifecycle functions instead.
  
  > 1 │ useVisibleTask$(() => {
      │ ^^^^^^^^^^^^^^^
    2 │   console.log('Component is visible');
    3 │ });
  

```

```
invalid.js:5:1 lint/nursery/noQwikUseVisibleTask ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! useVisibleTask$() should be used with care in Qwik applications.
  
    3 │ });
    4 │ 
  > 5 │ useVisibleTask$(({ cleanup }) => {
      │ ^^^^^^^^^^^^^^^
    6 │   const subscription = someObservable.subscribe();
    7 │   cleanup(() => subscription.unsubscribe());
  
  i Consider using useTask$() or other Qwik lifecycle functions instead.
  
    3 │ });
    4 │ 
  > 5 │ useVisibleTask$(({ cleanup }) => {
      │ ^^^^^^^^^^^^^^^
    6 │   const subscription = someObservable.subscribe();
    7 │   cleanup(() => subscription.unsubscribe());
  

```

```
invalid.js:10:1 lint/nursery/noQwikUseVisibleTask ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! useVisibleTask$() should be used with care in Qwik applications.
  
     8 │ });
     9 │ 
  > 10 │ useVisibleTask$(() => {
       │ ^^^^^^^^^^^^^^^
    11 │   document.title = 'New Title';
    12 │ }, { eagerness: 'visible' });
  
  i Consider using useTask$() or other Qwik lifecycle functions instead.
  
     8 │ });
     9 │ 
  > 10 │ useVisibleTask$(() => {
       │ ^^^^^^^^^^^^^^^
    11 │   document.title = 'New Title';
    12 │ }, { eagerness: 'visible' });
  

```

```
invalid.js:15:3 lint/nursery/noQwikUseVisibleTask ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! useVisibleTask$() should be used with care in Qwik applications.
  
    14 │ const MyComponent = component$(() => {
  > 15 │   useVisibleTask$(() => {
       │   ^^^^^^^^^^^^^^^
    16 │     console.log('Component mounted');
    17 │   });
  
  i Consider using useTask$() or other Qwik lifecycle functions instead.
  
    14 │ const MyComponent = component$(() => {
  > 15 │   useVisibleTask$(() => {
       │   ^^^^^^^^^^^^^^^
    16 │     console.log('Component mounted');
    17 │   });
  

```

```
invalid.js:22:3 lint/nursery/noQwikUseVisibleTask ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! useVisibleTask$() should be used with care in Qwik applications.
  
    21 │ export const App = component$(() => {
  > 22 │   useVisibleTask$(({ track }) => {
       │   ^^^^^^^^^^^^^^^
    23 │     track(() => state.value);
    24 │     console.log('State changed');
  
  i Consider using useTask$() or other Qwik lifecycle functions instead.
  
    21 │ export const App = component$(() => {
  > 22 │   useVisibleTask$(({ track }) => {
       │   ^^^^^^^^^^^^^^^
    23 │     track(() => state.value);
    24 │     console.log('State changed');
  

```

```
invalid.js:30:3 lint/nursery/noQwikUseVisibleTask ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! useVisibleTask$() should be used with care in Qwik applications.
  
    29 │ function setupComponent() {
  > 30 │   useVisibleTask$(() => {
       │   ^^^^^^^^^^^^^^^
    31 │     // Setup logic
    32 │   });
  
  i Consider using useTask$() or other Qwik lifecycle functions instead.
  
    29 │ function setupComponent() {
  > 30 │   useVisibleTask$(() => {
       │   ^^^^^^^^^^^^^^^
    31 │     // Setup logic
    32 │   });
  

```

```
invalid.js:36:3 lint/nursery/noQwikUseVisibleTask ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! useVisibleTask$() should be used with care in Qwik applications.
  
    35 │ const setup = () => {
  > 36 │   useVisibleTask$(() => {
       │   ^^^^^^^^^^^^^^^
    37 │     // Setup in arrow function
    38 │   });
  
  i Consider using useTask$() or other Qwik lifecycle functions instead.
  
    35 │ const setup = () => {
  > 36 │   useVisibleTask$(() => {
       │   ^^^^^^^^^^^^^^^
    37 │     // Setup in arrow function
    38 │   });
  

```

```
invalid.js:43:5 lint/nursery/noQwikUseVisibleTask ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! useVisibleTask$() should be used with care in Qwik applications.
  
    41 │ class MyClass {
    42 │   constructor() {
  > 43 │     useVisibleTask$(() => {
       │     ^^^^^^^^^^^^^^^
    44 │       // Setup in constructor
    45 │     });
  
  i Consider using useTask$() or other Qwik lifecycle functions instead.
  
    41 │ class MyClass {
    42 │   constructor() {
  > 43 │     useVisibleTask$(() => {
       │     ^^^^^^^^^^^^^^^
    44 │       // Setup in constructor
    45 │     });
  

```

```
invalid.js:49:1 lint/nursery/noQwikUseVisibleTask ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! useVisibleTask$() should be used with care in Qwik applications.
  
    47 │ }
    48 │ 
  > 49 │ useVisibleTask$(() => {
       │ ^^^^^^^^^^^^^^^
    50 │   console.log('First task');
    51 │ });
  
  i Consider using useTask$() or other Qwik lifecycle functions instead.
  
    47 │ }
    48 │ 
  > 49 │ useVisibleTask$(() => {
       │ ^^^^^^^^^^^^^^^
    50 │   console.log('First task');
    51 │ });
  

```

```
invalid.js:53:1 lint/nursery/noQwikUseVisibleTask ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! useVisibleTask$() should be used with care in Qwik applications.
  
    51 │ });
    52 │ 
  > 53 │ useVisibleTask$(() => {
       │ ^^^^^^^^^^^^^^^
    54 │   console.log('Second task');
    55 │ });
  
  i Consider using useTask$() or other Qwik lifecycle functions instead.
  
    51 │ });
    52 │ 
  > 53 │ useVisibleTask$(() => {
       │ ^^^^^^^^^^^^^^^
    54 │   console.log('Second task');
    55 │ });
  

```

```
invalid.js:57:1 lint/nursery/noQwikUseVisibleTask ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! useVisibleTask$() should be used with care in Qwik applications.
  
    55 │ });
    56 │ 
  > 57 │ useVisibleTask$(({ track, cleanup }) => {
       │ ^^^^^^^^^^^^^^^
    58 │   const interval = setInterval(() => {
    59 │     track(() => count.value);
  
  i Consider using useTask$() or other Qwik lifecycle functions instead.
  
    55 │ });
    56 │ 
  > 57 │ useVisibleTask$(({ track, cleanup }) => {
       │ ^^^^^^^^^^^^^^^
    58 │   const interval = setInterval(() => {
    59 │     track(() => count.value);
  

```
