---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```js
let foo = 0;
foo++;

let bar = 0;
++bar;

for (let i = 0; i < 10; j = i++) {
	doSomething(i, j);
}

for (let i = 10; i--;) {
	doSomething(i);
}

for (let i = 0; i < 10;) i++;

for (i = 0; i < l; i++) { v++; }

for (i++;;);

for (;--i;);

for (;;) ++i;

for (;; i = j++);

for (;; i++, f(--j));

for (;; foo + (i++, bar));
```

# Diagnostics
```
invalid.js:2:1 lint/nursery/noIncrementDecrement ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of increment/decrement unary operator.
  
    1 │ let foo = 0;
  > 2 │ foo++;
      │ ^^^^^
    3 │ 
    4 │ let bar = 0;
  
  i The unary ++ and -- operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code. Instead use += or -=.
  

```

```
invalid.js:5:1 lint/nursery/noIncrementDecrement ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of increment/decrement unary operator.
  
    4 │ let bar = 0;
  > 5 │ ++bar;
      │ ^^^^^
    6 │ 
    7 │ for (let i = 0; i < 10; j = i++) {
  
  i The unary ++ and -- operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code. Instead use += or -=.
  

```

```
invalid.js:7:29 lint/nursery/noIncrementDecrement ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of increment/decrement unary operator.
  
    5 │ ++bar;
    6 │ 
  > 7 │ for (let i = 0; i < 10; j = i++) {
      │                             ^^^
    8 │ 	doSomething(i, j);
    9 │ }
  
  i The unary ++ and -- operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code. Instead use += or -=.
  

```

```
invalid.js:11:18 lint/nursery/noIncrementDecrement ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of increment/decrement unary operator.
  
     9 │ }
    10 │ 
  > 11 │ for (let i = 10; i--;) {
       │                  ^^^
    12 │ 	doSomething(i);
    13 │ }
  
  i The unary ++ and -- operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code. Instead use += or -=.
  

```

```
invalid.js:15:26 lint/nursery/noIncrementDecrement ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of increment/decrement unary operator.
  
    13 │ }
    14 │ 
  > 15 │ for (let i = 0; i < 10;) i++;
       │                          ^^^
    16 │ 
    17 │ for (i = 0; i < l; i++) { v++; }
  
  i The unary ++ and -- operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code. Instead use += or -=.
  

```

```
invalid.js:17:27 lint/nursery/noIncrementDecrement ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of increment/decrement unary operator.
  
    15 │ for (let i = 0; i < 10;) i++;
    16 │ 
  > 17 │ for (i = 0; i < l; i++) { v++; }
       │                           ^^^
    18 │ 
    19 │ for (i++;;);
  
  i The unary ++ and -- operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code. Instead use += or -=.
  

```

```
invalid.js:19:6 lint/nursery/noIncrementDecrement ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of increment/decrement unary operator.
  
    17 │ for (i = 0; i < l; i++) { v++; }
    18 │ 
  > 19 │ for (i++;;);
       │      ^^^
    20 │ 
    21 │ for (;--i;);
  
  i The unary ++ and -- operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code. Instead use += or -=.
  

```

```
invalid.js:21:7 lint/nursery/noIncrementDecrement ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of increment/decrement unary operator.
  
    19 │ for (i++;;);
    20 │ 
  > 21 │ for (;--i;);
       │       ^^^
    22 │ 
    23 │ for (;;) ++i;
  
  i The unary ++ and -- operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code. Instead use += or -=.
  

```

```
invalid.js:23:10 lint/nursery/noIncrementDecrement ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of increment/decrement unary operator.
  
    21 │ for (;--i;);
    22 │ 
  > 23 │ for (;;) ++i;
       │          ^^^
    24 │ 
    25 │ for (;; i = j++);
  
  i The unary ++ and -- operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code. Instead use += or -=.
  

```

```
invalid.js:25:13 lint/nursery/noIncrementDecrement ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of increment/decrement unary operator.
  
    23 │ for (;;) ++i;
    24 │ 
  > 25 │ for (;; i = j++);
       │             ^^^
    26 │ 
    27 │ for (;; i++, f(--j));
  
  i The unary ++ and -- operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code. Instead use += or -=.
  

```

```
invalid.js:27:16 lint/nursery/noIncrementDecrement ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of increment/decrement unary operator.
  
    25 │ for (;; i = j++);
    26 │ 
  > 27 │ for (;; i++, f(--j));
       │                ^^^
    28 │ 
    29 │ for (;; foo + (i++, bar));
  
  i The unary ++ and -- operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code. Instead use += or -=.
  

```

```
invalid.js:29:16 lint/nursery/noIncrementDecrement ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected use of increment/decrement unary operator.
  
    27 │ for (;; i++, f(--j));
    28 │ 
  > 29 │ for (;; foo + (i++, bar));
       │                ^^^
  
  i The unary ++ and -- operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code. Instead use += or -=.
  

```
