---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: valid-safe-patterns.js
---
# Input
```js
/* should not generate diagnostics */
import { toRefs, toRef, reactive, ref } from 'vue';

// Safe patterns that preserve reactivity

// Normal props usage
export default {
  setup(props) {
    console.log(props.foo);
    return () => h('div', props.foo)
  }
}

// Using toRefs
export default {
  setup(props) {
    const { foo } = toRefs(props);
    return () => h('div', foo.value)
  }
}

// Using toRef
export default {
  setup(props) {
    const foo = toRef(props, 'foo');
    return () => h('div', foo.value)
  }
}

// Using reactive wrapper
export default {
  setup(props) {
    const reactiveProps = reactive(props);
    return () => h('div', reactiveProps.foo)
  }
}

// Using ref for individual properties
export default {
  setup(props) {
    const foo = ref(props.foo);
    return () => h('div', foo.value)
  }
}

// Using computed member expressions with Vue namespace
import * as Vue from 'vue';

const componentWithComputedMembers = {
  setup(props) {
    const { foo } = Vue["toRefs"](props);
    const bar = Vue["toRef"](props, 'bar');
    return () => h('div', foo.value + bar.value)
  }
}
```
