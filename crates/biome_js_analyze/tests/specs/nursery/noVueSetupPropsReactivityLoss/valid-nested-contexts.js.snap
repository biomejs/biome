---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: valid-nested-contexts.js
---
# Input
```js
/* should not generate diagnostics */

// Valid destructuring in nested contexts where reactivity loss is acceptable

// Destructuring in callbacks/watchers
export default {
  setup(props) {
    watch(() => {
      const { foo } = props;  // OK in reactive callback
      console.log(foo);
    });
    return () => h('div', props.foo)
  }
}

// Destructuring in computed
export default {
  setup(props) {
    const computed = ref(() => {
      const { foo, bar } = props;  // OK in computed
      return foo + bar;
    });
    return () => h('div', computed.value)
  }
}

// Destructuring in render function
export default {
  setup(props) {
    return () => {
      const { foo, bar } = props;  // OK in render function
      return h('div', foo + bar);
    }
  }
}

// Destructuring in nested function
export default {
  setup(props) {
    function helper() {
      const { foo } = props;  // OK in nested function
      console.log(foo);
    }
    return () => h('div', props.foo)
  }
}

// Destructuring other objects (non-props)
export default {
  setup(props) {
    const myObj = { a: 1, b: 2 };
    const { a, b } = myObj;  // OK, not props
    return () => h('div', props.foo + a + b)
  }
}
```
