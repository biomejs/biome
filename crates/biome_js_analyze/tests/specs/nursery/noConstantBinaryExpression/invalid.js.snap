---
source: crates/biome_js_analyze/tests/spec_tests.rs
expression: invalid.js
snapshot_kind: text
---
# Input
```js
[] && greeting;
[] || greeting;
[] ?? greeting;
[] == true;
true == [];
[] != true;
[] === true;
[] !== true;

!foo == null;
!foo ?? bar;
(a + b) / 2 ?? bar;
String(foo.bar) ?? baz;
"hello" + name ?? "";
[foo?.bar ?? ""] ?? [];

// Logical expression with constant truthiness
true && hello;
true || hello;
true && foo;
'' && foo;
100 && foo;
+100 && foo;
-100 && foo;
~100 && foo;
/[a-z]/ && foo;
Boolean([]) && foo;
Boolean() && foo;
Boolean([], n) && foo;
({}) && foo;
[] && foo;
(() => {}) && foo;
(function() {}) && foo;
(class {}) && foo;
(class { valueOf() { return x; } }) && foo;
(class { [x]() { return x; } }) && foo;
new Foo() && foo;

// (boxed values are always truthy)
new Boolean(unknown) && foo;
(bar = false) && foo;
(bar.baz = false) && foo;
(bar[0] = false) && foo;
`hello ${hello}` && foo;
void bar && foo;
!true && foo;
typeof bar && foo;
(bar, baz, true) && foo;
undefined && foo;

// Logical expression with constant nullishness
({}) ?? foo;
([]) ?? foo;
(() => {}) ?? foo;
(function() {}) ?? foo;
(class {}) ?? foo;
new Foo() ?? foo;
1 ?? foo;
/[a-z]/ ?? foo;
`${''}` ?? foo;
(a = true) ?? foo;
(a += 1) ?? foo;
(a -= 1) ?? foo;
(a *= 1) ?? foo;
(a /= 1) ?? foo;
(a %= 1) ?? foo;
(a <<= 1) ?? foo;
(a >>= 1) ?? foo;
(a >>>= 1) ?? foo;
(a |= 1) ?? foo;
(a ^= 1) ?? foo;
(a &= 1) ?? foo;
undefined ?? foo;
!bar ?? foo;
void bar ?? foo;
typeof bar ?? foo;
+bar ?? foo;
-bar ?? foo;
~bar ?? foo;
++bar ?? foo;
bar++ ?? foo;
--bar ?? foo;
bar-- ?? foo;
(x == y) ?? foo;
(x + y) ?? foo;
(x / y) ?? foo;
(x instanceof String) ?? foo;
(x in y) ?? foo;
Boolean(x) ?? foo;
String(x) ?? foo;
Number(x) ?? foo;

// Binary expression with comparison to null
({}) != null;
({}) == null;
null == ({});
({}) == undefined;
undefined == ({});

// Binary expression with loose comparison to boolean
({}) != true;
({}) == true;
([]) == true;
([a, b]) == true;
(() => {}) == true;
(function() {}) == true;
void foo == true;
typeof foo == true;
![] == true;
true == class {};
true == 1;
undefined == true;
true == undefined;
`hello` == true;
/[a-z]/ == true;
({}) == Boolean({});
({}) == Boolean();
({}) == Boolean(() => {}, foo);

// Binary expression with strict comparison to boolean
({}) !== true;
({}) == !({});
({}) === true;
([]) === true;
(function() {}) === true;
(() => {}) === true;
!{} === true;
typeof n === true;
void n === true;
+n === true;
-n === true;
~n === true;
true === true;
1 === true;
'hello' === true;
/[a-z]/ === true;
undefined === true;
(a = {}) === true;
(a += 1) === true;
(a -= 1) === true;
(a *= 1) === true;
(a %= 1) === true;
(a ** b) === true;
(a << b) === true;
(a >> b) === true;
(a >>> b) === true;
--a === true;
a-- === true;
++a === true;
a++ === true;
(a + b) === true;
(a - b) === true;
(a * b) === true;
(a / b) === true;
(a % b) === true;
(a | b) === true;
(a ^ b) === true;
(a & b) === true;
Boolean(0) === Boolean(1);
true === String(x);
true === Number(x);
Boolean(0) == !({});

// Binary expression with strict comparison to null
({}) !== null;
({}) === null;
([]) === null;
(() => {}) === null;
(function() {}) === null;
(class {}) === null;
new Foo() === null;
`` === null;
1 === null;
'hello' === null;
/[a-z]/ === null;
true === null;
null === null;
a++ === null;
++a === null;
--a === null;
a-- === null;
!a === null;
typeof a === null;
delete a.b === null;
void a === null;
undefined === null;
(x = {}) === null;
(x += y) === null;
(x -= y) === null;
(a, b, {}) === null;

// Binary expression with strict comparison to undefined
({}) !== undefined;
({}) === undefined;
([]) === undefined;
(() => {}) === undefined;
(function() {}) === undefined;
(class {}) === undefined;
new Foo() === undefined;
`` === undefined;
1 === undefined;
'hello' === undefined;
/[a-z]/ === undefined;
true === undefined;
null === undefined;
a++ === undefined;
++a === undefined;
--a === undefined;
a-- === undefined;
!a === undefined;
typeof a === undefined;
delete a.b === undefined;
void a === undefined;
undefined === undefined;
(x = {}) === undefined;
(x += y) === undefined;
(x -= y) === undefined;
(a, b, {}) === undefined;

/*
 * If both sides are newly constructed objects, we can tell they will
 * never be equal, even with == equality.
 */
[a] == [a];
[a] != [a];
({}) == [];

// Comparing to always new objects
x === {};
x !== {};
x === [];
x === (() => {});
x === (function() {});
x === (class {});
x === new Boolean();
x === new Promise();
x === new WeakSet();
x === (foo, {});
x === (y = {});
x === (y ? {} : []);
x === /[a-z]/;

// It's not obvious what this does, but it compares the old value of `x` to the new object.
x === (x = {});

window.abc && false && anything;
window.abc || true || anything;
window.abc ?? 'non-nullish' ?? anything;

```

# Diagnostics
```
invalid.js:1:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
  > 1 │ [] && greeting;
      │ ^^^^^^^^^^^^^^
    2 │ [] || greeting;
    3 │ [] ?? greeting;
  
  i This operand always evaluates to the same truthiness.
  
  > 1 │ [] && greeting;
      │ ^^
    2 │ [] || greeting;
    3 │ [] ?? greeting;
  

```

```
invalid.js:2:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    1 │ [] && greeting;
  > 2 │ [] || greeting;
      │ ^^^^^^^^^^^^^^
    3 │ [] ?? greeting;
    4 │ [] == true;
  
  i This operand always evaluates to the same truthiness.
  
    1 │ [] && greeting;
  > 2 │ [] || greeting;
      │ ^^
    3 │ [] ?? greeting;
    4 │ [] == true;
  

```

```
invalid.js:3:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    1 │ [] && greeting;
    2 │ [] || greeting;
  > 3 │ [] ?? greeting;
      │ ^^^^^^^^^^^^^^
    4 │ [] == true;
    5 │ true == [];
  
  i This operand always evaluates to the same nullishness.
  
    1 │ [] && greeting;
    2 │ [] || greeting;
  > 3 │ [] ?? greeting;
      │ ^^
    4 │ [] == true;
    5 │ true == [];
  

```

```
invalid.js:4:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    2 │ [] || greeting;
    3 │ [] ?? greeting;
  > 4 │ [] == true;
      │ ^^^^^^^^^^
    5 │ true == [];
    6 │ [] != true;
  

```

```
invalid.js:5:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    3 │ [] ?? greeting;
    4 │ [] == true;
  > 5 │ true == [];
      │ ^^^^^^^^^^
    6 │ [] != true;
    7 │ [] === true;
  

```

```
invalid.js:6:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    4 │ [] == true;
    5 │ true == [];
  > 6 │ [] != true;
      │ ^^^^^^^^^^
    7 │ [] === true;
    8 │ [] !== true;
  

```

```
invalid.js:7:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    5 │ true == [];
    6 │ [] != true;
  > 7 │ [] === true;
      │ ^^^^^^^^^^^
    8 │ [] !== true;
    9 │ 
  

```

```
invalid.js:8:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
     6 │ [] != true;
     7 │ [] === true;
   > 8 │ [] !== true;
       │ ^^^^^^^^^^^
     9 │ 
    10 │ !foo == null;
  

```

```
invalid.js:10:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
     8 │ [] !== true;
     9 │ 
  > 10 │ !foo == null;
       │ ^^^^^^^^^^^^
    11 │ !foo ?? bar;
    12 │ (a + b) / 2 ?? bar;
  

```

```
invalid.js:11:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    10 │ !foo == null;
  > 11 │ !foo ?? bar;
       │ ^^^^^^^^^^^
    12 │ (a + b) / 2 ?? bar;
    13 │ String(foo.bar) ?? baz;
  
  i This operand always evaluates to the same nullishness.
  
    10 │ !foo == null;
  > 11 │ !foo ?? bar;
       │ ^^^^
    12 │ (a + b) / 2 ?? bar;
    13 │ String(foo.bar) ?? baz;
  

```

```
invalid.js:12:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    10 │ !foo == null;
    11 │ !foo ?? bar;
  > 12 │ (a + b) / 2 ?? bar;
       │ ^^^^^^^^^^^^^^^^^^
    13 │ String(foo.bar) ?? baz;
    14 │ "hello" + name ?? "";
  
  i This operand always evaluates to the same nullishness.
  
    10 │ !foo == null;
    11 │ !foo ?? bar;
  > 12 │ (a + b) / 2 ?? bar;
       │ ^^^^^^^^^^^
    13 │ String(foo.bar) ?? baz;
    14 │ "hello" + name ?? "";
  

```

```
invalid.js:13:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    11 │ !foo ?? bar;
    12 │ (a + b) / 2 ?? bar;
  > 13 │ String(foo.bar) ?? baz;
       │ ^^^^^^^^^^^^^^^^^^^^^^
    14 │ "hello" + name ?? "";
    15 │ [foo?.bar ?? ""] ?? [];
  
  i This operand always evaluates to the same nullishness.
  
    11 │ !foo ?? bar;
    12 │ (a + b) / 2 ?? bar;
  > 13 │ String(foo.bar) ?? baz;
       │ ^^^^^^^^^^^^^^^
    14 │ "hello" + name ?? "";
    15 │ [foo?.bar ?? ""] ?? [];
  

```

```
invalid.js:14:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    12 │ (a + b) / 2 ?? bar;
    13 │ String(foo.bar) ?? baz;
  > 14 │ "hello" + name ?? "";
       │ ^^^^^^^^^^^^^^^^^^^^
    15 │ [foo?.bar ?? ""] ?? [];
    16 │ 
  
  i This operand always evaluates to the same nullishness.
  
    12 │ (a + b) / 2 ?? bar;
    13 │ String(foo.bar) ?? baz;
  > 14 │ "hello" + name ?? "";
       │ ^^^^^^^^^^^^^^
    15 │ [foo?.bar ?? ""] ?? [];
    16 │ 
  

```

```
invalid.js:15:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    13 │ String(foo.bar) ?? baz;
    14 │ "hello" + name ?? "";
  > 15 │ [foo?.bar ?? ""] ?? [];
       │ ^^^^^^^^^^^^^^^^^^^^^^
    16 │ 
    17 │ // Logical expression with constant truthiness
  
  i This operand always evaluates to the same nullishness.
  
    13 │ String(foo.bar) ?? baz;
    14 │ "hello" + name ?? "";
  > 15 │ [foo?.bar ?? ""] ?? [];
       │ ^^^^^^^^^^^^^^^^
    16 │ 
    17 │ // Logical expression with constant truthiness
  

```

```
invalid.js:18:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    17 │ // Logical expression with constant truthiness
  > 18 │ true && hello;
       │ ^^^^^^^^^^^^^
    19 │ true || hello;
    20 │ true && foo;
  
  i This operand always evaluates to the same truthiness.
  
    17 │ // Logical expression with constant truthiness
  > 18 │ true && hello;
       │ ^^^^
    19 │ true || hello;
    20 │ true && foo;
  

```

```
invalid.js:19:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    17 │ // Logical expression with constant truthiness
    18 │ true && hello;
  > 19 │ true || hello;
       │ ^^^^^^^^^^^^^
    20 │ true && foo;
    21 │ '' && foo;
  
  i This operand always evaluates to the same truthiness.
  
    17 │ // Logical expression with constant truthiness
    18 │ true && hello;
  > 19 │ true || hello;
       │ ^^^^
    20 │ true && foo;
    21 │ '' && foo;
  

```

```
invalid.js:20:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    18 │ true && hello;
    19 │ true || hello;
  > 20 │ true && foo;
       │ ^^^^^^^^^^^
    21 │ '' && foo;
    22 │ 100 && foo;
  
  i This operand always evaluates to the same truthiness.
  
    18 │ true && hello;
    19 │ true || hello;
  > 20 │ true && foo;
       │ ^^^^
    21 │ '' && foo;
    22 │ 100 && foo;
  

```

```
invalid.js:21:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    19 │ true || hello;
    20 │ true && foo;
  > 21 │ '' && foo;
       │ ^^^^^^^^^
    22 │ 100 && foo;
    23 │ +100 && foo;
  
  i This operand always evaluates to the same truthiness.
  
    19 │ true || hello;
    20 │ true && foo;
  > 21 │ '' && foo;
       │ ^^
    22 │ 100 && foo;
    23 │ +100 && foo;
  

```

```
invalid.js:22:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    20 │ true && foo;
    21 │ '' && foo;
  > 22 │ 100 && foo;
       │ ^^^^^^^^^^
    23 │ +100 && foo;
    24 │ -100 && foo;
  
  i This operand always evaluates to the same truthiness.
  
    20 │ true && foo;
    21 │ '' && foo;
  > 22 │ 100 && foo;
       │ ^^^
    23 │ +100 && foo;
    24 │ -100 && foo;
  

```

```
invalid.js:23:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    21 │ '' && foo;
    22 │ 100 && foo;
  > 23 │ +100 && foo;
       │ ^^^^^^^^^^^
    24 │ -100 && foo;
    25 │ ~100 && foo;
  
  i This operand always evaluates to the same truthiness.
  
    21 │ '' && foo;
    22 │ 100 && foo;
  > 23 │ +100 && foo;
       │ ^^^^
    24 │ -100 && foo;
    25 │ ~100 && foo;
  

```

```
invalid.js:24:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    22 │ 100 && foo;
    23 │ +100 && foo;
  > 24 │ -100 && foo;
       │ ^^^^^^^^^^^
    25 │ ~100 && foo;
    26 │ /[a-z]/ && foo;
  
  i This operand always evaluates to the same truthiness.
  
    22 │ 100 && foo;
    23 │ +100 && foo;
  > 24 │ -100 && foo;
       │ ^^^^
    25 │ ~100 && foo;
    26 │ /[a-z]/ && foo;
  

```

```
invalid.js:25:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    23 │ +100 && foo;
    24 │ -100 && foo;
  > 25 │ ~100 && foo;
       │ ^^^^^^^^^^^
    26 │ /[a-z]/ && foo;
    27 │ Boolean([]) && foo;
  
  i This operand always evaluates to the same truthiness.
  
    23 │ +100 && foo;
    24 │ -100 && foo;
  > 25 │ ~100 && foo;
       │ ^^^^
    26 │ /[a-z]/ && foo;
    27 │ Boolean([]) && foo;
  

```

```
invalid.js:26:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    24 │ -100 && foo;
    25 │ ~100 && foo;
  > 26 │ /[a-z]/ && foo;
       │ ^^^^^^^^^^^^^^
    27 │ Boolean([]) && foo;
    28 │ Boolean() && foo;
  
  i This operand always evaluates to the same truthiness.
  
    24 │ -100 && foo;
    25 │ ~100 && foo;
  > 26 │ /[a-z]/ && foo;
       │ ^^^^^^^
    27 │ Boolean([]) && foo;
    28 │ Boolean() && foo;
  

```

```
invalid.js:27:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    25 │ ~100 && foo;
    26 │ /[a-z]/ && foo;
  > 27 │ Boolean([]) && foo;
       │ ^^^^^^^^^^^^^^^^^^
    28 │ Boolean() && foo;
    29 │ Boolean([], n) && foo;
  
  i This operand always evaluates to the same truthiness.
  
    25 │ ~100 && foo;
    26 │ /[a-z]/ && foo;
  > 27 │ Boolean([]) && foo;
       │ ^^^^^^^^^^^
    28 │ Boolean() && foo;
    29 │ Boolean([], n) && foo;
  

```

```
invalid.js:28:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    26 │ /[a-z]/ && foo;
    27 │ Boolean([]) && foo;
  > 28 │ Boolean() && foo;
       │ ^^^^^^^^^^^^^^^^
    29 │ Boolean([], n) && foo;
    30 │ ({}) && foo;
  
  i This operand always evaluates to the same truthiness.
  
    26 │ /[a-z]/ && foo;
    27 │ Boolean([]) && foo;
  > 28 │ Boolean() && foo;
       │ ^^^^^^^^^
    29 │ Boolean([], n) && foo;
    30 │ ({}) && foo;
  

```

```
invalid.js:29:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    27 │ Boolean([]) && foo;
    28 │ Boolean() && foo;
  > 29 │ Boolean([], n) && foo;
       │ ^^^^^^^^^^^^^^^^^^^^^
    30 │ ({}) && foo;
    31 │ [] && foo;
  
  i This operand always evaluates to the same truthiness.
  
    27 │ Boolean([]) && foo;
    28 │ Boolean() && foo;
  > 29 │ Boolean([], n) && foo;
       │ ^^^^^^^^^^^^^^
    30 │ ({}) && foo;
    31 │ [] && foo;
  

```

```
invalid.js:30:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    28 │ Boolean() && foo;
    29 │ Boolean([], n) && foo;
  > 30 │ ({}) && foo;
       │ ^^^^^^^^^^^
    31 │ [] && foo;
    32 │ (() => {}) && foo;
  
  i This operand always evaluates to the same truthiness.
  
    28 │ Boolean() && foo;
    29 │ Boolean([], n) && foo;
  > 30 │ ({}) && foo;
       │ ^^^^
    31 │ [] && foo;
    32 │ (() => {}) && foo;
  

```

```
invalid.js:31:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    29 │ Boolean([], n) && foo;
    30 │ ({}) && foo;
  > 31 │ [] && foo;
       │ ^^^^^^^^^
    32 │ (() => {}) && foo;
    33 │ (function() {}) && foo;
  
  i This operand always evaluates to the same truthiness.
  
    29 │ Boolean([], n) && foo;
    30 │ ({}) && foo;
  > 31 │ [] && foo;
       │ ^^
    32 │ (() => {}) && foo;
    33 │ (function() {}) && foo;
  

```

```
invalid.js:32:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    30 │ ({}) && foo;
    31 │ [] && foo;
  > 32 │ (() => {}) && foo;
       │ ^^^^^^^^^^^^^^^^^
    33 │ (function() {}) && foo;
    34 │ (class {}) && foo;
  
  i This operand always evaluates to the same truthiness.
  
    30 │ ({}) && foo;
    31 │ [] && foo;
  > 32 │ (() => {}) && foo;
       │ ^^^^^^^^^^
    33 │ (function() {}) && foo;
    34 │ (class {}) && foo;
  

```

```
invalid.js:33:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    31 │ [] && foo;
    32 │ (() => {}) && foo;
  > 33 │ (function() {}) && foo;
       │ ^^^^^^^^^^^^^^^^^^^^^^
    34 │ (class {}) && foo;
    35 │ (class { valueOf() { return x; } }) && foo;
  
  i This operand always evaluates to the same truthiness.
  
    31 │ [] && foo;
    32 │ (() => {}) && foo;
  > 33 │ (function() {}) && foo;
       │ ^^^^^^^^^^^^^^^
    34 │ (class {}) && foo;
    35 │ (class { valueOf() { return x; } }) && foo;
  

```

```
invalid.js:34:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    32 │ (() => {}) && foo;
    33 │ (function() {}) && foo;
  > 34 │ (class {}) && foo;
       │ ^^^^^^^^^^^^^^^^^
    35 │ (class { valueOf() { return x; } }) && foo;
    36 │ (class { [x]() { return x; } }) && foo;
  
  i This operand always evaluates to the same truthiness.
  
    32 │ (() => {}) && foo;
    33 │ (function() {}) && foo;
  > 34 │ (class {}) && foo;
       │ ^^^^^^^^^^
    35 │ (class { valueOf() { return x; } }) && foo;
    36 │ (class { [x]() { return x; } }) && foo;
  

```

```
invalid.js:35:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    33 │ (function() {}) && foo;
    34 │ (class {}) && foo;
  > 35 │ (class { valueOf() { return x; } }) && foo;
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    36 │ (class { [x]() { return x; } }) && foo;
    37 │ new Foo() && foo;
  
  i This operand always evaluates to the same truthiness.
  
    33 │ (function() {}) && foo;
    34 │ (class {}) && foo;
  > 35 │ (class { valueOf() { return x; } }) && foo;
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    36 │ (class { [x]() { return x; } }) && foo;
    37 │ new Foo() && foo;
  

```

```
invalid.js:36:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    34 │ (class {}) && foo;
    35 │ (class { valueOf() { return x; } }) && foo;
  > 36 │ (class { [x]() { return x; } }) && foo;
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    37 │ new Foo() && foo;
    38 │ 
  
  i This operand always evaluates to the same truthiness.
  
    34 │ (class {}) && foo;
    35 │ (class { valueOf() { return x; } }) && foo;
  > 36 │ (class { [x]() { return x; } }) && foo;
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    37 │ new Foo() && foo;
    38 │ 
  

```

```
invalid.js:37:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    35 │ (class { valueOf() { return x; } }) && foo;
    36 │ (class { [x]() { return x; } }) && foo;
  > 37 │ new Foo() && foo;
       │ ^^^^^^^^^^^^^^^^
    38 │ 
    39 │ // (boxed values are always truthy)
  
  i This operand always evaluates to the same truthiness.
  
    35 │ (class { valueOf() { return x; } }) && foo;
    36 │ (class { [x]() { return x; } }) && foo;
  > 37 │ new Foo() && foo;
       │ ^^^^^^^^^
    38 │ 
    39 │ // (boxed values are always truthy)
  

```

```
invalid.js:40:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    39 │ // (boxed values are always truthy)
  > 40 │ new Boolean(unknown) && foo;
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    41 │ (bar = false) && foo;
    42 │ (bar.baz = false) && foo;
  
  i This operand always evaluates to the same truthiness.
  
    39 │ // (boxed values are always truthy)
  > 40 │ new Boolean(unknown) && foo;
       │ ^^^^^^^^^^^^^^^^^^^^
    41 │ (bar = false) && foo;
    42 │ (bar.baz = false) && foo;
  

```

```
invalid.js:41:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    39 │ // (boxed values are always truthy)
    40 │ new Boolean(unknown) && foo;
  > 41 │ (bar = false) && foo;
       │ ^^^^^^^^^^^^^^^^^^^^
    42 │ (bar.baz = false) && foo;
    43 │ (bar[0] = false) && foo;
  
  i This operand always evaluates to the same truthiness.
  
    39 │ // (boxed values are always truthy)
    40 │ new Boolean(unknown) && foo;
  > 41 │ (bar = false) && foo;
       │ ^^^^^^^^^^^^^
    42 │ (bar.baz = false) && foo;
    43 │ (bar[0] = false) && foo;
  

```

```
invalid.js:42:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    40 │ new Boolean(unknown) && foo;
    41 │ (bar = false) && foo;
  > 42 │ (bar.baz = false) && foo;
       │ ^^^^^^^^^^^^^^^^^^^^^^^^
    43 │ (bar[0] = false) && foo;
    44 │ `hello ${hello}` && foo;
  
  i This operand always evaluates to the same truthiness.
  
    40 │ new Boolean(unknown) && foo;
    41 │ (bar = false) && foo;
  > 42 │ (bar.baz = false) && foo;
       │ ^^^^^^^^^^^^^^^^^
    43 │ (bar[0] = false) && foo;
    44 │ `hello ${hello}` && foo;
  

```

```
invalid.js:43:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    41 │ (bar = false) && foo;
    42 │ (bar.baz = false) && foo;
  > 43 │ (bar[0] = false) && foo;
       │ ^^^^^^^^^^^^^^^^^^^^^^^
    44 │ `hello ${hello}` && foo;
    45 │ void bar && foo;
  
  i This operand always evaluates to the same truthiness.
  
    41 │ (bar = false) && foo;
    42 │ (bar.baz = false) && foo;
  > 43 │ (bar[0] = false) && foo;
       │ ^^^^^^^^^^^^^^^^
    44 │ `hello ${hello}` && foo;
    45 │ void bar && foo;
  

```

```
invalid.js:44:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    42 │ (bar.baz = false) && foo;
    43 │ (bar[0] = false) && foo;
  > 44 │ `hello ${hello}` && foo;
       │ ^^^^^^^^^^^^^^^^^^^^^^^
    45 │ void bar && foo;
    46 │ !true && foo;
  
  i This operand always evaluates to the same truthiness.
  
    42 │ (bar.baz = false) && foo;
    43 │ (bar[0] = false) && foo;
  > 44 │ `hello ${hello}` && foo;
       │ ^^^^^^^^^^^^^^^^
    45 │ void bar && foo;
    46 │ !true && foo;
  

```

```
invalid.js:45:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    43 │ (bar[0] = false) && foo;
    44 │ `hello ${hello}` && foo;
  > 45 │ void bar && foo;
       │ ^^^^^^^^^^^^^^^
    46 │ !true && foo;
    47 │ typeof bar && foo;
  
  i This operand always evaluates to the same truthiness.
  
    43 │ (bar[0] = false) && foo;
    44 │ `hello ${hello}` && foo;
  > 45 │ void bar && foo;
       │ ^^^^^^^^
    46 │ !true && foo;
    47 │ typeof bar && foo;
  

```

```
invalid.js:46:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    44 │ `hello ${hello}` && foo;
    45 │ void bar && foo;
  > 46 │ !true && foo;
       │ ^^^^^^^^^^^^
    47 │ typeof bar && foo;
    48 │ (bar, baz, true) && foo;
  
  i This operand always evaluates to the same truthiness.
  
    44 │ `hello ${hello}` && foo;
    45 │ void bar && foo;
  > 46 │ !true && foo;
       │ ^^^^^
    47 │ typeof bar && foo;
    48 │ (bar, baz, true) && foo;
  

```

```
invalid.js:47:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    45 │ void bar && foo;
    46 │ !true && foo;
  > 47 │ typeof bar && foo;
       │ ^^^^^^^^^^^^^^^^^
    48 │ (bar, baz, true) && foo;
    49 │ undefined && foo;
  
  i This operand always evaluates to the same truthiness.
  
    45 │ void bar && foo;
    46 │ !true && foo;
  > 47 │ typeof bar && foo;
       │ ^^^^^^^^^^
    48 │ (bar, baz, true) && foo;
    49 │ undefined && foo;
  

```

```
invalid.js:48:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    46 │ !true && foo;
    47 │ typeof bar && foo;
  > 48 │ (bar, baz, true) && foo;
       │ ^^^^^^^^^^^^^^^^^^^^^^^
    49 │ undefined && foo;
    50 │ 
  
  i This operand always evaluates to the same truthiness.
  
    46 │ !true && foo;
    47 │ typeof bar && foo;
  > 48 │ (bar, baz, true) && foo;
       │ ^^^^^^^^^^^^^^^^
    49 │ undefined && foo;
    50 │ 
  

```

```
invalid.js:49:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    47 │ typeof bar && foo;
    48 │ (bar, baz, true) && foo;
  > 49 │ undefined && foo;
       │ ^^^^^^^^^^^^^^^^
    50 │ 
    51 │ // Logical expression with constant nullishness
  
  i This operand always evaluates to the same truthiness.
  
    47 │ typeof bar && foo;
    48 │ (bar, baz, true) && foo;
  > 49 │ undefined && foo;
       │ ^^^^^^^^^
    50 │ 
    51 │ // Logical expression with constant nullishness
  

```

```
invalid.js:52:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    51 │ // Logical expression with constant nullishness
  > 52 │ ({}) ?? foo;
       │ ^^^^^^^^^^^
    53 │ ([]) ?? foo;
    54 │ (() => {}) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    51 │ // Logical expression with constant nullishness
  > 52 │ ({}) ?? foo;
       │ ^^^^
    53 │ ([]) ?? foo;
    54 │ (() => {}) ?? foo;
  

```

```
invalid.js:53:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    51 │ // Logical expression with constant nullishness
    52 │ ({}) ?? foo;
  > 53 │ ([]) ?? foo;
       │ ^^^^^^^^^^^
    54 │ (() => {}) ?? foo;
    55 │ (function() {}) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    51 │ // Logical expression with constant nullishness
    52 │ ({}) ?? foo;
  > 53 │ ([]) ?? foo;
       │ ^^^^
    54 │ (() => {}) ?? foo;
    55 │ (function() {}) ?? foo;
  

```

```
invalid.js:54:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    52 │ ({}) ?? foo;
    53 │ ([]) ?? foo;
  > 54 │ (() => {}) ?? foo;
       │ ^^^^^^^^^^^^^^^^^
    55 │ (function() {}) ?? foo;
    56 │ (class {}) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    52 │ ({}) ?? foo;
    53 │ ([]) ?? foo;
  > 54 │ (() => {}) ?? foo;
       │ ^^^^^^^^^^
    55 │ (function() {}) ?? foo;
    56 │ (class {}) ?? foo;
  

```

```
invalid.js:55:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    53 │ ([]) ?? foo;
    54 │ (() => {}) ?? foo;
  > 55 │ (function() {}) ?? foo;
       │ ^^^^^^^^^^^^^^^^^^^^^^
    56 │ (class {}) ?? foo;
    57 │ new Foo() ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    53 │ ([]) ?? foo;
    54 │ (() => {}) ?? foo;
  > 55 │ (function() {}) ?? foo;
       │ ^^^^^^^^^^^^^^^
    56 │ (class {}) ?? foo;
    57 │ new Foo() ?? foo;
  

```

```
invalid.js:56:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    54 │ (() => {}) ?? foo;
    55 │ (function() {}) ?? foo;
  > 56 │ (class {}) ?? foo;
       │ ^^^^^^^^^^^^^^^^^
    57 │ new Foo() ?? foo;
    58 │ 1 ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    54 │ (() => {}) ?? foo;
    55 │ (function() {}) ?? foo;
  > 56 │ (class {}) ?? foo;
       │ ^^^^^^^^^^
    57 │ new Foo() ?? foo;
    58 │ 1 ?? foo;
  

```

```
invalid.js:57:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    55 │ (function() {}) ?? foo;
    56 │ (class {}) ?? foo;
  > 57 │ new Foo() ?? foo;
       │ ^^^^^^^^^^^^^^^^
    58 │ 1 ?? foo;
    59 │ /[a-z]/ ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    55 │ (function() {}) ?? foo;
    56 │ (class {}) ?? foo;
  > 57 │ new Foo() ?? foo;
       │ ^^^^^^^^^
    58 │ 1 ?? foo;
    59 │ /[a-z]/ ?? foo;
  

```

```
invalid.js:58:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    56 │ (class {}) ?? foo;
    57 │ new Foo() ?? foo;
  > 58 │ 1 ?? foo;
       │ ^^^^^^^^
    59 │ /[a-z]/ ?? foo;
    60 │ `${''}` ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    56 │ (class {}) ?? foo;
    57 │ new Foo() ?? foo;
  > 58 │ 1 ?? foo;
       │ ^
    59 │ /[a-z]/ ?? foo;
    60 │ `${''}` ?? foo;
  

```

```
invalid.js:59:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    57 │ new Foo() ?? foo;
    58 │ 1 ?? foo;
  > 59 │ /[a-z]/ ?? foo;
       │ ^^^^^^^^^^^^^^
    60 │ `${''}` ?? foo;
    61 │ (a = true) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    57 │ new Foo() ?? foo;
    58 │ 1 ?? foo;
  > 59 │ /[a-z]/ ?? foo;
       │ ^^^^^^^
    60 │ `${''}` ?? foo;
    61 │ (a = true) ?? foo;
  

```

```
invalid.js:60:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    58 │ 1 ?? foo;
    59 │ /[a-z]/ ?? foo;
  > 60 │ `${''}` ?? foo;
       │ ^^^^^^^^^^^^^^
    61 │ (a = true) ?? foo;
    62 │ (a += 1) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    58 │ 1 ?? foo;
    59 │ /[a-z]/ ?? foo;
  > 60 │ `${''}` ?? foo;
       │ ^^^^^^^
    61 │ (a = true) ?? foo;
    62 │ (a += 1) ?? foo;
  

```

```
invalid.js:61:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    59 │ /[a-z]/ ?? foo;
    60 │ `${''}` ?? foo;
  > 61 │ (a = true) ?? foo;
       │ ^^^^^^^^^^^^^^^^^
    62 │ (a += 1) ?? foo;
    63 │ (a -= 1) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    59 │ /[a-z]/ ?? foo;
    60 │ `${''}` ?? foo;
  > 61 │ (a = true) ?? foo;
       │ ^^^^^^^^^^
    62 │ (a += 1) ?? foo;
    63 │ (a -= 1) ?? foo;
  

```

```
invalid.js:62:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    60 │ `${''}` ?? foo;
    61 │ (a = true) ?? foo;
  > 62 │ (a += 1) ?? foo;
       │ ^^^^^^^^^^^^^^^
    63 │ (a -= 1) ?? foo;
    64 │ (a *= 1) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    60 │ `${''}` ?? foo;
    61 │ (a = true) ?? foo;
  > 62 │ (a += 1) ?? foo;
       │ ^^^^^^^^
    63 │ (a -= 1) ?? foo;
    64 │ (a *= 1) ?? foo;
  

```

```
invalid.js:63:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    61 │ (a = true) ?? foo;
    62 │ (a += 1) ?? foo;
  > 63 │ (a -= 1) ?? foo;
       │ ^^^^^^^^^^^^^^^
    64 │ (a *= 1) ?? foo;
    65 │ (a /= 1) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    61 │ (a = true) ?? foo;
    62 │ (a += 1) ?? foo;
  > 63 │ (a -= 1) ?? foo;
       │ ^^^^^^^^
    64 │ (a *= 1) ?? foo;
    65 │ (a /= 1) ?? foo;
  

```

```
invalid.js:64:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    62 │ (a += 1) ?? foo;
    63 │ (a -= 1) ?? foo;
  > 64 │ (a *= 1) ?? foo;
       │ ^^^^^^^^^^^^^^^
    65 │ (a /= 1) ?? foo;
    66 │ (a %= 1) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    62 │ (a += 1) ?? foo;
    63 │ (a -= 1) ?? foo;
  > 64 │ (a *= 1) ?? foo;
       │ ^^^^^^^^
    65 │ (a /= 1) ?? foo;
    66 │ (a %= 1) ?? foo;
  

```

```
invalid.js:65:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    63 │ (a -= 1) ?? foo;
    64 │ (a *= 1) ?? foo;
  > 65 │ (a /= 1) ?? foo;
       │ ^^^^^^^^^^^^^^^
    66 │ (a %= 1) ?? foo;
    67 │ (a <<= 1) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    63 │ (a -= 1) ?? foo;
    64 │ (a *= 1) ?? foo;
  > 65 │ (a /= 1) ?? foo;
       │ ^^^^^^^^
    66 │ (a %= 1) ?? foo;
    67 │ (a <<= 1) ?? foo;
  

```

```
invalid.js:66:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    64 │ (a *= 1) ?? foo;
    65 │ (a /= 1) ?? foo;
  > 66 │ (a %= 1) ?? foo;
       │ ^^^^^^^^^^^^^^^
    67 │ (a <<= 1) ?? foo;
    68 │ (a >>= 1) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    64 │ (a *= 1) ?? foo;
    65 │ (a /= 1) ?? foo;
  > 66 │ (a %= 1) ?? foo;
       │ ^^^^^^^^
    67 │ (a <<= 1) ?? foo;
    68 │ (a >>= 1) ?? foo;
  

```

```
invalid.js:67:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    65 │ (a /= 1) ?? foo;
    66 │ (a %= 1) ?? foo;
  > 67 │ (a <<= 1) ?? foo;
       │ ^^^^^^^^^^^^^^^^
    68 │ (a >>= 1) ?? foo;
    69 │ (a >>>= 1) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    65 │ (a /= 1) ?? foo;
    66 │ (a %= 1) ?? foo;
  > 67 │ (a <<= 1) ?? foo;
       │ ^^^^^^^^^
    68 │ (a >>= 1) ?? foo;
    69 │ (a >>>= 1) ?? foo;
  

```

```
invalid.js:68:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    66 │ (a %= 1) ?? foo;
    67 │ (a <<= 1) ?? foo;
  > 68 │ (a >>= 1) ?? foo;
       │ ^^^^^^^^^^^^^^^^
    69 │ (a >>>= 1) ?? foo;
    70 │ (a |= 1) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    66 │ (a %= 1) ?? foo;
    67 │ (a <<= 1) ?? foo;
  > 68 │ (a >>= 1) ?? foo;
       │ ^^^^^^^^^
    69 │ (a >>>= 1) ?? foo;
    70 │ (a |= 1) ?? foo;
  

```

```
invalid.js:69:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    67 │ (a <<= 1) ?? foo;
    68 │ (a >>= 1) ?? foo;
  > 69 │ (a >>>= 1) ?? foo;
       │ ^^^^^^^^^^^^^^^^^
    70 │ (a |= 1) ?? foo;
    71 │ (a ^= 1) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    67 │ (a <<= 1) ?? foo;
    68 │ (a >>= 1) ?? foo;
  > 69 │ (a >>>= 1) ?? foo;
       │ ^^^^^^^^^^
    70 │ (a |= 1) ?? foo;
    71 │ (a ^= 1) ?? foo;
  

```

```
invalid.js:70:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    68 │ (a >>= 1) ?? foo;
    69 │ (a >>>= 1) ?? foo;
  > 70 │ (a |= 1) ?? foo;
       │ ^^^^^^^^^^^^^^^
    71 │ (a ^= 1) ?? foo;
    72 │ (a &= 1) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    68 │ (a >>= 1) ?? foo;
    69 │ (a >>>= 1) ?? foo;
  > 70 │ (a |= 1) ?? foo;
       │ ^^^^^^^^
    71 │ (a ^= 1) ?? foo;
    72 │ (a &= 1) ?? foo;
  

```

```
invalid.js:71:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    69 │ (a >>>= 1) ?? foo;
    70 │ (a |= 1) ?? foo;
  > 71 │ (a ^= 1) ?? foo;
       │ ^^^^^^^^^^^^^^^
    72 │ (a &= 1) ?? foo;
    73 │ undefined ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    69 │ (a >>>= 1) ?? foo;
    70 │ (a |= 1) ?? foo;
  > 71 │ (a ^= 1) ?? foo;
       │ ^^^^^^^^
    72 │ (a &= 1) ?? foo;
    73 │ undefined ?? foo;
  

```

```
invalid.js:72:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    70 │ (a |= 1) ?? foo;
    71 │ (a ^= 1) ?? foo;
  > 72 │ (a &= 1) ?? foo;
       │ ^^^^^^^^^^^^^^^
    73 │ undefined ?? foo;
    74 │ !bar ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    70 │ (a |= 1) ?? foo;
    71 │ (a ^= 1) ?? foo;
  > 72 │ (a &= 1) ?? foo;
       │ ^^^^^^^^
    73 │ undefined ?? foo;
    74 │ !bar ?? foo;
  

```

```
invalid.js:73:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    71 │ (a ^= 1) ?? foo;
    72 │ (a &= 1) ?? foo;
  > 73 │ undefined ?? foo;
       │ ^^^^^^^^^^^^^^^^
    74 │ !bar ?? foo;
    75 │ void bar ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    71 │ (a ^= 1) ?? foo;
    72 │ (a &= 1) ?? foo;
  > 73 │ undefined ?? foo;
       │ ^^^^^^^^^
    74 │ !bar ?? foo;
    75 │ void bar ?? foo;
  

```

```
invalid.js:74:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    72 │ (a &= 1) ?? foo;
    73 │ undefined ?? foo;
  > 74 │ !bar ?? foo;
       │ ^^^^^^^^^^^
    75 │ void bar ?? foo;
    76 │ typeof bar ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    72 │ (a &= 1) ?? foo;
    73 │ undefined ?? foo;
  > 74 │ !bar ?? foo;
       │ ^^^^
    75 │ void bar ?? foo;
    76 │ typeof bar ?? foo;
  

```

```
invalid.js:75:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    73 │ undefined ?? foo;
    74 │ !bar ?? foo;
  > 75 │ void bar ?? foo;
       │ ^^^^^^^^^^^^^^^
    76 │ typeof bar ?? foo;
    77 │ +bar ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    73 │ undefined ?? foo;
    74 │ !bar ?? foo;
  > 75 │ void bar ?? foo;
       │ ^^^^^^^^
    76 │ typeof bar ?? foo;
    77 │ +bar ?? foo;
  

```

```
invalid.js:76:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    74 │ !bar ?? foo;
    75 │ void bar ?? foo;
  > 76 │ typeof bar ?? foo;
       │ ^^^^^^^^^^^^^^^^^
    77 │ +bar ?? foo;
    78 │ -bar ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    74 │ !bar ?? foo;
    75 │ void bar ?? foo;
  > 76 │ typeof bar ?? foo;
       │ ^^^^^^^^^^
    77 │ +bar ?? foo;
    78 │ -bar ?? foo;
  

```

```
invalid.js:77:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    75 │ void bar ?? foo;
    76 │ typeof bar ?? foo;
  > 77 │ +bar ?? foo;
       │ ^^^^^^^^^^^
    78 │ -bar ?? foo;
    79 │ ~bar ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    75 │ void bar ?? foo;
    76 │ typeof bar ?? foo;
  > 77 │ +bar ?? foo;
       │ ^^^^
    78 │ -bar ?? foo;
    79 │ ~bar ?? foo;
  

```

```
invalid.js:78:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    76 │ typeof bar ?? foo;
    77 │ +bar ?? foo;
  > 78 │ -bar ?? foo;
       │ ^^^^^^^^^^^
    79 │ ~bar ?? foo;
    80 │ ++bar ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    76 │ typeof bar ?? foo;
    77 │ +bar ?? foo;
  > 78 │ -bar ?? foo;
       │ ^^^^
    79 │ ~bar ?? foo;
    80 │ ++bar ?? foo;
  

```

```
invalid.js:79:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    77 │ +bar ?? foo;
    78 │ -bar ?? foo;
  > 79 │ ~bar ?? foo;
       │ ^^^^^^^^^^^
    80 │ ++bar ?? foo;
    81 │ bar++ ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    77 │ +bar ?? foo;
    78 │ -bar ?? foo;
  > 79 │ ~bar ?? foo;
       │ ^^^^
    80 │ ++bar ?? foo;
    81 │ bar++ ?? foo;
  

```

```
invalid.js:80:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    78 │ -bar ?? foo;
    79 │ ~bar ?? foo;
  > 80 │ ++bar ?? foo;
       │ ^^^^^^^^^^^^
    81 │ bar++ ?? foo;
    82 │ --bar ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    78 │ -bar ?? foo;
    79 │ ~bar ?? foo;
  > 80 │ ++bar ?? foo;
       │ ^^^^^
    81 │ bar++ ?? foo;
    82 │ --bar ?? foo;
  

```

```
invalid.js:81:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    79 │ ~bar ?? foo;
    80 │ ++bar ?? foo;
  > 81 │ bar++ ?? foo;
       │ ^^^^^^^^^^^^
    82 │ --bar ?? foo;
    83 │ bar-- ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    79 │ ~bar ?? foo;
    80 │ ++bar ?? foo;
  > 81 │ bar++ ?? foo;
       │ ^^^^^
    82 │ --bar ?? foo;
    83 │ bar-- ?? foo;
  

```

```
invalid.js:82:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    80 │ ++bar ?? foo;
    81 │ bar++ ?? foo;
  > 82 │ --bar ?? foo;
       │ ^^^^^^^^^^^^
    83 │ bar-- ?? foo;
    84 │ (x == y) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    80 │ ++bar ?? foo;
    81 │ bar++ ?? foo;
  > 82 │ --bar ?? foo;
       │ ^^^^^
    83 │ bar-- ?? foo;
    84 │ (x == y) ?? foo;
  

```

```
invalid.js:83:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    81 │ bar++ ?? foo;
    82 │ --bar ?? foo;
  > 83 │ bar-- ?? foo;
       │ ^^^^^^^^^^^^
    84 │ (x == y) ?? foo;
    85 │ (x + y) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    81 │ bar++ ?? foo;
    82 │ --bar ?? foo;
  > 83 │ bar-- ?? foo;
       │ ^^^^^
    84 │ (x == y) ?? foo;
    85 │ (x + y) ?? foo;
  

```

```
invalid.js:84:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    82 │ --bar ?? foo;
    83 │ bar-- ?? foo;
  > 84 │ (x == y) ?? foo;
       │ ^^^^^^^^^^^^^^^
    85 │ (x + y) ?? foo;
    86 │ (x / y) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    82 │ --bar ?? foo;
    83 │ bar-- ?? foo;
  > 84 │ (x == y) ?? foo;
       │ ^^^^^^^^
    85 │ (x + y) ?? foo;
    86 │ (x / y) ?? foo;
  

```

```
invalid.js:85:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    83 │ bar-- ?? foo;
    84 │ (x == y) ?? foo;
  > 85 │ (x + y) ?? foo;
       │ ^^^^^^^^^^^^^^
    86 │ (x / y) ?? foo;
    87 │ (x instanceof String) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    83 │ bar-- ?? foo;
    84 │ (x == y) ?? foo;
  > 85 │ (x + y) ?? foo;
       │ ^^^^^^^
    86 │ (x / y) ?? foo;
    87 │ (x instanceof String) ?? foo;
  

```

```
invalid.js:86:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    84 │ (x == y) ?? foo;
    85 │ (x + y) ?? foo;
  > 86 │ (x / y) ?? foo;
       │ ^^^^^^^^^^^^^^
    87 │ (x instanceof String) ?? foo;
    88 │ (x in y) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    84 │ (x == y) ?? foo;
    85 │ (x + y) ?? foo;
  > 86 │ (x / y) ?? foo;
       │ ^^^^^^^
    87 │ (x instanceof String) ?? foo;
    88 │ (x in y) ?? foo;
  

```

```
invalid.js:87:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    85 │ (x + y) ?? foo;
    86 │ (x / y) ?? foo;
  > 87 │ (x instanceof String) ?? foo;
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    88 │ (x in y) ?? foo;
    89 │ Boolean(x) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    85 │ (x + y) ?? foo;
    86 │ (x / y) ?? foo;
  > 87 │ (x instanceof String) ?? foo;
       │ ^^^^^^^^^^^^^^^^^^^^^
    88 │ (x in y) ?? foo;
    89 │ Boolean(x) ?? foo;
  

```

```
invalid.js:88:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    86 │ (x / y) ?? foo;
    87 │ (x instanceof String) ?? foo;
  > 88 │ (x in y) ?? foo;
       │ ^^^^^^^^^^^^^^^
    89 │ Boolean(x) ?? foo;
    90 │ String(x) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    86 │ (x / y) ?? foo;
    87 │ (x instanceof String) ?? foo;
  > 88 │ (x in y) ?? foo;
       │ ^^^^^^^^
    89 │ Boolean(x) ?? foo;
    90 │ String(x) ?? foo;
  

```

```
invalid.js:89:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    87 │ (x instanceof String) ?? foo;
    88 │ (x in y) ?? foo;
  > 89 │ Boolean(x) ?? foo;
       │ ^^^^^^^^^^^^^^^^^
    90 │ String(x) ?? foo;
    91 │ Number(x) ?? foo;
  
  i This operand always evaluates to the same nullishness.
  
    87 │ (x instanceof String) ?? foo;
    88 │ (x in y) ?? foo;
  > 89 │ Boolean(x) ?? foo;
       │ ^^^^^^^^^^
    90 │ String(x) ?? foo;
    91 │ Number(x) ?? foo;
  

```

```
invalid.js:90:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    88 │ (x in y) ?? foo;
    89 │ Boolean(x) ?? foo;
  > 90 │ String(x) ?? foo;
       │ ^^^^^^^^^^^^^^^^
    91 │ Number(x) ?? foo;
    92 │ 
  
  i This operand always evaluates to the same nullishness.
  
    88 │ (x in y) ?? foo;
    89 │ Boolean(x) ?? foo;
  > 90 │ String(x) ?? foo;
       │ ^^^^^^^^^
    91 │ Number(x) ?? foo;
    92 │ 
  

```

```
invalid.js:91:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    89 │ Boolean(x) ?? foo;
    90 │ String(x) ?? foo;
  > 91 │ Number(x) ?? foo;
       │ ^^^^^^^^^^^^^^^^
    92 │ 
    93 │ // Binary expression with comparison to null
  
  i This operand always evaluates to the same nullishness.
  
    89 │ Boolean(x) ?? foo;
    90 │ String(x) ?? foo;
  > 91 │ Number(x) ?? foo;
       │ ^^^^^^^^^
    92 │ 
    93 │ // Binary expression with comparison to null
  

```

```
invalid.js:94:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    93 │ // Binary expression with comparison to null
  > 94 │ ({}) != null;
       │ ^^^^^^^^^^^^
    95 │ ({}) == null;
    96 │ null == ({});
  

```

```
invalid.js:95:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    93 │ // Binary expression with comparison to null
    94 │ ({}) != null;
  > 95 │ ({}) == null;
       │ ^^^^^^^^^^^^
    96 │ null == ({});
    97 │ ({}) == undefined;
  

```

```
invalid.js:96:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    94 │ ({}) != null;
    95 │ ({}) == null;
  > 96 │ null == ({});
       │ ^^^^^^^^^^^^
    97 │ ({}) == undefined;
    98 │ undefined == ({});
  

```

```
invalid.js:97:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    95 │ ({}) == null;
    96 │ null == ({});
  > 97 │ ({}) == undefined;
       │ ^^^^^^^^^^^^^^^^^
    98 │ undefined == ({});
    99 │ 
  

```

```
invalid.js:98:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
     96 │ null == ({});
     97 │ ({}) == undefined;
   > 98 │ undefined == ({});
        │ ^^^^^^^^^^^^^^^^^
     99 │ 
    100 │ // Binary expression with loose comparison to boolean
  

```

```
invalid.js:101:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    100 │ // Binary expression with loose comparison to boolean
  > 101 │ ({}) != true;
        │ ^^^^^^^^^^^^
    102 │ ({}) == true;
    103 │ ([]) == true;
  

```

```
invalid.js:102:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    100 │ // Binary expression with loose comparison to boolean
    101 │ ({}) != true;
  > 102 │ ({}) == true;
        │ ^^^^^^^^^^^^
    103 │ ([]) == true;
    104 │ ([a, b]) == true;
  

```

```
invalid.js:103:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    101 │ ({}) != true;
    102 │ ({}) == true;
  > 103 │ ([]) == true;
        │ ^^^^^^^^^^^^
    104 │ ([a, b]) == true;
    105 │ (() => {}) == true;
  

```

```
invalid.js:104:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    102 │ ({}) == true;
    103 │ ([]) == true;
  > 104 │ ([a, b]) == true;
        │ ^^^^^^^^^^^^^^^^
    105 │ (() => {}) == true;
    106 │ (function() {}) == true;
  

```

```
invalid.js:105:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    103 │ ([]) == true;
    104 │ ([a, b]) == true;
  > 105 │ (() => {}) == true;
        │ ^^^^^^^^^^^^^^^^^^
    106 │ (function() {}) == true;
    107 │ void foo == true;
  

```

```
invalid.js:106:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    104 │ ([a, b]) == true;
    105 │ (() => {}) == true;
  > 106 │ (function() {}) == true;
        │ ^^^^^^^^^^^^^^^^^^^^^^^
    107 │ void foo == true;
    108 │ typeof foo == true;
  

```

```
invalid.js:107:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    105 │ (() => {}) == true;
    106 │ (function() {}) == true;
  > 107 │ void foo == true;
        │ ^^^^^^^^^^^^^^^^
    108 │ typeof foo == true;
    109 │ ![] == true;
  

```

```
invalid.js:108:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    106 │ (function() {}) == true;
    107 │ void foo == true;
  > 108 │ typeof foo == true;
        │ ^^^^^^^^^^^^^^^^^^
    109 │ ![] == true;
    110 │ true == class {};
  

```

```
invalid.js:109:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    107 │ void foo == true;
    108 │ typeof foo == true;
  > 109 │ ![] == true;
        │ ^^^^^^^^^^^
    110 │ true == class {};
    111 │ true == 1;
  

```

```
invalid.js:110:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    108 │ typeof foo == true;
    109 │ ![] == true;
  > 110 │ true == class {};
        │ ^^^^^^^^^^^^^^^^
    111 │ true == 1;
    112 │ undefined == true;
  

```

```
invalid.js:111:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    109 │ ![] == true;
    110 │ true == class {};
  > 111 │ true == 1;
        │ ^^^^^^^^^
    112 │ undefined == true;
    113 │ true == undefined;
  

```

```
invalid.js:112:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    110 │ true == class {};
    111 │ true == 1;
  > 112 │ undefined == true;
        │ ^^^^^^^^^^^^^^^^^
    113 │ true == undefined;
    114 │ `hello` == true;
  

```

```
invalid.js:113:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    111 │ true == 1;
    112 │ undefined == true;
  > 113 │ true == undefined;
        │ ^^^^^^^^^^^^^^^^^
    114 │ `hello` == true;
    115 │ /[a-z]/ == true;
  

```

```
invalid.js:114:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    112 │ undefined == true;
    113 │ true == undefined;
  > 114 │ `hello` == true;
        │ ^^^^^^^^^^^^^^^
    115 │ /[a-z]/ == true;
    116 │ ({}) == Boolean({});
  

```

```
invalid.js:115:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    113 │ true == undefined;
    114 │ `hello` == true;
  > 115 │ /[a-z]/ == true;
        │ ^^^^^^^^^^^^^^^
    116 │ ({}) == Boolean({});
    117 │ ({}) == Boolean();
  

```

```
invalid.js:116:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    114 │ `hello` == true;
    115 │ /[a-z]/ == true;
  > 116 │ ({}) == Boolean({});
        │ ^^^^^^^^^^^^^^^^^^^
    117 │ ({}) == Boolean();
    118 │ ({}) == Boolean(() => {}, foo);
  

```

```
invalid.js:117:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    115 │ /[a-z]/ == true;
    116 │ ({}) == Boolean({});
  > 117 │ ({}) == Boolean();
        │ ^^^^^^^^^^^^^^^^^
    118 │ ({}) == Boolean(() => {}, foo);
    119 │ 
  

```

```
invalid.js:118:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    116 │ ({}) == Boolean({});
    117 │ ({}) == Boolean();
  > 118 │ ({}) == Boolean(() => {}, foo);
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    119 │ 
    120 │ // Binary expression with strict comparison to boolean
  

```

```
invalid.js:121:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    120 │ // Binary expression with strict comparison to boolean
  > 121 │ ({}) !== true;
        │ ^^^^^^^^^^^^^
    122 │ ({}) == !({});
    123 │ ({}) === true;
  

```

```
invalid.js:122:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    120 │ // Binary expression with strict comparison to boolean
    121 │ ({}) !== true;
  > 122 │ ({}) == !({});
        │ ^^^^^^^^^^^^^
    123 │ ({}) === true;
    124 │ ([]) === true;
  

```

```
invalid.js:123:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    121 │ ({}) !== true;
    122 │ ({}) == !({});
  > 123 │ ({}) === true;
        │ ^^^^^^^^^^^^^
    124 │ ([]) === true;
    125 │ (function() {}) === true;
  

```

```
invalid.js:124:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    122 │ ({}) == !({});
    123 │ ({}) === true;
  > 124 │ ([]) === true;
        │ ^^^^^^^^^^^^^
    125 │ (function() {}) === true;
    126 │ (() => {}) === true;
  

```

```
invalid.js:125:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    123 │ ({}) === true;
    124 │ ([]) === true;
  > 125 │ (function() {}) === true;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^
    126 │ (() => {}) === true;
    127 │ !{} === true;
  

```

```
invalid.js:126:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    124 │ ([]) === true;
    125 │ (function() {}) === true;
  > 126 │ (() => {}) === true;
        │ ^^^^^^^^^^^^^^^^^^^
    127 │ !{} === true;
    128 │ typeof n === true;
  

```

```
invalid.js:127:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    125 │ (function() {}) === true;
    126 │ (() => {}) === true;
  > 127 │ !{} === true;
        │ ^^^^^^^^^^^^
    128 │ typeof n === true;
    129 │ void n === true;
  

```

```
invalid.js:128:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    126 │ (() => {}) === true;
    127 │ !{} === true;
  > 128 │ typeof n === true;
        │ ^^^^^^^^^^^^^^^^^
    129 │ void n === true;
    130 │ +n === true;
  

```

```
invalid.js:129:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    127 │ !{} === true;
    128 │ typeof n === true;
  > 129 │ void n === true;
        │ ^^^^^^^^^^^^^^^
    130 │ +n === true;
    131 │ -n === true;
  

```

```
invalid.js:130:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    128 │ typeof n === true;
    129 │ void n === true;
  > 130 │ +n === true;
        │ ^^^^^^^^^^^
    131 │ -n === true;
    132 │ ~n === true;
  

```

```
invalid.js:131:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    129 │ void n === true;
    130 │ +n === true;
  > 131 │ -n === true;
        │ ^^^^^^^^^^^
    132 │ ~n === true;
    133 │ true === true;
  

```

```
invalid.js:132:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    130 │ +n === true;
    131 │ -n === true;
  > 132 │ ~n === true;
        │ ^^^^^^^^^^^
    133 │ true === true;
    134 │ 1 === true;
  

```

```
invalid.js:133:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    131 │ -n === true;
    132 │ ~n === true;
  > 133 │ true === true;
        │ ^^^^^^^^^^^^^
    134 │ 1 === true;
    135 │ 'hello' === true;
  

```

```
invalid.js:134:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    132 │ ~n === true;
    133 │ true === true;
  > 134 │ 1 === true;
        │ ^^^^^^^^^^
    135 │ 'hello' === true;
    136 │ /[a-z]/ === true;
  

```

```
invalid.js:135:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    133 │ true === true;
    134 │ 1 === true;
  > 135 │ 'hello' === true;
        │ ^^^^^^^^^^^^^^^^
    136 │ /[a-z]/ === true;
    137 │ undefined === true;
  

```

```
invalid.js:136:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    134 │ 1 === true;
    135 │ 'hello' === true;
  > 136 │ /[a-z]/ === true;
        │ ^^^^^^^^^^^^^^^^
    137 │ undefined === true;
    138 │ (a = {}) === true;
  

```

```
invalid.js:137:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    135 │ 'hello' === true;
    136 │ /[a-z]/ === true;
  > 137 │ undefined === true;
        │ ^^^^^^^^^^^^^^^^^^
    138 │ (a = {}) === true;
    139 │ (a += 1) === true;
  

```

```
invalid.js:138:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    136 │ /[a-z]/ === true;
    137 │ undefined === true;
  > 138 │ (a = {}) === true;
        │ ^^^^^^^^^^^^^^^^^
    139 │ (a += 1) === true;
    140 │ (a -= 1) === true;
  

```

```
invalid.js:139:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    137 │ undefined === true;
    138 │ (a = {}) === true;
  > 139 │ (a += 1) === true;
        │ ^^^^^^^^^^^^^^^^^
    140 │ (a -= 1) === true;
    141 │ (a *= 1) === true;
  

```

```
invalid.js:140:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    138 │ (a = {}) === true;
    139 │ (a += 1) === true;
  > 140 │ (a -= 1) === true;
        │ ^^^^^^^^^^^^^^^^^
    141 │ (a *= 1) === true;
    142 │ (a %= 1) === true;
  

```

```
invalid.js:141:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    139 │ (a += 1) === true;
    140 │ (a -= 1) === true;
  > 141 │ (a *= 1) === true;
        │ ^^^^^^^^^^^^^^^^^
    142 │ (a %= 1) === true;
    143 │ (a ** b) === true;
  

```

```
invalid.js:142:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    140 │ (a -= 1) === true;
    141 │ (a *= 1) === true;
  > 142 │ (a %= 1) === true;
        │ ^^^^^^^^^^^^^^^^^
    143 │ (a ** b) === true;
    144 │ (a << b) === true;
  

```

```
invalid.js:143:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    141 │ (a *= 1) === true;
    142 │ (a %= 1) === true;
  > 143 │ (a ** b) === true;
        │ ^^^^^^^^^^^^^^^^^
    144 │ (a << b) === true;
    145 │ (a >> b) === true;
  

```

```
invalid.js:144:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    142 │ (a %= 1) === true;
    143 │ (a ** b) === true;
  > 144 │ (a << b) === true;
        │ ^^^^^^^^^^^^^^^^^
    145 │ (a >> b) === true;
    146 │ (a >>> b) === true;
  

```

```
invalid.js:145:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    143 │ (a ** b) === true;
    144 │ (a << b) === true;
  > 145 │ (a >> b) === true;
        │ ^^^^^^^^^^^^^^^^^
    146 │ (a >>> b) === true;
    147 │ --a === true;
  

```

```
invalid.js:146:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    144 │ (a << b) === true;
    145 │ (a >> b) === true;
  > 146 │ (a >>> b) === true;
        │ ^^^^^^^^^^^^^^^^^^
    147 │ --a === true;
    148 │ a-- === true;
  

```

```
invalid.js:147:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    145 │ (a >> b) === true;
    146 │ (a >>> b) === true;
  > 147 │ --a === true;
        │ ^^^^^^^^^^^^
    148 │ a-- === true;
    149 │ ++a === true;
  

```

```
invalid.js:148:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    146 │ (a >>> b) === true;
    147 │ --a === true;
  > 148 │ a-- === true;
        │ ^^^^^^^^^^^^
    149 │ ++a === true;
    150 │ a++ === true;
  

```

```
invalid.js:149:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    147 │ --a === true;
    148 │ a-- === true;
  > 149 │ ++a === true;
        │ ^^^^^^^^^^^^
    150 │ a++ === true;
    151 │ (a + b) === true;
  

```

```
invalid.js:150:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    148 │ a-- === true;
    149 │ ++a === true;
  > 150 │ a++ === true;
        │ ^^^^^^^^^^^^
    151 │ (a + b) === true;
    152 │ (a - b) === true;
  

```

```
invalid.js:151:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    149 │ ++a === true;
    150 │ a++ === true;
  > 151 │ (a + b) === true;
        │ ^^^^^^^^^^^^^^^^
    152 │ (a - b) === true;
    153 │ (a * b) === true;
  

```

```
invalid.js:152:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    150 │ a++ === true;
    151 │ (a + b) === true;
  > 152 │ (a - b) === true;
        │ ^^^^^^^^^^^^^^^^
    153 │ (a * b) === true;
    154 │ (a / b) === true;
  

```

```
invalid.js:153:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    151 │ (a + b) === true;
    152 │ (a - b) === true;
  > 153 │ (a * b) === true;
        │ ^^^^^^^^^^^^^^^^
    154 │ (a / b) === true;
    155 │ (a % b) === true;
  

```

```
invalid.js:154:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    152 │ (a - b) === true;
    153 │ (a * b) === true;
  > 154 │ (a / b) === true;
        │ ^^^^^^^^^^^^^^^^
    155 │ (a % b) === true;
    156 │ (a | b) === true;
  

```

```
invalid.js:155:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    153 │ (a * b) === true;
    154 │ (a / b) === true;
  > 155 │ (a % b) === true;
        │ ^^^^^^^^^^^^^^^^
    156 │ (a | b) === true;
    157 │ (a ^ b) === true;
  

```

```
invalid.js:156:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    154 │ (a / b) === true;
    155 │ (a % b) === true;
  > 156 │ (a | b) === true;
        │ ^^^^^^^^^^^^^^^^
    157 │ (a ^ b) === true;
    158 │ (a & b) === true;
  

```

```
invalid.js:157:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    155 │ (a % b) === true;
    156 │ (a | b) === true;
  > 157 │ (a ^ b) === true;
        │ ^^^^^^^^^^^^^^^^
    158 │ (a & b) === true;
    159 │ Boolean(0) === Boolean(1);
  

```

```
invalid.js:158:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    156 │ (a | b) === true;
    157 │ (a ^ b) === true;
  > 158 │ (a & b) === true;
        │ ^^^^^^^^^^^^^^^^
    159 │ Boolean(0) === Boolean(1);
    160 │ true === String(x);
  

```

```
invalid.js:159:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    157 │ (a ^ b) === true;
    158 │ (a & b) === true;
  > 159 │ Boolean(0) === Boolean(1);
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^
    160 │ true === String(x);
    161 │ true === Number(x);
  

```

```
invalid.js:160:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    158 │ (a & b) === true;
    159 │ Boolean(0) === Boolean(1);
  > 160 │ true === String(x);
        │ ^^^^^^^^^^^^^^^^^^
    161 │ true === Number(x);
    162 │ Boolean(0) == !({});
  

```

```
invalid.js:161:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    159 │ Boolean(0) === Boolean(1);
    160 │ true === String(x);
  > 161 │ true === Number(x);
        │ ^^^^^^^^^^^^^^^^^^
    162 │ Boolean(0) == !({});
    163 │ 
  

```

```
invalid.js:162:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    160 │ true === String(x);
    161 │ true === Number(x);
  > 162 │ Boolean(0) == !({});
        │ ^^^^^^^^^^^^^^^^^^^
    163 │ 
    164 │ // Binary expression with strict comparison to null
  

```

```
invalid.js:165:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    164 │ // Binary expression with strict comparison to null
  > 165 │ ({}) !== null;
        │ ^^^^^^^^^^^^^
    166 │ ({}) === null;
    167 │ ([]) === null;
  

```

```
invalid.js:166:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    164 │ // Binary expression with strict comparison to null
    165 │ ({}) !== null;
  > 166 │ ({}) === null;
        │ ^^^^^^^^^^^^^
    167 │ ([]) === null;
    168 │ (() => {}) === null;
  

```

```
invalid.js:167:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    165 │ ({}) !== null;
    166 │ ({}) === null;
  > 167 │ ([]) === null;
        │ ^^^^^^^^^^^^^
    168 │ (() => {}) === null;
    169 │ (function() {}) === null;
  

```

```
invalid.js:168:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    166 │ ({}) === null;
    167 │ ([]) === null;
  > 168 │ (() => {}) === null;
        │ ^^^^^^^^^^^^^^^^^^^
    169 │ (function() {}) === null;
    170 │ (class {}) === null;
  

```

```
invalid.js:169:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    167 │ ([]) === null;
    168 │ (() => {}) === null;
  > 169 │ (function() {}) === null;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^
    170 │ (class {}) === null;
    171 │ new Foo() === null;
  

```

```
invalid.js:170:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    168 │ (() => {}) === null;
    169 │ (function() {}) === null;
  > 170 │ (class {}) === null;
        │ ^^^^^^^^^^^^^^^^^^^
    171 │ new Foo() === null;
    172 │ `` === null;
  

```

```
invalid.js:171:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    169 │ (function() {}) === null;
    170 │ (class {}) === null;
  > 171 │ new Foo() === null;
        │ ^^^^^^^^^^^^^^^^^^
    172 │ `` === null;
    173 │ 1 === null;
  

```

```
invalid.js:172:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    170 │ (class {}) === null;
    171 │ new Foo() === null;
  > 172 │ `` === null;
        │ ^^^^^^^^^^^
    173 │ 1 === null;
    174 │ 'hello' === null;
  

```

```
invalid.js:173:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    171 │ new Foo() === null;
    172 │ `` === null;
  > 173 │ 1 === null;
        │ ^^^^^^^^^^
    174 │ 'hello' === null;
    175 │ /[a-z]/ === null;
  

```

```
invalid.js:174:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    172 │ `` === null;
    173 │ 1 === null;
  > 174 │ 'hello' === null;
        │ ^^^^^^^^^^^^^^^^
    175 │ /[a-z]/ === null;
    176 │ true === null;
  

```

```
invalid.js:175:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    173 │ 1 === null;
    174 │ 'hello' === null;
  > 175 │ /[a-z]/ === null;
        │ ^^^^^^^^^^^^^^^^
    176 │ true === null;
    177 │ null === null;
  

```

```
invalid.js:176:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    174 │ 'hello' === null;
    175 │ /[a-z]/ === null;
  > 176 │ true === null;
        │ ^^^^^^^^^^^^^
    177 │ null === null;
    178 │ a++ === null;
  

```

```
invalid.js:177:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    175 │ /[a-z]/ === null;
    176 │ true === null;
  > 177 │ null === null;
        │ ^^^^^^^^^^^^^
    178 │ a++ === null;
    179 │ ++a === null;
  

```

```
invalid.js:178:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    176 │ true === null;
    177 │ null === null;
  > 178 │ a++ === null;
        │ ^^^^^^^^^^^^
    179 │ ++a === null;
    180 │ --a === null;
  

```

```
invalid.js:179:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    177 │ null === null;
    178 │ a++ === null;
  > 179 │ ++a === null;
        │ ^^^^^^^^^^^^
    180 │ --a === null;
    181 │ a-- === null;
  

```

```
invalid.js:180:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    178 │ a++ === null;
    179 │ ++a === null;
  > 180 │ --a === null;
        │ ^^^^^^^^^^^^
    181 │ a-- === null;
    182 │ !a === null;
  

```

```
invalid.js:181:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    179 │ ++a === null;
    180 │ --a === null;
  > 181 │ a-- === null;
        │ ^^^^^^^^^^^^
    182 │ !a === null;
    183 │ typeof a === null;
  

```

```
invalid.js:182:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    180 │ --a === null;
    181 │ a-- === null;
  > 182 │ !a === null;
        │ ^^^^^^^^^^^
    183 │ typeof a === null;
    184 │ delete a.b === null;
  

```

```
invalid.js:183:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    181 │ a-- === null;
    182 │ !a === null;
  > 183 │ typeof a === null;
        │ ^^^^^^^^^^^^^^^^^
    184 │ delete a.b === null;
    185 │ void a === null;
  

```

```
invalid.js:184:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    182 │ !a === null;
    183 │ typeof a === null;
  > 184 │ delete a.b === null;
        │ ^^^^^^^^^^^^^^^^^^^
    185 │ void a === null;
    186 │ undefined === null;
  

```

```
invalid.js:185:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    183 │ typeof a === null;
    184 │ delete a.b === null;
  > 185 │ void a === null;
        │ ^^^^^^^^^^^^^^^
    186 │ undefined === null;
    187 │ (x = {}) === null;
  

```

```
invalid.js:186:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    184 │ delete a.b === null;
    185 │ void a === null;
  > 186 │ undefined === null;
        │ ^^^^^^^^^^^^^^^^^^
    187 │ (x = {}) === null;
    188 │ (x += y) === null;
  

```

```
invalid.js:187:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    185 │ void a === null;
    186 │ undefined === null;
  > 187 │ (x = {}) === null;
        │ ^^^^^^^^^^^^^^^^^
    188 │ (x += y) === null;
    189 │ (x -= y) === null;
  

```

```
invalid.js:188:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    186 │ undefined === null;
    187 │ (x = {}) === null;
  > 188 │ (x += y) === null;
        │ ^^^^^^^^^^^^^^^^^
    189 │ (x -= y) === null;
    190 │ (a, b, {}) === null;
  

```

```
invalid.js:189:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    187 │ (x = {}) === null;
    188 │ (x += y) === null;
  > 189 │ (x -= y) === null;
        │ ^^^^^^^^^^^^^^^^^
    190 │ (a, b, {}) === null;
    191 │ 
  

```

```
invalid.js:190:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    188 │ (x += y) === null;
    189 │ (x -= y) === null;
  > 190 │ (a, b, {}) === null;
        │ ^^^^^^^^^^^^^^^^^^^
    191 │ 
    192 │ // Binary expression with strict comparison to undefined
  

```

```
invalid.js:193:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    192 │ // Binary expression with strict comparison to undefined
  > 193 │ ({}) !== undefined;
        │ ^^^^^^^^^^^^^^^^^^
    194 │ ({}) === undefined;
    195 │ ([]) === undefined;
  

```

```
invalid.js:194:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    192 │ // Binary expression with strict comparison to undefined
    193 │ ({}) !== undefined;
  > 194 │ ({}) === undefined;
        │ ^^^^^^^^^^^^^^^^^^
    195 │ ([]) === undefined;
    196 │ (() => {}) === undefined;
  

```

```
invalid.js:195:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    193 │ ({}) !== undefined;
    194 │ ({}) === undefined;
  > 195 │ ([]) === undefined;
        │ ^^^^^^^^^^^^^^^^^^
    196 │ (() => {}) === undefined;
    197 │ (function() {}) === undefined;
  

```

```
invalid.js:196:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    194 │ ({}) === undefined;
    195 │ ([]) === undefined;
  > 196 │ (() => {}) === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^
    197 │ (function() {}) === undefined;
    198 │ (class {}) === undefined;
  

```

```
invalid.js:197:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    195 │ ([]) === undefined;
    196 │ (() => {}) === undefined;
  > 197 │ (function() {}) === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    198 │ (class {}) === undefined;
    199 │ new Foo() === undefined;
  

```

```
invalid.js:198:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    196 │ (() => {}) === undefined;
    197 │ (function() {}) === undefined;
  > 198 │ (class {}) === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^
    199 │ new Foo() === undefined;
    200 │ `` === undefined;
  

```

```
invalid.js:199:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    197 │ (function() {}) === undefined;
    198 │ (class {}) === undefined;
  > 199 │ new Foo() === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^^^^
    200 │ `` === undefined;
    201 │ 1 === undefined;
  

```

```
invalid.js:200:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    198 │ (class {}) === undefined;
    199 │ new Foo() === undefined;
  > 200 │ `` === undefined;
        │ ^^^^^^^^^^^^^^^^
    201 │ 1 === undefined;
    202 │ 'hello' === undefined;
  

```

```
invalid.js:201:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    199 │ new Foo() === undefined;
    200 │ `` === undefined;
  > 201 │ 1 === undefined;
        │ ^^^^^^^^^^^^^^^
    202 │ 'hello' === undefined;
    203 │ /[a-z]/ === undefined;
  

```

```
invalid.js:202:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    200 │ `` === undefined;
    201 │ 1 === undefined;
  > 202 │ 'hello' === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^^
    203 │ /[a-z]/ === undefined;
    204 │ true === undefined;
  

```

```
invalid.js:203:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    201 │ 1 === undefined;
    202 │ 'hello' === undefined;
  > 203 │ /[a-z]/ === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^^
    204 │ true === undefined;
    205 │ null === undefined;
  

```

```
invalid.js:204:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    202 │ 'hello' === undefined;
    203 │ /[a-z]/ === undefined;
  > 204 │ true === undefined;
        │ ^^^^^^^^^^^^^^^^^^
    205 │ null === undefined;
    206 │ a++ === undefined;
  

```

```
invalid.js:205:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    203 │ /[a-z]/ === undefined;
    204 │ true === undefined;
  > 205 │ null === undefined;
        │ ^^^^^^^^^^^^^^^^^^
    206 │ a++ === undefined;
    207 │ ++a === undefined;
  

```

```
invalid.js:206:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    204 │ true === undefined;
    205 │ null === undefined;
  > 206 │ a++ === undefined;
        │ ^^^^^^^^^^^^^^^^^
    207 │ ++a === undefined;
    208 │ --a === undefined;
  

```

```
invalid.js:207:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    205 │ null === undefined;
    206 │ a++ === undefined;
  > 207 │ ++a === undefined;
        │ ^^^^^^^^^^^^^^^^^
    208 │ --a === undefined;
    209 │ a-- === undefined;
  

```

```
invalid.js:208:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    206 │ a++ === undefined;
    207 │ ++a === undefined;
  > 208 │ --a === undefined;
        │ ^^^^^^^^^^^^^^^^^
    209 │ a-- === undefined;
    210 │ !a === undefined;
  

```

```
invalid.js:209:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    207 │ ++a === undefined;
    208 │ --a === undefined;
  > 209 │ a-- === undefined;
        │ ^^^^^^^^^^^^^^^^^
    210 │ !a === undefined;
    211 │ typeof a === undefined;
  

```

```
invalid.js:210:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    208 │ --a === undefined;
    209 │ a-- === undefined;
  > 210 │ !a === undefined;
        │ ^^^^^^^^^^^^^^^^
    211 │ typeof a === undefined;
    212 │ delete a.b === undefined;
  

```

```
invalid.js:211:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    209 │ a-- === undefined;
    210 │ !a === undefined;
  > 211 │ typeof a === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^^^
    212 │ delete a.b === undefined;
    213 │ void a === undefined;
  

```

```
invalid.js:212:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    210 │ !a === undefined;
    211 │ typeof a === undefined;
  > 212 │ delete a.b === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^
    213 │ void a === undefined;
    214 │ undefined === undefined;
  

```

```
invalid.js:213:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    211 │ typeof a === undefined;
    212 │ delete a.b === undefined;
  > 213 │ void a === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^
    214 │ undefined === undefined;
    215 │ (x = {}) === undefined;
  

```

```
invalid.js:214:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    212 │ delete a.b === undefined;
    213 │ void a === undefined;
  > 214 │ undefined === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^^^^
    215 │ (x = {}) === undefined;
    216 │ (x += y) === undefined;
  

```

```
invalid.js:215:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    213 │ void a === undefined;
    214 │ undefined === undefined;
  > 215 │ (x = {}) === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^^^
    216 │ (x += y) === undefined;
    217 │ (x -= y) === undefined;
  

```

```
invalid.js:216:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    214 │ undefined === undefined;
    215 │ (x = {}) === undefined;
  > 216 │ (x += y) === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^^^
    217 │ (x -= y) === undefined;
    218 │ (a, b, {}) === undefined;
  

```

```
invalid.js:217:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    215 │ (x = {}) === undefined;
    216 │ (x += y) === undefined;
  > 217 │ (x -= y) === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^^^
    218 │ (a, b, {}) === undefined;
    219 │ 
  

```

```
invalid.js:218:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This binary expression leads to a constant result.
  
    216 │ (x += y) === undefined;
    217 │ (x -= y) === undefined;
  > 218 │ (a, b, {}) === undefined;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^
    219 │ 
    220 │ /*
  

```

```
invalid.js:224:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison of two newly constructed objects.
  
    222 │  * never be equal, even with == equality.
    223 │  */
  > 224 │ [a] == [a];
        │ ^^^^^^^^^^
    225 │ [a] != [a];
    226 │ ({}) == [];
  

```

```
invalid.js:225:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison of two newly constructed objects.
  
    223 │  */
    224 │ [a] == [a];
  > 225 │ [a] != [a];
        │ ^^^^^^^^^^
    226 │ ({}) == [];
    227 │ 
  

```

```
invalid.js:226:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison of two newly constructed objects.
  
    224 │ [a] == [a];
    225 │ [a] != [a];
  > 226 │ ({}) == [];
        │ ^^^^^^^^^^
    227 │ 
    228 │ // Comparing to always new objects
  

```

```
invalid.js:229:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison to newly constructed object.
  
    228 │ // Comparing to always new objects
  > 229 │ x === {};
        │ ^^^^^^^^
    230 │ x !== {};
    231 │ x === [];
  
  i This expression always constructs a new object.
  
    228 │ // Comparing to always new objects
  > 229 │ x === {};
        │       ^^
    230 │ x !== {};
    231 │ x === [];
  

```

```
invalid.js:230:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison to newly constructed object.
  
    228 │ // Comparing to always new objects
    229 │ x === {};
  > 230 │ x !== {};
        │ ^^^^^^^^
    231 │ x === [];
    232 │ x === (() => {});
  
  i This expression always constructs a new object.
  
    228 │ // Comparing to always new objects
    229 │ x === {};
  > 230 │ x !== {};
        │       ^^
    231 │ x === [];
    232 │ x === (() => {});
  

```

```
invalid.js:231:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison to newly constructed object.
  
    229 │ x === {};
    230 │ x !== {};
  > 231 │ x === [];
        │ ^^^^^^^^
    232 │ x === (() => {});
    233 │ x === (function() {});
  
  i This expression always constructs a new object.
  
    229 │ x === {};
    230 │ x !== {};
  > 231 │ x === [];
        │       ^^
    232 │ x === (() => {});
    233 │ x === (function() {});
  

```

```
invalid.js:232:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison to newly constructed object.
  
    230 │ x !== {};
    231 │ x === [];
  > 232 │ x === (() => {});
        │ ^^^^^^^^^^^^^^^^
    233 │ x === (function() {});
    234 │ x === (class {});
  
  i This expression always constructs a new object.
  
    230 │ x !== {};
    231 │ x === [];
  > 232 │ x === (() => {});
        │       ^^^^^^^^^^
    233 │ x === (function() {});
    234 │ x === (class {});
  

```

```
invalid.js:233:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison to newly constructed object.
  
    231 │ x === [];
    232 │ x === (() => {});
  > 233 │ x === (function() {});
        │ ^^^^^^^^^^^^^^^^^^^^^
    234 │ x === (class {});
    235 │ x === new Boolean();
  
  i This expression always constructs a new object.
  
    231 │ x === [];
    232 │ x === (() => {});
  > 233 │ x === (function() {});
        │       ^^^^^^^^^^^^^^^
    234 │ x === (class {});
    235 │ x === new Boolean();
  

```

```
invalid.js:234:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison to newly constructed object.
  
    232 │ x === (() => {});
    233 │ x === (function() {});
  > 234 │ x === (class {});
        │ ^^^^^^^^^^^^^^^^
    235 │ x === new Boolean();
    236 │ x === new Promise();
  
  i This expression always constructs a new object.
  
    232 │ x === (() => {});
    233 │ x === (function() {});
  > 234 │ x === (class {});
        │       ^^^^^^^^^^
    235 │ x === new Boolean();
    236 │ x === new Promise();
  

```

```
invalid.js:235:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison to newly constructed object.
  
    233 │ x === (function() {});
    234 │ x === (class {});
  > 235 │ x === new Boolean();
        │ ^^^^^^^^^^^^^^^^^^^
    236 │ x === new Promise();
    237 │ x === new WeakSet();
  
  i This expression always constructs a new object.
  
    233 │ x === (function() {});
    234 │ x === (class {});
  > 235 │ x === new Boolean();
        │       ^^^^^^^^^^^^^
    236 │ x === new Promise();
    237 │ x === new WeakSet();
  

```

```
invalid.js:236:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison to newly constructed object.
  
    234 │ x === (class {});
    235 │ x === new Boolean();
  > 236 │ x === new Promise();
        │ ^^^^^^^^^^^^^^^^^^^
    237 │ x === new WeakSet();
    238 │ x === (foo, {});
  
  i This expression always constructs a new object.
  
    234 │ x === (class {});
    235 │ x === new Boolean();
  > 236 │ x === new Promise();
        │       ^^^^^^^^^^^^^
    237 │ x === new WeakSet();
    238 │ x === (foo, {});
  

```

```
invalid.js:237:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison to newly constructed object.
  
    235 │ x === new Boolean();
    236 │ x === new Promise();
  > 237 │ x === new WeakSet();
        │ ^^^^^^^^^^^^^^^^^^^
    238 │ x === (foo, {});
    239 │ x === (y = {});
  
  i This expression always constructs a new object.
  
    235 │ x === new Boolean();
    236 │ x === new Promise();
  > 237 │ x === new WeakSet();
        │       ^^^^^^^^^^^^^
    238 │ x === (foo, {});
    239 │ x === (y = {});
  

```

```
invalid.js:240:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison to newly constructed object.
  
    238 │ x === (foo, {});
    239 │ x === (y = {});
  > 240 │ x === (y ? {} : []);
        │ ^^^^^^^^^^^^^^^^^^^
    241 │ x === /[a-z]/;
    242 │ 
  
  i This expression always constructs a new object.
  
    238 │ x === (foo, {});
    239 │ x === (y = {});
  > 240 │ x === (y ? {} : []);
        │       ^^^^^^^^^^^^^
    241 │ x === /[a-z]/;
    242 │ 
  

```

```
invalid.js:241:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Unexpected comparison to newly constructed object.
  
    239 │ x === (y = {});
    240 │ x === (y ? {} : []);
  > 241 │ x === /[a-z]/;
        │ ^^^^^^^^^^^^^
    242 │ 
    243 │ // It's not obvious what this does, but it compares the old value of `x` to the new object.
  
  i This expression always constructs a new object.
  
    239 │ x === (y = {});
    240 │ x === (y ? {} : []);
  > 241 │ x === /[a-z]/;
        │       ^^^^^^^
    242 │ 
    243 │ // It's not obvious what this does, but it compares the old value of `x` to the new object.
  

```

```
invalid.js:246:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    244 │ x === (x = {});
    245 │ 
  > 246 │ window.abc && false && anything;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    247 │ window.abc || true || anything;
    248 │ window.abc ?? 'non-nullish' ?? anything;
  
  i This operand always evaluates to the same truthiness.
  
    244 │ x === (x = {});
    245 │ 
  > 246 │ window.abc && false && anything;
        │ ^^^^^^^^^^^^^^^^^^^
    247 │ window.abc || true || anything;
    248 │ window.abc ?? 'non-nullish' ?? anything;
  

```

```
invalid.js:247:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    246 │ window.abc && false && anything;
  > 247 │ window.abc || true || anything;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    248 │ window.abc ?? 'non-nullish' ?? anything;
    249 │ 
  
  i This operand always evaluates to the same truthiness.
  
    246 │ window.abc && false && anything;
  > 247 │ window.abc || true || anything;
        │ ^^^^^^^^^^^^^^^^^^
    248 │ window.abc ?? 'non-nullish' ?? anything;
    249 │ 
  

```

```
invalid.js:248:1 lint/nursery/noConstantBinaryExpression ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i This logical expression can be simplified.
  
    246 │ window.abc && false && anything;
    247 │ window.abc || true || anything;
  > 248 │ window.abc ?? 'non-nullish' ?? anything;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    249 │ 
  
  i This operand always evaluates to the same nullishness.
  
    246 │ window.abc && false && anything;
    247 │ window.abc || true || anything;
  > 248 │ window.abc ?? 'non-nullish' ?? anything;
        │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    249 │ 
  

```
