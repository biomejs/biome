//! Generated file, do not edit by hand, see `xtask/codegen`

use biome_analyze::{FixKind, RuleMetadata};

pub(super) fn get_rule_metadata(s: &str) -> Option<RuleMetadata> {
    match s { "noAccessKey" => Some (RuleMetadata {
 name : "noAccessKey" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforce that the `accessKey` attribute is not used on any HTML element.\n\n The `accessKey` assigns a keyboard shortcut to the current element. However, the `accessKey` value\n can conflict with keyboard commands used by screen readers and keyboard-only users, which leads to\n inconsistent keyboard actions across applications. To avoid accessibility complications,\n this rule suggests users remove the `accessKey` attribute on elements.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <input type=\"submit\" accessKey=\"s\" value=\"Submit\" />\n ```\n\n ```jsx,expect_diagnostic\n <a href=\"https://webaim.org/\" accessKey=\"w\">WebAIM.org</a>\n ```\n\n ```jsx,expect_diagnostic\n <button accessKey=\"n\">Next</button>\n ```\n\n ## Resources\n\n - [WebAIM: Keyboard Accessibility - Accesskey](https://webaim.org/techniques/keyboard/accesskey#spec)\n - [MDN `accesskey` documentation](https://developer.mozilla.org/docs/Web/HTML/Global_attributes/accesskey)\n\n" , }) , "noAccumulatingSpread" => Some (RuleMetadata {
 name : "noAccumulatingSpread" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow the use of spread (`...`) syntax on accumulators.\n\n Spread syntax allows an iterable to be expanded into its individual elements.\n\n Spread syntax should be avoided on accumulators (like those in `.reduce`)\n because it causes a time complexity of `O(n^2)` instead of `O(n)`.\n\n Source: https://prateeksurana.me/blog/why-using-object-spread-with-reduce-bad-idea/\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n var a = ['a', 'b', 'c'];\n a.reduce((acc, val) => [...acc, val], []);\n ```\n\n ```js,expect_diagnostic\n var a = ['a', 'b', 'c'];\n a.reduce((acc, val) => {return [...acc, val];}, []);\n ```\n\n ```js,expect_diagnostic\n var a = ['a', 'b', 'c'];\n a.reduce((acc, val) => ({...acc, [val]: val}), {});\n ```\n\n ## Valid\n\n ```js\n var a = ['a', 'b', 'c'];\n a.reduce((acc, val) => {acc.push(val); return acc}, []);\n ```\n\n" , }) , "noApproximativeNumericConstant" => Some (RuleMetadata {
 name : "noApproximativeNumericConstant" , version : "1.3.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Usually, the definition in the standard library is more precise than what people come up with or the used constant exceeds the maximum precision of the number type.\n\n Source: https://rust-lang.github.io/rust-clippy/master/#approx_constant\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n let x = 3.141;\n ```\n ```js,expect_diagnostic\n let x = 2.302;\n ```\n\n ## Valid\n\n ```js\n let x = Math.PI;\n ```\n ```js\n let x = Math.LN10;\n ```\n" , }) , "noArguments" => Some (RuleMetadata {
 name : "noArguments" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow the use of ```arguments```\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n function f() {\n    console.log(arguments);\n }\n ```\n\n ### Valid\n\n ```cjs\n function f() {\n     let arguments = 1;\n     console.log(arguments);\n }\n ```\n" , }) , "noAriaHiddenOnFocusable" => Some (RuleMetadata {
 name : "noAriaHiddenOnFocusable" , version : "1.4.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforce that aria-hidden=\"true\" is not set on focusable elements.\n\n `aria-hidden=\"true\"` can be used to hide purely decorative content from screen reader users.\n A focusable element with `aria-hidden=\"true\"` can be reached by keyboard.\n This can lead to confusion or unexpected behavior for screen reader users.\n\n Source: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/no-aria-hidden-on-focusable.md\n\n ## Example\n\n ### Invalid\n\n ```js,expect_diagnostic\n <div aria-hidden=\"true\" tabIndex=\"0\" />\n ```\n\n ```js, expect_diagnostic\n <a href=\"/\" aria-hidden=\"true\" />\n ```\n\n ## Valid\n\n ```js\n <button aria-hidden=\"true\" tabIndex=\"-1\" />\n ```\n\n ```js\n <div aria-hidden=\"true\"><a href=\"#\"></a></div>\n ```\n\n ## Resources\n\n - [aria-hidden elements do not contain focusable elements](https://dequeuniversity.com/rules/axe/html/4.4/aria-hidden-focus)\n - [Element with aria-hidden has no content in sequential focus navigation](https://www.w3.org/WAI/standards-guidelines/act/rules/6cfa84/proposed/)\n - [MDN aria-hidden](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden)\n\n" , }) , "noAriaUnsupportedElements" => Some (RuleMetadata {
 name : "noAriaUnsupportedElements" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.\n\n Source: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/aria-unsupported-elements.md\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <meta charset=\"UTF-8\" role=\"meta\" />\n ```\n\n ```jsx,expect_diagnostic\n <html aria-required=\"true\" />\n ```\n\n ## Valid\n\n ```jsx\n <meta charset=\"UTF-8\" />\n ```\n\n ```jsx\n <html></html>\n ```\n\n\n" , }) , "noArrayIndexKey" => Some (RuleMetadata {
 name : "noArrayIndexKey" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Discourage the usage of Array index in keys.\n\n > We don’t recommend using indexes for keys if the order of items may change.\n This can negatively impact performance and may cause issues with component state.\n Check out Robin Pokorny’s article for an\n [in-depth explanation on the negative impacts of using an index as a key](https://robinpokorny.com/blog/index-as-a-key-is-an-anti-pattern/).\n If you choose not to assign an explicit key to list items then React will default to using indexes as keys.\n\n Source [React documentation](https://reactjs.org/docs/lists-and-keys.html#keys)\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n something.forEach((Element, index) => {\n     <Component key={index} >foo</Component>\n });\n ```\n\n ```jsx,expect_diagnostic\n React.Children.map(this.props.children, (child, index) => (\n     React.cloneElement(child, { key: index })\n ))\n ```\n" , }) , "noAssignInExpressions" => Some (RuleMetadata {
 name : "noAssignInExpressions" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow assignments in expressions.\n\n In expressions, it is common to mistype a comparison operator (such as `==`) as an assignment operator (such as `=`).\n Moreover, the use of assignments in expressions is confusing.\n Indeed, expressions are often considered as side-effect free.\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n let a, b;\n a = (b = 1) + 1;\n ```\n\n ```ts,expect_diagnostic\n let a;\n if (a = 1) {\n }\n ```\n\n ```ts,expect_diagnostic\n function f(a) {\n     return a = 1;\n }\n ```\n\n ### Valid\n\n ```ts\n let a;\n a = 1;\n ```\n" , }) , "noAsyncPromiseExecutor" => Some (RuleMetadata {
 name : "noAsyncPromiseExecutor" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallows using an async function as a Promise executor.\n\n The executor function can also be an async function. However, this is usually a mistake, for a few reasons:\n 1. If an async executor function throws an error, the error will be lost and won't cause the newly-constructed `Promise` to reject. This could make it difficult to debug and handle some errors.\n 2. If a Promise executor function is using `await`, this is usually a sign that it is not actually necessary to use the `new Promise` constructor, or the scope of the `new Promise` constructor can be reduced.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n new Promise(async function foo(resolve, reject) {})\n ```\n\n ```js,expect_diagnostic\n   new Promise(async (resolve, reject) => {})\n ```\n\n ```js,expect_diagnostic\n   new Promise(((((async () => {})))))\n ```\n\n ### Valid\n\n ```js\n   new Promise((resolve, reject) => {})\n   new Promise((resolve, reject) => {}, async function unrelated() {})\n   new Foo(async (resolve, reject) => {})\n   new Foo((( (resolve, reject) => {} )))\n ```\n" , }) , "noAutofocus" => Some (RuleMetadata {
 name : "noAutofocus" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforce that autoFocus prop is not used on elements.\n\n Autofocusing elements can cause usability issues for sighted and non-sighted users, alike.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <input autoFocus />\n ```\n\n ```jsx,expect_diagnostic\n <input autoFocus=\"true\" />\n ```\n\n ```jsx,expect_diagnostic\n <input autoFocus={\"false\"} />\n ```\n\n ```jsx,expect_diagnostic\n <input autoFocus={undefined} />\n ```\n\n ### Valid\n\n ```jsx\n <input />\n```\n\n ```jsx\n <div />\n```\n\n ```jsx\n <button />\n```\n\n ```jsx\n // `autoFocus` prop in user created component is valid\n <MyComponent autoFocus={true} />\n```\n\n ## Resources\n\n - [WHATWG HTML Standard, The autofocus attribute](https://html.spec.whatwg.org/multipage/interaction.html#attr-fe-autofocus)\n - [The accessibility of HTML 5 autofocus](https://brucelawson.co.uk/2009/the-accessibility-of-html-5-autofocus/)\n\n" , }) , "noBannedTypes" => Some (RuleMetadata {
 name : "noBannedTypes" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Disallow primitive type aliases and misleading types.\n\n - Enforce consistent names for primitive types\n\n   Primitive types have aliases.\n   For example, `Number` is an alias of `number`.\n   The rule recommends the lowercase primitive type names.\n\n - Disallow the `Function` type\n\n   The `Function` type is loosely typed and is thus considered dangerous or harmful.\n   `Function` is equivalent to the type `(...rest: any[]) => any` that uses the unsafe `any` type.\n\n - Disallow the misleading non-nullable type `{}`\n\n   In TypeScript, the type `{}` doesn't represent an empty object.\n   It represents any value except `null` and `undefined`.\n   The following TypeScript example is perfectly valid:\n\n   ```ts,expect_diagnostic\n   const n: {} = 0\n   ```\n\n   To represent an empty object, you should use `{ [k: string]: never }` or `Record<string, never>`.\n\n   To avoid any confusion, the rule forbids the use of the type `{}`, except in two situations:\n\n   1. In type constraints to restrict a generic type to non-nullable types:\n\n   ```ts\n   function f<T extends {}>(x: T) {\n       assert(x != null);\n   }\n   ```\n\n   2. In a type intersection to narrow a type to its non-nullable equivalent type:\n\n   ```ts\n   type NonNullableMyType = MyType & {};\n   ```\n\n   In this last case, you can also use the `NonNullable` utility type:\n\n   ```ts\n   type NonNullableMyType = NonNullable<MyType>;\n   ```\n\n Source: https://typescript-eslint.io/rules/ban-types\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n let foo: String = \"bar\";\n ```\n\n ```ts,expect_diagnostic\n let bool = true as Boolean;\n ```\n\n ```ts,expect_diagnostic\n let invalidTuple: [string, Boolean] = [\"foo\", false];\n ```\n\n ### Valid\n\n ```ts\n let foo: string = \"bar\";\n ```\n\n ```ts\n let tuple: [boolean, string] = [false, \"foo\"];\n ```\n\n" , }) , "noBlankTarget" => Some (RuleMetadata {
 name : "noBlankTarget" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Disallow `target=\"_blank\"` attribute without `rel=\"noreferrer\"`\n\n When creating anchor `a` element, there are times when its link has to be opened in a new browser tab\n via `target=\"_blank\"` attribute. This attribute has to paired with `rel=\"noreferrer\"` or you're incur\n in a security issue.\n\n Refer to [the noreferrer documentation](https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer)\n and the [the noopener documentation](https://html.spec.whatwg.org/multipage/links.html#link-type-noopener)\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <a href='http://external.link' target='_blank'>child</a>\n ```\n\n ```jsx,expect_diagnostic\n <a href='http://external.link' target='_blank' rel=\"noopener\">child</a>\n ```\n\n ```jsx,expect_diagnostic\n <a {...props} href='http://external.link' target='_blank' rel=\"noopener\">child</a>\n ```\n\n ### Valid\n\n ```jsx\n <a href='http://external.link' rel='noreferrer' target='_blank'>child</a>\n ```\n\n ```jsx\n <a href='http://external.link' target='_blank' rel=\"noopener\" {...props}>child</a>\n ```\n" , }) , "noCatchAssign" => Some (RuleMetadata {
 name : "noCatchAssign" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow reassigning exceptions in catch clauses.\n\n Assignment to a `catch` parameter can be misleading and confusing.\n It is often unintended and indicative of a programmer error.\n\n Source: https://eslint.org/docs/latest/rules/no-ex-assign\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n try {\n\n } catch (e) {\n   e;\n   e = 10;\n }\n ```\n\n ### Valid\n\n ```js\n try {\n\n } catch (e) {\n   let e = 10;\n   e = 100;\n }\n ```\n" , }) , "noChildrenProp" => Some (RuleMetadata {
 name : "noChildrenProp" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Prevent passing of **children** as props.\n\n When using JSX, the children should be nested between the opening and closing tags.\n When not using JSX, the children should be passed as additional arguments to `React.createElement`.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n <FirstComponent children={'foo'} />\n ```\n\n ```js,expect_diagnostic\n React.createElement('div', { children: 'foo' });\n ```\n" , }) , "noClassAssign" => Some (RuleMetadata {
 name : "noClassAssign" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow reassigning class members.\n\n A class declaration creates a variable that we can modify, however, the modification is a mistake in most cases.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n class A {}\n A = 0;\n ```\n\n ```js,expect_diagnostic\n A = 0;\n class A {}\n ```\n\n ```js,expect_diagnostic\n class A {\n \tb() {\n \t\tA = 0;\n \t}\n }\n ```\n\n ```js,expect_diagnostic\n let A = class A {\n \tb() {\n \t\tA = 0;\n \t\t// `let A` is shadowed by the class name.\n \t}\n }\n ```\n\n ### Valid\n\n ```js\n let A = class A {}\n A = 0; // A is a variable.\n ```\n\n ```js\n let A = class {\n     b() {\n         A = 0; // A is a variable.\n     }\n }\n ```\n\n ```js\n class A {\n \tb(A) {\n \t\tA = 0; // A is a parameter.\n \t}\n }\n ```\n\n" , }) , "noCommaOperator" => Some (RuleMetadata {
 name : "noCommaOperator" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow comma operator.\n\n The comma operator includes multiple expressions where only one is expected.\n It evaluates every operand from left to right and returns the value of the last operand.\n It frequently obscures side effects, and its use is often an accident.\n\n The use of the comma operator in the initialization and update parts of a `for` is still allowed.\n\n Source: https://eslint.org/docs/latest/rules/no-sequences\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const foo = (doSomething(), 0);\n ```\n\n ```js,expect_diagnostic\n for (; doSomething(), !!test; ) {}\n ```\n\n ```js,expect_diagnostic\n // Use a semicolon instead.\n let a, b;\n a = 1, b = 2;\n ```\n\n ### Valid\n\n ```js\n for(a = 0, b = 0; (a + b) < 10; a++, b += 2) {}\n ```\n\n" , }) , "noCommentText" => Some (RuleMetadata {
 name : "noCommentText" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Prevent comments from being inserted as text nodes\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const a3 = <div>// comment</div>;\n ```\n\n ```js,expect_diagnostic\n const a4 = <div>/* comment */</div>;\n ```\n\n ```js,expect_diagnostic\n const a5 = <div>/** comment */</div>;\n ```\n\n ### Valid\n\n ```js\n const a = <div>{/* comment */}</div>;\n const a1 = <div>{/** comment */}</div>;\n const a2 = <div className={\"cls\" /* comment */}></div>;\n ```\n" , }) , "noCompareNegZero" => Some (RuleMetadata {
 name : "noCompareNegZero" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Disallow comparing against `-0`\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n (1 >= -0)\n ```\n\n ### Valid\n\n ```js\n (1 >= 0)\n```\n" , }) , "noConfusingLabels" => Some (RuleMetadata {
 name : "noConfusingLabels" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow labeled statements that are not loops.\n\n Labeled statements in JavaScript are used in conjunction with `break` and `continue` to control flow around multiple loops.\n Their use for other statements is suspicious and unfamiliar.\n\n Source: https://eslint.org/docs/latest/rules/no-labels\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n label: f();\n ```\n\n ```js,expect_diagnostic\n label: {\n     f();\n     break label;\n }\n ```\n\n ```js,expect_diagnostic\n label: if (a) {\n     f()\n     break label;\n }\n ```\n\n ```js,expect_diagnostic\n label: switch (a) {\n     case 0:\n         break label;\n }\n ```\n\n ### Valid\n\n ```js\n outer: while (a) {\n     while(b) {\n         break outer;\n     }\n }\n ```\n" , }) , "noConfusingVoidType" => Some (RuleMetadata {
 name : "noConfusingVoidType" , version : "1.2.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow `void` type outside of generic or return types.\n\n `void` in TypeScript refers to a function return that is meant to be ignored. Attempting to use a void type outside of a return type or generic type argument is often a sign of programmer error. `void` can also be misleading for other developers even if used correctly.\n\n > The `void` type means cannot be mixed with any other types, other than `never`, which accepts all types.\n > If you think you need this then you probably want the `undefined` type instead.\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n let foo: void;\n ```\n\n ```ts,expect_diagnostic\n function logSomething(thing: void) {}\n ```\n\n ```ts,expect_diagnostic\n interface Interface {\n     prop: void;\n }\n ```\n\n ```ts,expect_diagnostic\n type PossibleValues = number | void;\n ```\n\n ### Valid\n\n ```ts\n function foo(): void {};\n ```\n\n ```ts\n function doSomething(this: void) {}\n ```\n\n ```ts\n function printArg<T = void>(arg: T) {}\n ```\n" , }) , "noConsoleLog" => Some (RuleMetadata {
 name : "noConsoleLog" , version : "1.0.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Disallow the use of `console.log`\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n console.log()\n ```\n\n ## Valid\n\n ```js\n console.info(\"info\");\n console.warn(\"warn\");\n console.error(\"error\");\n console.assert(true);\n console.table([\"foo\", \"bar\"]);\n const console = { log() {} };\n console.log();\n ```\n\n" , }) , "noConstAssign" => Some (RuleMetadata {
 name : "noConstAssign" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Prevents from having `const` variables being re-assigned.\n\n Trying to assign a value to a `const` will cause an `TypeError` when the code is executed.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const a = 1;\n a = 4;\n ```\n\n ```js,expect_diagnostic\n const a = 2;\n a += 1;\n ```\n\n ```js,expect_diagnostic\n const a = 1;\n ++a;\n ```\n\n ```js,expect_diagnostic\n const a = 1, b = 2;\n\n a = 2;\n ```\n\n ### Valid\n\n ```js\n const a = 10;\n let b = 10;\n b = 20;\n ```\n\n" , }) , "noConstEnum" => Some (RuleMetadata {
 name : "noConstEnum" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Disallow TypeScript `const enum`\n\n Const enums are enums that should be inlined at use sites.\n Const enums are not supported by bundlers and are incompatible with the `isolatedModules` mode.\n Their use can lead to import nonexistent values (because const enums are erased).\n\n Thus, library authors and bundler users should not use const enums.\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n const enum Status {\n   Open,\n   Close,\n }\n ```\n\n ### Valid\n\n ```ts\n enum Status {\n   Open,\n   Close,\n }\n ```\n" , }) , "noConstantCondition" => Some (RuleMetadata {
 name : "noConstantCondition" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow constant expressions in conditions\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n if (false) {\n     doSomethingUnfinished();\n }\n ```\n\n ```js,expect_diagnostic\n if (Boolean(1)) {\n     doSomethingAlways();\n }\n ```\n\n ```js,expect_diagnostic\n if (undefined) {\n     doSomethingUnfinished();\n }\n ```\n\n ```js,expect_diagnostic\n for (;-2;) {\n     doSomethingForever();\n }\n ```\n\n ```js,expect_diagnostic\n while (typeof x) {\n     doSomethingForever();\n }\n ```\n\n ```js,expect_diagnostic\n var result = 0 ? a : b;\n ```\n\n ### Valid\n\n ```js\n if (x === 0) {\n     doSomething();\n }\n\n for (;;) {\n     doSomethingForever();\n }\n\n while (typeof x === \"undefined\") {\n     doSomething();\n }\n\n do {\n     doSomething();\n } while (x);\n\n var result = x !== 0 ? a : b;\n\n // Exception\n while (true) {\n     if (x) { break; }\n     x = f();\n }\n ```\n\n" , }) , "noConstructorReturn" => Some (RuleMetadata {
 name : "noConstructorReturn" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow returning a value from a `constructor`.\n\n Returning a value from a `constructor` of a class is a possible error.\n Forbidding this pattern prevents errors resulting from unfamiliarity with JavaScript or a copy-paste error.\n\n Only returning without a value is allowed, as it’s a control flow statement.\n\n Source: https://eslint.org/docs/latest/rules/no-constructor-return\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n class A {\n     constructor() {\n         return 0;\n     }\n }\n ```\n\n ### Valid\n\n ```js\n class A {\n     constructor() {}\n }\n ```\n\n ```js\n class B {\n     constructor(x) {\n         return;\n     }\n }\n ```\n\n" , }) , "noControlCharactersInRegex" => Some (RuleMetadata {
 name : "noControlCharactersInRegex" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Prevents from having control characters and some escape sequences that match control characters in regular expressions.\n\n Control characters are hidden special characters that are numbered from 0 to 31 in the ASCII system.\n They're not commonly used in JavaScript text. So, if you see them in a pattern (called a regular expression), it's probably a mistake.\n\n The following elements of regular expression patterns are considered possible errors in typing and are therefore disallowed by this rule:\n\n - Hexadecimal character escapes from `\\x00` to `\\x1F`\n - Unicode character escapes from `\\u0000` to `\\u001F`\n - Unicode code point escapes from `\\u{0}` to `\\u{1F}`\n - Unescaped raw characters from U+0000 to U+001F\n\n Control escapes such as `\\t` and `\\n` are allowed by this rule.\n\n Source: https://eslint.org/docs/latest/rules/no-control-regex\n\n ## Examples\n\n ### Invalid\n ```js,expect_diagnostic\n  var pattern1 = /\\x00/;\n ```\n ```js,expect_diagnostic\n  var pattern2 = /\\x0C/;\n ```\n ```js,expect_diagnostic\n  var pattern3 = /\\x1F/;\n ```\n ```js,expect_diagnostic\n  var pattern4 = /\\u000C/;\n ```\n ```js,expect_diagnostic\n  var pattern5 = /\\u{C}/u;\n ```\n ```js,expect_diagnostic\n  var pattern7 = new RegExp(\"\\x0C\");\n ```\n ```js,expect_diagnostic\n  var pattern7 = new RegExp(\"\\\\x0C\");\n ```\n\n ### Valid\n ```js\n var pattern1 = /\\x20/;\n var pattern2 = /\\u0020/;\n var pattern3 = /\\u{20}/u;\n var pattern4 = /\\t/;\n var pattern5 = /\\n/;\n var pattern6 = new RegExp(\"\\x20\");\n ```\n\n" , }) , "noDangerouslySetInnerHtml" => Some (RuleMetadata {
 name : "noDangerouslySetInnerHtml" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Prevent the usage of dangerous JSX props\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n function createMarkup() {\n     return { __html: 'child' }\n }\n <div dangerouslySetInnerHTML={createMarkup()}></div>\n ```\n\n ```js,expect_diagnostic\n React.createElement('div', {\n     dangerouslySetInnerHTML: { __html: 'child' }\n });\n ```\n" , }) , "noDangerouslySetInnerHtmlWithChildren" => Some (RuleMetadata {
 name : "noDangerouslySetInnerHtmlWithChildren" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Report when a DOM element or a component uses both `children` and `dangerouslySetInnerHTML` prop.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n function createMarkup() {\n     return { __html: 'child' }\n }\n <Component dangerouslySetInnerHTML={createMarkup()}>\"child1\"</Component>\n ```\n\n ```jsx,expect_diagnostic\n function createMarkup() {\n     return { __html: 'child' }\n }\n <Component dangerouslySetInnerHTML={createMarkup()} children=\"child1\" />\n ```\n\n ```js,expect_diagnostic\n React.createElement('div', { dangerouslySetInnerHTML: { __html: 'HTML' } }, 'children')\n ```\n" , }) , "noDebugger" => Some (RuleMetadata {
 name : "noDebugger" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow the use of `debugger`\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n debugger;\n ```\n\n ### Valid\n\n ```js\n const test = { debugger: 1 };\n test.debugger;\n```\n" , }) , "noDefaultExport" => Some (RuleMetadata {
 name : "noDefaultExport" , version : "1.4.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Disallow default exports.\n\n Default exports cannot be easily discovered inside an editor:\n They cannot be suggested by the editor when the user tries to import a name.\n\n Also, default exports don't encourage consistency over a code base:\n the module that imports the default export must choose a name.\n It is likely that different modules use different names.\n\n Moreover, default exports encourage exporting an object that acts as a namespace.\n This is a legacy pattern used to mimic CommonJS modules.\n\n For all these reasons, a team may want to disallow default exports.\n\n Note that this rule disallows only default exports in EcmaScript Module.\n It ignores CommonJS default exports.\n\n Source: https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-default-export.md\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n export default function f() {};\n ```\n\n ```js,expect_diagnostic\n export default class C {};\n ```\n\n ```js,expect_diagnostic\n export default {\n     f() {},\n     g() {},\n };\n ```\n\n ```js,expect_diagnostic\n export { X as default };\n ```\n\n ## Valid\n\n ```js\n export function f () {};\n export class C {};\n export { default as X } from \"mod\";\n ```\n\n ```cjs\n module.exports = class {};\n ```\n\n" , }) , "noDelete" => Some (RuleMetadata {
 name : "noDelete" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow the use of the `delete` operator.\n\n The `delete` operator enables the removal of a property from an object.\n\n The `delete` operator should be avoided because it [can prevent some optimizations of _JavaScript_ engines](https://webkit.org/blog/10298/inline-caching-delete/).\n Moreover, it can lead to unexpected results.\n For instance, deleting an array element [does not change the length of the array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#deleting_array_elements).\n\n The only legitimate use of `delete` is on an object that behaves like a _map_.\n To allow this pattern, this rule does not report `delete` on computed properties that are not literal values.\n Consider using [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instead of an object.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const arr = [1, 2, 3];\n delete arr[0];\n ```\n\n ```js,expect_diagnostic\n const obj = {a: {b: {c: 123}}};\n delete obj.a.b.c;\n ```\n\n ### Valid\n\n ```js\n const foo = new Set([1,2,3]);\n foo.delete(1);\n```\n\n ```js\n const map = Object.create(null);\n const key = \"key\"\n map[key] = \"value\"\n delete map[key];\n```\n\n ```js\n let x = 5;\n delete f(); // uncovered by this rule.\n```\n\n" , }) , "noDistractingElements" => Some (RuleMetadata {
 name : "noDistractingElements" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforces that no distracting elements are used.\n\n Elements that can be visually distracting can cause accessibility issues with visually impaired users.\n Such elements are most likely deprecated, and should be avoided.\n By default, the following elements are visually distracting: `<marquee>` and `<blink>`.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <marquee />\n ```\n\n ```jsx,expect_diagnostic\n <blink />\n ```\n\n ### Valid\n\n ```jsx\n <div />\n ```\n\n ## Accessibility guidelines\n\n - [WCAG 2.2.2](https://www.w3.org/WAI/WCAG21/Understanding/pause-stop-hide)\n\n" , }) , "noDoubleEquals" => Some (RuleMetadata {
 name : "noDoubleEquals" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Require the use of `===` and `!==`\n\n It is generally bad practice to use `==` for comparison instead of\n `===`. Double operators will triger implicit [type coercion](https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion)\n and are thus not prefered. Using strict equality operators is almost\n always best practice.\n\n For ergonomic reasons, this rule makes an exception for `== null` for\n comparing to both `null` and `undefined`.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n foo == bar\n ```\n\n ### Valid\n\n ```js\n foo == null\n```\n\n ```js\n foo != null\n```\n\n ```js\n null == foo\n```\n\n ```js\n null != foo\n```\n" , }) , "noDuplicateCase" => Some (RuleMetadata {
 name : "noDuplicateCase" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow duplicate case labels.\n\n If a switch statement has duplicate test expressions in case clauses, it is likely that a programmer copied a case clause but forgot to change the test expression.\n\n Source: https://eslint.org/docs/latest/rules/no-duplicate-case\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n switch (a) {\n     case 1:\n         break;\n     case 1:\n         break;\n     default:\n         break;\n }\n ```\n\n ```js,expect_diagnostic\n switch (a) {\n     case one:\n         break;\n     case one:\n         break;\n     default:\n         break;\n }\n ```\n\n ```js,expect_diagnostic\n switch (a) {\n     case \"1\":\n         break;\n     case \"1\":\n         break;\n     default:\n         break;\n }\n ```\n\n ### Valid\n\n ```js\n switch (a) {\n     case 1:\n         break;\n     case 2:\n         break;\n     default:\n         break;\n }\n ```\n\n ```js\n switch (a) {\n     case one:\n         break;\n     case two:\n         break;\n     default:\n         break;\n }\n ```\n\n ```js\n switch (a) {\n     case \"1\":\n         break;\n     case \"2\":\n         break;\n     default:\n         break;\n }\n ```\n" , }) , "noDuplicateClassMembers" => Some (RuleMetadata {
 name : "noDuplicateClassMembers" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow duplicate class members.\n\n If there are declarations of the same name among class members,\n the last declaration overwrites other declarations silently.\n It can cause unexpected behaviours.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n class Foo {\n   bar() { }\n   bar() { }\n }\n ```\n\n ```js,expect_diagnostic\n class Foo {\n   bar() { }\n   get bar() { }\n }\n ```\n\n ```js,expect_diagnostic\n class Foo {\n   bar;\n   bar() { }\n }\n ```\n\n ```js,expect_diagnostic\n class Foo {\n   static bar() { }\n   static bar() { }\n }\n ```\n\n ## Valid\n\n ```js\n class Foo {\n   bar() { }\n   qux() { }\n }\n ```\n\n ```js\n class Foo {\n   set bar(value) { }\n   get bar() { }\n }\n ```\n\n ```js\n class Foo {\n   bar;\n   qux;\n }\n ```\n\n ```js\n class Foo {\n   bar;\n   qux() { }\n }\n ```\n\n ```js\n class Foo {\n   static bar() { }\n   bar() { }\n }\n ```\n\n" , }) , "noDuplicateJsonKeys" => Some (RuleMetadata {
 name : "noDuplicateJsonKeys" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow two keys with the same name inside a JSON object.\n\n ## Examples\n\n ### Invalid\n\n ```json,expect_diagnostic\n {\n   \"title\": \"New title\",\n   \"title\": \"Second title\"\n }\n ```\n\n ### Valid\n\n ```json\n {\n   \"title\": \"New title\",\n   \"secondTitle\": \"Second title\"\n }\n ```\n" , }) , "noDuplicateJsxProps" => Some (RuleMetadata {
 name : "noDuplicateJsxProps" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Prevents JSX properties to be assigned multiple times.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n <Hello name=\"John\" name=\"John\" />\n ```\n\n ```js,expect_diagnostic\n <label xml:lang=\"en-US\" xml:lang=\"en-US\"></label>\n ```\n\n ### Valid\n\n ```js\n <Hello firstname=\"John\" lastname=\"Doe\" />\n ```\n\n ```js\n <label xml:lang=\"en-US\" lang=\"en-US\"></label>\n ```\n" , }) , "noDuplicateObjectKeys" => Some (RuleMetadata {
 name : "noDuplicateObjectKeys" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Prevents object literals having more than one property declaration for the same name.\n\n If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored, which is likely a mistake.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const obj = {\n\t\ta: 1,\n\t\ta: 2,\n }\n ```\n\n ```js,expect_diagnostic\n const obj = {\n\t\tset a(v) {},\n\t\ta: 2,\n }\n ```\n\n ### Valid\n\n ```js\n const obj = {\n\t\ta: 1,\n\t\tb: 2,\n }\n ```\n\n ```js\n const obj = {\n\t\tget a() { return 1; },\n\t\tset a(v) {},\n }\n ```\n\n" , }) , "noDuplicateParameters" => Some (RuleMetadata {
 name : "noDuplicateParameters" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : "  Disallow duplicate function parameter name.\n\n If more than one parameter has the same name in a function definition,\n the last occurrence overrides the preceding occurrences.\n A duplicated name might be a typing error.\n\n Source: https://eslint.org/docs/latest/rules/no-dupe-args\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n var f = function(a, b, b) {}\n ```\n\n ```js,expect_diagnostic\n function b(a, b, b) {}\n ```\n\n ### Valid\n\n ```js\n function i(i, b, c) {}\n var j = function (j, b, c) {};\n function k({ k, b }, { c, d }) {}\n function l([, l]) {}\n function foo([[a, b], [c, d]]) {}\n ```\n" , }) , "noDuplicatePrivateClassMembers" => Some (RuleMetadata {
 name : "noDuplicatePrivateClassMembers" , version : "1.0.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Catch a `SyntaxError` when defining duplicate private class members.\n\n ## Examples\n\n ```js\n class A {\n   #foo;\n   #foo;\n ```\n" , }) , "noEmptyBlockStatements" => Some (RuleMetadata {
 name : "noEmptyBlockStatements" , version : "1.3.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Disallow empty block statements and static blocks.\n\n Empty static blocks and block statements, while not technically errors, usually occur due to refactoring that wasn’t completed. They can cause confusion when reading code.\n\n This rule disallows empty block statements and static blocks.\n This rule ignores block statements or static blocks which contain a comment (for example, in an empty catch or finally block of a try statement to indicate that execution should continue regardless of errors).\n\n Source: https://eslint.org/docs/latest/rules/no-empty-static-block/\n Source: https://eslint.org/docs/latest/rules/no-empty/\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n function emptyFunctionBody () {}\n ```\n\n ```js,expect_diagnostic\n try {\n     doSomething();\n } catch(ex) {\n\n }\n ```\n\n ```js,expect_diagnostic\n class Foo {\n   static {}\n }\n ```\n\n ## Valid\n\n ```js\n function foo () {\n     doSomething();\n }\n ```\n\n ```js\n try {\n   doSomething();\n } catch (ex) {\n   // continue regardless of error\n }\n ```\n\n" , }) , "noEmptyCharacterClassInRegex" => Some (RuleMetadata {
 name : "noEmptyCharacterClassInRegex" , version : "1.3.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow empty character classes in regular expression literals.\n\n Empty character classes don't match anything.\n In contrast, negated empty classes match any character.\n They are often the result of a typing mistake.\n\n Source: https://eslint.org/docs/latest/rules/no-empty-character-class/\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n /^a[]/.test(\"a\"); // false\n ```\n\n ```js,expect_diagnostic\n /^a[^]/.test(\"ax\"); // true\n ```\n\n ## Valid\n\n ```js\n /^a[xy]/.test(\"ay\"); // true\n ```\n\n ```js\n /^a[^xy]/.test(\"ab\"); // true\n ```\n\n ```js\n /^a\\[]/.test(\"a[]\"); // true\n ```\n\n" , }) , "noEmptyInterface" => Some (RuleMetadata {
 name : "noEmptyInterface" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Disallow the declaration of empty interfaces.\n\n An empty interface in TypeScript does very little: any non-nullable value is assignable to `{}`.\n Using an empty interface is often a sign of programmer error, such as misunderstanding the concept of `{}` or forgetting to fill in fields.\n\n Source: https://typescript-eslint.io/rules/no-empty-interface\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n interface A {}\n ```\n\n ```ts,expect_diagnostic\n interface A extends B {}\n ```\n\n ### Valid\n\n ```ts\n interface A {\n   prop: string;\n }\n\n // Allow empty interfaces that extend at least two types.\n interface A extends B, C {}\n\n declare module \"@external/module\" {\n   // Allow empty interfaces that extend at least one type in external module.\n   interface Existing extends A {}\n }\n ```\n" , }) , "noEmptyPattern" => Some (RuleMetadata {
 name : "noEmptyPattern" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallows empty destructuring patterns.\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n var {} = foo;\n ```\n\n ```js,expect_diagnostic\n var {a: {}} = foo;\n ```\n\n ```js,expect_diagnostic\n function foo({}) {}\n ```\n\n ### Valid\n The following cases are valid because they create new bindings.\n\n ```js\n var {a = {}} = foo;\n var {a, b = {}} = foo;\n var {a = []} = foo;\n function foo({a = {}}) {}\n function foo({a = []}) {}\n var [a] = foo;\n ```\n" , }) , "noExcessiveCognitiveComplexity" => Some (RuleMetadata {
 name : "noExcessiveCognitiveComplexity" , version : "1.0.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Disallow functions that exceed a given Cognitive Complexity score.\n\n The more complexity a function contains, the harder it is to understand\n later on.\n\n Reducing complexity helps to make code more maintenable, both by making\n it easier to understand as well as by reducing chances of accidental\n side-effects when making changes.\n\n This rule calculates a complexity score for every function and disallows\n those that exceed a configured complexity threshold (default: 15).\n\n The complexity score is calculated based on the Cognitive Complexity\n algorithm: http://redirect.sonarsource.com/doc/cognitive-complexity.html\n\n Source:\n\n * https://github.com/SonarSource/eslint-plugin-sonarjs/blob/HEAD/docs/rules/cognitive-complexity.md\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n function tooComplex() {\n     for (let x = 0; x < 10; x++) {\n         for (let y = 0; y < 10; y++) {\n             for (let z = 0; z < 10; z++) {\n                 if (x % 2 === 0) {\n                     if (y % 2 === 0) {\n                         console.log(x > y ? `${x} > ${y}` : `${y} > ${x}`);\n                     }\n                 }\n             }\n         }\n     }\n }\n ```\n\n ## Options\n\n Allows to specify the maximum allowed complexity.\n\n ```json\n {\n     \"//\": \"...\",\n     \"options\": {\n         \"maxAllowedComplexity\": 15\n     }\n }\n ```\n\n The allowed values range from 1 through 254. The default is 15.\n\n" , }) , "noExplicitAny" => Some (RuleMetadata {
 name : "noExplicitAny" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow the `any` type usage.\n\n The `any` type in TypeScript is a dangerous \"escape hatch\" from the type system.\n Using `any` disables many type checking rules and is generally best used only as a last resort or when prototyping code.\n\n TypeScript's `--noImplicitAny` compiler option prevents an implied `any`,\n but doesn't prevent `any` from being explicitly used the way this rule does.\n\n Sometimes you can use the type `unknown` instead of the type `any`.\n It also accepts any value, however it requires to check that a property exists before calling it.\n\n Source: https://typescript-eslint.io/rules/no-explicit-any\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n let variable: any = 1;\n ```\n\n ```ts,expect_diagnostic\n class SomeClass {\n   message: Array<Array<any>>;\n }\n ```\n\n ```ts,expect_diagnostic\n function fn(param: Array<any>): void {}\n ```\n\n ### Valid\n\n ```ts\n let variable: number = 1;\n let variable2 = 1;\n ```\n\n ```ts\n class SomeClass<T extends any> {\n   message: Array<Array<unknown>>;\n }\n ```\n\n ```ts\n function fn(param: Array<Array<unknown>>): Array<unknown> {}\n ```\n\n" , }) , "noExtraBooleanCast" => Some (RuleMetadata {
 name : "noExtraBooleanCast" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow unnecessary boolean casts\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n if (!Boolean(foo)) {\n }\n ```\n\n ```js,expect_diagnostic\n while (!!foo) {}\n ```\n\n ```js,expect_diagnostic\n let x = 1;\n do {\n 1 + 1;\n } while (Boolean(x));\n ```\n\n ```js,expect_diagnostic\n for (; !!foo; ) {}\n ```\n\n ```js,expect_diagnostic\n new Boolean(!!x);\n ```\n\n ### Valid\n ```js\n Boolean(!x);\n !x;\n !!x;\n ```\n" , }) , "noExtraNonNullAssertion" => Some (RuleMetadata {
 name : "noExtraNonNullAssertion" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Prevents the wrong usage of the non-null assertion operator (`!`) in TypeScript files.\n\n > The `!` non-null assertion operator in TypeScript is used to assert that a value's type does not include `null` or `undefined`. Using the operator any more than once on a single value does nothing.\n\n Source: https://typescript-eslint.io/rules/no-extra-non-null-assertion\n\n ## Examples\n\n ### Invalid\n ```ts,expect_diagnostic\n const bar = foo!!.bar;\n ```\n\n ```ts,expect_diagnostic\n function fn(bar?: { n: number }) {\n   return bar!?.n;\n }\n ```\n\n ```ts,expect_diagnostic\n function fn(bar?: { n: number }) {\n   return ((bar!))?.();\n }\n ```\n\n ### Valid\n ```ts\n const bar = foo!.bar;\n\n obj?.string!.trim();\n\n function fn(key: string | null) {\n   const obj = {};\n   return obj?.[key!];\n }\n ```\n\n" , }) , "noFallthroughSwitchClause" => Some (RuleMetadata {
 name : "noFallthroughSwitchClause" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow fallthrough of `switch` clauses.\n\n Switch clauses in `switch` statements fall through by default.\n This can lead to unexpected behavior when forgotten.\n\n Source: https://eslint.org/docs/latest/rules/no-fallthrough\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n switch (bar) {\n \tcase 0:\n \t\ta();\n \tcase 1:\n \t\tb();\n }\n ```\n\n ## Valid\n\n ```js\n switch (foo) {\n \tcase 1:\n     case 2:\n \t\tdoSomething();\n \t\tbreak;\n     case 3: {\n         if (cond) {\n             break;\n         } else {\n             break;\n         }\n     }\n \tcase 4:\n \t\tdoSomething();\n }\n ```\n\n" , }) , "noForEach" => Some (RuleMetadata {
 name : "noForEach" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Prefer `for...of` statement instead of `Array.forEach`.\n\n Here's a summary of why `forEach` may be disallowed, and why `for...of` is preferred for almost any use-case of `forEach`:\n - Performance: Using `forEach` can lead to performance issues, especially when working with large arrays.\n When more requirements are added on, `forEach` typically gets chained with other methods like `filter` or `map`, causing multiple iterations over the same Array.\n Encouraging for loops discourages chaining and encourages single-iteration logic (e.g. using a continue instead of `filter`).\n\n - Readability: While `forEach` is a simple and concise way to iterate over an array, it can make the code less readable, especially when the callback function is complex.\n In contrast, using a for loop or a `for...of` loop can make the code more explicit and easier to read.\n\n - Debugging: `forEach` can make debugging more difficult, because it hides the iteration process.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n els.forEach(el => {\n   el\n })\n ```\n\n ```js,expect_diagnostic\n els['forEach'](el => {\n   el\n })\n ```\n\n ## Valid\n\n ```js\n for (const el of els) {\n   el\n }\n ```\n\n" , }) , "noFunctionAssign" => Some (RuleMetadata {
 name : "noFunctionAssign" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow reassigning function declarations.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n function foo() { };\n foo = bar;\n ```\n\n ```js,expect_diagnostic\n function foo() {\n     foo = bar;\n  }\n ```\n\n ```js,expect_diagnostic\n foo = bar;\n function foo() { };\n ```\n\n ```js,expect_diagnostic\n [foo] = bar;\n function foo() { };\n ```\n\n ```js,expect_diagnostic\n ({ x: foo = 0 } = bar);\n function foo() { };\n ```\n\n ```js,expect_diagnostic\n function foo() {\n     [foo] = bar;\n  }\n ```\n ```js,expect_diagnostic\n (function () {\n     ({ x: foo = 0 } = bar);\n     function foo() { };\n  })();\n ```\n\n ## Valid\n\n ```js\n function foo() {\n     var foo = bar;\n  }\n ```\n\n ```js\n function foo(foo) {\n     foo = bar;\n  }\n ```\n\n ```js\n function foo() {\n     var foo;\n     foo = bar;\n  }\n ```\n\n ```js\n var foo = () => {};\n foo = bar;\n ```\n\n ```js\n var foo = function() {};\n foo = bar;\n ```\n\n ```js\n var foo = function() {\n     foo = bar;\n  };\n ```\n\n ```js\n import bar from 'bar';\n function foo() {\n     var foo = bar;\n }\n ```\n" , }) , "noGlobalIsFinite" => Some (RuleMetadata {
 name : "noGlobalIsFinite" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Use `Number.isFinite` instead of global `isFinite`.\n\n `Number.isFinite()` and `isFinite()` [have not the same behavior](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#difference_between_number.isfinite_and_global_isfinite).\n When the argument to `isFinite()` is not a number, the value is first coerced to a number.\n `Number.isFinite()` does not perform this coercion.\n Therefore, it is a more reliable way to test whether a number is finite.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n isFinite(false); // true\n ```\n\n ## Valid\n\n ```js\n Number.isFinite(false); // false\n ```\n" , }) , "noGlobalIsNan" => Some (RuleMetadata {
 name : "noGlobalIsNan" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Use `Number.isNaN` instead of global `isNaN`.\n\n `Number.isNaN()` and `isNaN()` [have not the same behavior](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN#description).\n When the argument to `isNaN()` is not a number, the value is first coerced to a number.\n `Number.isNaN()` does not perform this coercion.\n Therefore, it is a more reliable way to test whether a value is `NaN`.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n isNaN({}); // true\n ```\n\n ## Valid\n\n ```js\n Number.isNaN({}); // false\n ```\n\n" , }) , "noGlobalObjectCalls" => Some (RuleMetadata {
 name : "noGlobalObjectCalls" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow calling global object properties as functions\n\n ECMAScript provides several global objects that are intended to be used as-is.\n Some of these objects look as if they could be constructors due their capitalization (such as Math and JSON) but will throw an error if you try to execute them as functions.\n\n The ECMAScript 5 specification makes it clear that both Math and JSON cannot be invoked:\n The Math object does not have a [[Call]] internal property; it is not possible to invoke the Math object as a function.\n\n The ECMAScript 2015 specification makes it clear that Reflect cannot be invoked:\n The Reflect object also does not have a [[Call]] internal method; it is not possible to invoke the Reflect object as a function.\n\n The ECMAScript 2017 specification makes it clear that Atomics cannot be invoked:\n The Atomics object does not have a [[Call]] internal method; it is not possible to invoke the Atomics object as a function.\n\n And the ECMAScript Internationalization API Specification makes it clear that Intl cannot be invoked:\n The Intl object does not have a [[Call]] internal method; it is not possible to invoke the Intl object as a function.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n var math = Math();\n ```\n\n ```js,expect_diagnostic\n var newMath = new Math();\n ```\n\n ```js,expect_diagnostic\n var json = JSON();\n ```\n\n ```js,expect_diagnostic\n var newJSON = new JSON();\n ```\n\n ```js,expect_diagnostic\n var reflect = Reflect();\n ```\n\n ```js,expect_diagnostic\n var newReflect = new Reflect();\n ```\n\n ```js,expect_diagnostic\n var atomics = Atomics();\n ```\n\n ```js,expect_diagnostic\n var newAtomics = new Atomics();\n ```\n\n ```js,expect_diagnostic\n var intl = Intl();\n ```\n\n ```js,expect_diagnostic\n var newIntl = new Intl();\n ```\n\n ## Valid\n\n ```js\n function area(r) {\n     return Math.PI * r * r;\n }\n\n var object = JSON.parse(\"{}\");\n\n var value = Reflect.get({ x: 1, y: 2 }, \"x\");\n\n var first = Atomics.load(foo, 0);\n\n var segmenterFr = new Intl.Segmenter(\"fr\", { granularity: \"word\" });\n ```\n\n" , }) , "noHeaderScope" => Some (RuleMetadata {
 name : "noHeaderScope" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " The scope prop should be used only on `<th>` elements.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <div scope={scope} />\n ```\n\n ```jsx,expect_diagnostic\n <div scope=\"col\" />\n ```\n\n ### Valid\n\n ```jsx\n <th scope={scope}></th>\n ```\n\n ```jsx\n <th scope=\"col\"></th>\n ```\n\n ## Accessibility guidelines\n\n - [WCAG 1.3.1](https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships)\n - [WCAG 4.1.1](https://www.w3.org/WAI/WCAG21/Understanding/parsing)\n\n" , }) , "noImplicitAnyLet" => Some (RuleMetadata {
 name : "noImplicitAnyLet" , version : "1.4.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow use of implicit `any` type on variable declarations.\n\n TypeScript variable declaration without any type annotation and initialization have the `any` type.\n The any type in TypeScript is a dangerous “escape hatch” from the type system.\n Using any disables many type checking rules and is generally best used only as a last resort or when prototyping code.\n TypeScript’s `--noImplicitAny` compiler option doesn't report this case.\n\n\n\n Source: https://www.typescriptlang.org/tsconfig#noImplicitAny\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n var a;\n a = 2;\n ````\n\n ```ts,expect_diagnostic\n let b;\n b = 1\n ```\n\n ## Valid\n\n ```ts\n var a = 1;\n let a:number;\n var b: number\n var b =10;\n ```\n\n" , }) , "noImplicitBoolean" => Some (RuleMetadata {
 name : "noImplicitBoolean" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : false , deprecated : None , docs : " Disallow implicit `true` values on JSX boolean attributes\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <input disabled />\n ```\n\n ### Valid\n\n ```jsx\n <input disabled={false} />\n```\n\n ```jsx\n <input disabled={''} />\n```\n\n ```jsx\n <input disabled={0} />\n```\n\n ```jsx\n <input disabled={undefined} />\n```\n\n ```jsx\n <input disabled='false' />\n```\n" , }) , "noImportAssign" => Some (RuleMetadata {
 name : "noImportAssign" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : "  Disallow assigning to imported bindings\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n import x from \"y\";\n x = 1;\n ```\n ```js,expect_diagnostic\n import y from \"y\";\n [y] = 1;\n ```\n ```js,expect_diagnostic\n import z from \"y\";\n ({ z } = 1); /// ```\n ```js,expect_diagnostic\n import a from \"y\";\n [...a] = 1;\n ```\n ```js,expect_diagnostic\n import b from \"y\";\n ({ ...b } = 1);\n ```\n ```js,expect_diagnostic\n import c from \"y\";\n for (c in y) {};\n ```\n\n ```js,expect_diagnostic\n import d from \"y\";\n d += 1;\n ```\n ```js,expect_diagnostic\n import * as e from \"y\";\n e = 1;\n ```\n" , }) , "noInferrableTypes" => Some (RuleMetadata {
 name : "noInferrableTypes" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Disallow type annotations for variables, parameters, and class properties initialized with a literal expression.\n\n TypeScript is able to infer the types of parameters, properties, and variables from their default or initial values.\n There is no need to use an explicit `:` type annotation for trivially inferred types (boolean, bigint, number, regex, string).\n Doing so adds unnecessary verbosity to code making it harder to read.\n\n In contrast to ESLint's rule, this rule allows to use a wide type for `const` declarations.\n Moreover, the rule does not recognize `undefined` values, primitive type constructors (String, Number, ...), and `RegExp` type.\n These global variables could be shadowed by local ones.\n\n Source: https://typescript-eslint.io/rules/no-inferrable-types\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n const variable: 1 = 1;\n ```\n\n ```ts,expect_diagnostic\n let variable: number = 1;\n ```\n\n ```ts,expect_diagnostic\n class SomeClass {\n   readonly field: 1 = 1;\n }\n ```\n\n ```ts,expect_diagnostic\n class SomeClass {\n   field: number = 1;\n }\n ```\n\n ```ts,expect_diagnostic\n function f(param: number = 1): void {}\n ```\n\n ### Valid\n\n ```ts\n const variable: number = 1;\n ```\n\n ```ts\n let variable: 1 | 2 = 1;\n ```\n\n ```ts\n class SomeClass {\n   readonly field: number = 1;\n }\n ```\n\n ```ts\n // `undefined` could be shadowed\n const variable: undefined = undefined;\n ```\n\n ```ts\n // `RegExp` could be shadowed\n const variable: RegExp = /a/;\n ```\n\n ```ts\n // `String` could be shadowed\n let variable: string = String(5);\n ```\n\n ```ts\n class SomeClass {\n   field: 1 | 2 = 1;\n }\n ```\n\n ```ts\n function f(param: 1 | 2 = 1): void {}\n ```\n\n" , }) , "noInitializerWithDefinite" => Some (RuleMetadata {
 name : "noInitializerWithDefinite" , version : "1.4.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Disallow initializing a variable with a definite assertion to prevent `SyntaxError`.\n\n ## Examples\n\n ```js\n let foo!: string = \"bar\";\n ```\n" , }) , "noInnerDeclarations" => Some (RuleMetadata {
 name : "noInnerDeclarations" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow `function` and `var` declarations that are accessible outside their block.\n\n A `var` is accessible in the whole body of the nearest root (function, module, script, static block).\n To avoid confusion, they should be declared to the nearest root.\n\n Prior to ES2015, `function` declarations were only allowed in the nearest root,\n though parsers sometimes erroneously accept them elsewhere.\n In ES2015, inside an _ES module_, a `function` declaration is always block-scoped.\n\n Note that `const` and `let` declarations are block-scoped,\n and therefore they are not affected by this rule.\n Moreover, `function` declarations in nested blocks are allowed inside _ES modules_.\n\n Source: https://eslint.org/docs/rules/no-inner-declarations\n\n ## Examples\n\n ### Invalid\n\n ```cjs,expect_diagnostic\n if (test) {\n     function f() {}\n }\n ```\n\n ```js,expect_diagnostic\n if (test) {\n     var x = 1;\n }\n ```\n\n ```cjs,expect_diagnostic\n function f() {\n     if (test) {\n         function g() {}\n     }\n }\n ```\n\n ```js,expect_diagnostic\n function f() {\n     if (test) {\n         var x = 1;\n     }\n }\n ```\n\n ### Valid\n\n ```js\n // inside a module, function declarations are block-scoped and thus allowed.\n if (test) {\n     function f() {}\n }\n export {}\n ```\n\n ```js\n function f() { }\n ```\n\n ```js\n function f() {\n     function g() {}\n }\n ```\n\n ```js\n function f() {\n     var x = 1;\n }\n ```\n\n ```js\n function f() {\n     if (test) {\n         const g = function() {};\n     }\n }\n ```\n\n" , }) , "noInteractiveElementToNoninteractiveRole" => Some (RuleMetadata {
 name : "noInteractiveElementToNoninteractiveRole" , version : "1.3.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforce that non-interactive ARIA roles are not assigned to interactive HTML elements.\n\n Interactive HTML elements indicate controls in the user interface.\n Interactive elements include `<a href>`, `<button>`, `<input>`, `<select>`, `<textarea>`.\n Non-interactive HTML elements and non-interactive ARIA roles indicate content and containers in the user interface.\n Non-interactive elements include `<main>`, `<area>`, `<h1>` (,`<h2>`, etc), `<img>`, `<li>`, `<ul>` and `<ol>`.\n\n [WAI-ARIA roles](https://www.w3.org/TR/wai-aria-1.1/#usage_intro) should not be used to convert an interactive element to a non-interactive element.\n Non-interactive ARIA roles include `article`, `banner`, `complementary`, `img`, `listitem`, `main`, `region` and `tooltip`.\n\n Source: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/no-interactive-element-to-noninteractive-role.md\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <input role=\"img\" />;\n ```\n\n ## Valid\n\n ```jsx\n <input role=\"button\" />;\n ```\n\n" , }) , "noInvalidConstructorSuper" => Some (RuleMetadata {
 name : "noInvalidConstructorSuper" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Prevents the incorrect use of `super()` inside classes. It also checks whether a call `super()` is missing from classes that extends other constructors.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n class A {\n     constructor() {\n         super();\n     }\n }\n ```\n\n ```js,expect_diagnostic\n class A extends undefined {\n     constructor() {\n         super();\n     }\n }\n ```\n\n ### Valid\n\n ```js\n export default class A extends B {\n     constructor() {\n         super();\n     }\n }\n ```\n\n ```js\n export class A {\n     constructor() {}\n }\n ```\n\n" , }) , "noInvalidNewBuiltin" => Some (RuleMetadata {
 name : "noInvalidNewBuiltin" , version : "1.3.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow `new` operators with global non-constructor functions.\n\n Some global functions cannot be called using the new operator and\n will throw a `TypeError` if you attempt to do so. These functions are:\n\n - [`Symbol`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol)\n - [`BigInt`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt)\n\n Source: https://eslint.org/docs/latest/rules/no-new-native-nonconstructor/\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n let foo = new Symbol('foo');\n ```\n\n ```js,expect_diagnostic\n let bar = new BigInt(9007199254740991);\n ```\n\n ## Valid\n\n ```js\n let foo = Symbol('foo');\n\n function baz(Symbol) {\n     const qux = new Symbol(\"baz\");\n }\n ```\n\n ```js\n let bar = BigInt(9007199254740991);\n\n function quux(BigInt) {\n     const corge = new BigInt(9007199254740991);\n }\n ```\n" , }) , "noLabelVar" => Some (RuleMetadata {
 name : "noLabelVar" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : "  Disallow labels that share a name with a variable\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const x1 = \"test\";\n x1: expr;\n ```\n\n ### Valid\n\n ```js\n const x = \"test\";\n z: expr;\n ```\n" , }) , "noMisleadingCharacterClass" => Some (RuleMetadata {
 name : "noMisleadingCharacterClass" , version : "next" , fix_kind : Some (FixKind :: Safe) , recommended : false , deprecated : None , docs : " Disallow characters made with multiple code points in character class syntax.\n\n Unicode includes the characters which are made with multiple code points. e.g. A\u{301}, 🇯🇵, 👨\u{200d}👩\u{200d}👦.\n A RegExp character class `/[abc]/` cannot handle characters with multiple code points.\n For example, the character `❇\u{fe0f}` consists of two code points: `❇` (U+2747) and `VARIATION SELECTOR-16` (U+FE0F).\n If this character is in a RegExp character class, it will match to either `❇` or `VARIATION SELECTOR-16` rather than `❇\u{fe0f}`.\n This rule reports the regular expressions which include multiple code point characters in character class syntax.\n\n Source: https://eslint.org/docs/latest/rules/no-misleading-character-class\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n /^[A\u{301}]$/u;\n ```\n\n ```js,expect_diagnostic\n /^[❇\u{fe0f}]$/u;\n ```\n\n ```js,expect_diagnostic\n /^[👶🏻]$/u;\n ```\n\n ```js,expect_diagnostic\n /^[🇯🇵]$/u;\n ```\n\n ```js,expect_diagnostic\n /^[👨\u{200d}👩\u{200d}👦]$/u;\n ```\n\n ```js,expect_diagnostic\n /^[👍]$/; // surrogate pair without u flag\n ```\n\n ## Valid\n\n ```js\n /^[abc]$/;\n /^[👍]$/u;\n /^[\\q{👶🏻}]$/v;\n ```\n\n" , }) , "noMisleadingInstantiator" => Some (RuleMetadata {
 name : "noMisleadingInstantiator" , version : "1.3.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce proper usage of `new` and `constructor`.\n\n In JavaScript, classes utilize the `constructor` method to initialize a new instance. On the other hand, TypeScript interfaces can describe a class type with a `new()` method signature, though this pattern is not commonly seen in real-world code. Developers, especially those new to JavaScript or TypeScript, might occasionally confuse the use of `constructor` with `new`.\n This rule triggers warnings in the following scenarios:\n - When a class has a method named `new`.\n - When an interface defines a method named `constructor` or `new` that returns the interface type.\n - When a type alias has a `constructor` method.\n\n You should not use this rule if you intentionally want a class with a `new` method, and you're confident nobody working in your code will mistake it with an `constructor`.\n\n Source: https://typescript-eslint.io/rules/no-misused-new/\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n interface I {\n   new (): I;\n   constructor(): void;\n }\n ```\n\n ```ts,expect_diagnostic\n class C {\n   new(): C;\n }\n ```\n\n ### Valid\n\n ```ts\n declare class C {\n   constructor();\n }\n\n interface I {\n   new (): C;\n }\n ```\n" , }) , "noMisrefactoredShorthandAssign" => Some (RuleMetadata {
 name : "noMisrefactoredShorthandAssign" , version : "1.3.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : None , docs : " Disallow shorthand assign when variable appears on both sides.\n\n This rule helps to avoid potential bugs related to incorrect assignments or unintended\n side effects that may occur during refactoring.\n\n Source: https://rust-lang.github.io/rust-clippy/master/#/misrefactored_assign_op\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n a += a + b\n ```\n\n ```js,expect_diagnostic\n a -= a - b\n ```\n\n ```js,expect_diagnostic\n a *= a * b\n ```\n\n ## Valid\n\n ```js\n a += b\n ```\n\n ```js\n a = a + b\n ```\n\n ```js\n a = a - b\n ```\n" , }) , "noMultipleSpacesInRegularExpressionLiterals" => Some (RuleMetadata {
 name : "noMultipleSpacesInRegularExpressionLiterals" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow unclear usage of consecutive space characters in regular expression literals\n\n Source: https://eslint.org/docs/latest/rules/no-regex-spaces/\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n /   /\n ```\n\n ```js,expect_diagnostic\n /foo  */\n ```\n\n ```js,expect_diagnostic\n /foo  {2,}bar   {3,5}baz/\n ```\n\n ```js,expect_diagnostic\n /foo [ba]r  b(a|z)/\n ```\n\n ### Valid\n\n ```js\n /foo {2}bar/\n```\n\n ```js\n / foo bar baz /\n```\n\n ```js\n /foo bar\tbaz/\n```\n" , }) , "noNamespace" => Some (RuleMetadata {
 name : "noNamespace" , version : "1.0.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Disallow the use of TypeScript's `namespace`s.\n\n Namespaces are an old way to organize your code in TypeScript.\n They are not recommended anymore and should be replaced by ES6 modules\n (the `import`/`export` syntax).\n\n Source: https://typescript-eslint.io/rules/no-namespace\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n module foo {}\n ```\n\n ```ts,expect_diagnostic\n declare module foo {}\n ```\n\n ```ts,expect_diagnostic\n namespace foo {}\n ```\n\n ```ts,expect_diagnostic\n declare namespace foo {}\n ```\n\n ## Valid\n\n ```ts\n import foo from 'foo';\n export { bar };\n ```\n\n ```ts\n declare global {}\n ```\n\n ```ts\n declare module 'foo' {}\n ```\n\n" , }) , "noNegationElse" => Some (RuleMetadata {
 name : "noNegationElse" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : false , deprecated : None , docs : " Disallow negation in the condition of an `if` statement if it has an `else` clause.\n\n Source: https://eslint.org/docs/latest/rules/no-negated-condition/\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n if (!cond) { f();} else { g();}\n ```\n\n ```js,expect_diagnostic\n !cond ? 0 : 1\n```\n\n ### Valid\n\n ```js\n if (!cond) { f(); }\n```\n\n ```js\n cond ? 1 : 0\n```\n\n ```js\n if (!cond) { f(); }\n```\n\n ```js\n if (!!val) { f(); } else { g(); }\n```\n" , }) , "noNewSymbol" => Some (RuleMetadata {
 name : "noNewSymbol" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : Some ("Use `noInvalidNewBuiltin` instead.") , docs : " Disallow `new` operators with the `Symbol` object.\n\n `Symbol` cannot be instantiated. This results in throwing a `TypeError`.\n\n Source: https://eslint.org/docs/latest/rules/no-new-symbol\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n var foo = new Symbol('foo');\n ```\n\n ### Valid\n\n ```js\n var bar = Symbol('bar');\n function baz() {\n     function Symbol() { }\n     new Symbol();\n }\n ```\n" , }) , "noNonNullAssertion" => Some (RuleMetadata {
 name : "noNonNullAssertion" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow non-null assertions using the `!` postfix operator.\n\n TypeScript's `!` non-null assertion operator asserts to the type system that an expression is non-nullable, as\n in not `null` or `undefined`. Using assertions to tell the type system new information is often a sign that\n code is not fully type-safe. It's generally better to structure program logic so that TypeScript understands\n when values may be nullable.\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n interface Example {\n   property?: string;\n }\n declare const example: Example;\n const includesBaz = foo.property!.includes('baz');\n ```\n ```ts,expect_diagnostic\n (b!! as number) = \"test\";\n ```\n\n ### Valid\n\n ```ts\n interface Example {\n   property?: string;\n }\n\n declare const example: Example;\n const includesBaz = foo.property?.includes('baz') ?? false;\n ```\n\n" , }) , "noNoninteractiveElementToInteractiveRole" => Some (RuleMetadata {
 name : "noNoninteractiveElementToInteractiveRole" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforce that interactive ARIA roles are not assigned to non-interactive HTML elements.\n\n Non-interactive HTML elements indicate _content_ and _containers_ in the user interface.\n Non-interactive elements include `<main>`, `<area>`, `<h1>` (,`<h2>`, etc), `<img>`, `<li>`, `<ul>` and `<ol>`.\n\n Interactive HTML elements indicate _controls_ in the user interface.\n Interactive elements include `<a href>`, `<button>`, `<input>`, `<select>`, `<textarea>`.\n\n [WAI-ARIA roles](https://www.w3.org/TR/wai-aria-1.1/#usage_intro) should not be used to convert a non-interactive element to an interactive element.\n Interactive ARIA roles include `button`, `link`, `checkbox`, `menuitem`, `menuitemcheckbox`, `menuitemradio`, `option`, `radio`, `searchbox`, `switch` and `textbox`.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <h1 role=\"button\">Some text</h1>\n ```\n\n ### Valid\n\n\n ```jsx\n <span role=\"button\">Some text</span>\n ```\n\n ## Accessibility guidelines\n\n - [WCAG 4.1.2](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)\n\n ### Resources\n\n - [WAI-ARIA roles](https://www.w3.org/TR/wai-aria-1.1/#usage_intro)\n - [WAI-ARIA Authoring Practices Guide - Design Patterns and Widgets](https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex)\n - [Fundamental Keyboard Navigation Conventions](https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_generalnav)\n - [Mozilla Developer Network - ARIA Techniques](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_button_role#Keyboard_and_focus)\n\n" , }) , "noNoninteractiveTabindex" => Some (RuleMetadata {
 name : "noNoninteractiveTabindex" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce that `tabIndex` is not assigned to non-interactive HTML elements.\n\n When using the tab key to navigate a webpage, limit it to interactive elements.\n You don't need to add tabindex to items in an unordered list as assistive technology can navigate through the HTML.\n Keep the tab ring small, which is the order of elements when tabbing, for a more efficient and accessible browsing experience.\n\n ESLint (eslint-plugin-jsx-a11y) Equivalent: [no-noninteractive-tabindex](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/no-noninteractive-tabindex.md)\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <div tabIndex=\"0\" />\n ```\n\n ```jsx,expect_diagnostic\n <div role=\"article\" tabIndex=\"0\" />\n ```\n\n ```jsx,expect_diagnostic\n <article tabIndex=\"0\" />\n ```\n\n ## Valid\n\n ```jsx\n <div />\n ```\n\n ```jsx\n <MyButton tabIndex={0} />\n ```\n\n ```jsx\n <article tabIndex=\"-1\" />\n ```\n\n" , }) , "noNonoctalDecimalEscape" => Some (RuleMetadata {
 name : "noNonoctalDecimalEscape" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow `\\8` and `\\9` escape sequences in string literals.\n\n Since ECMAScript 2021, the escape sequences \\8 and \\9 have been defined as non-octal decimal escape sequences.\n However, most JavaScript engines consider them to be \"useless\" escapes. For example:\n\n ```js,ignore\n \"\\8\" === \"8\"; // true\n \"\\9\" === \"9\"; // true\n ```\n\n Although this syntax is deprecated, it is still supported for compatibility reasons.\n If the ECMAScript host is not a web browser, this syntax is optional.\n However, web browsers are still required to support it, but only in non-strict mode.\n Regardless of your targeted environment, it is recommended to avoid using these escape sequences in new code.\n\n Source: https://eslint.org/docs/latest/rules/no-nonoctal-decimal-escape\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const x = \"\\8\";\n ```\n\n ```js,expect_diagnostic\n const x = \"Don't use \\8 escape.\";\n ```\n\n ```js,expect_diagnostic\n const x = \"Don't use \\9 escape.\";\n ```\n\n ## Valid\n\n ```js\n const x = \"8\";\n ```\n\n ```js\n const x = \"Don't use \\\\8 and \\\\9 escapes.\";\n ```\n\n" , }) , "noParameterAssign" => Some (RuleMetadata {
 name : "noParameterAssign" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow reassigning `function` parameters.\n\n Assignment to a `function` parameters can be misleading and confusing,\n as modifying parameters will also mutate the `arguments` object.\n It is often unintended and indicative of a programmer error.\n\n Source: https://eslint.org/docs/latest/rules/no-param-reassign\n\n In contrast to the _ESLint_ rule, this rule cannot be configured to report\n assignments to a property of a parameter.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n function f(param) {\n     param = 13;\n }\n ```\n\n ```js,expect_diagnostic\n function f(param) {\n     param++;\n }\n ```\n\n ```js,expect_diagnostic\n function f(param) {\n     for (param of arr) {}\n }\n ```\n\n ```ts,expect_diagnostic\n class C {\n     constructor(readonly prop: number) {\n         prop++\n     }\n }\n ```\n\n ## Valid\n\n ```js\n function f(param) {\n     let local = param;\n }\n ```\n\n" , }) , "noParameterProperties" => Some (RuleMetadata {
 name : "noParameterProperties" , version : "1.0.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Disallow the use of parameter properties in class constructors.\n\n TypeScript includes a \"parameter properties\" shorthand for declaring a class constructor parameter and class property in one location.\n Parameter properties can confuse those new to TypeScript as they are less explicit than other ways of declaring and initializing class members.\n Moreover, private class properties, starting with `#`, cannot be turned into \"parameter properties\".\n This questions the future of this feature.\n\n Source: https://typescript-eslint.io/rules/parameter-properties\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n class A {\n     constructor(readonly name: string) {}\n }\n ```\n\n ### Valid\n\n ```ts\n class A {\n     constructor(name: string) {}\n }\n ```\n\n" , }) , "noPositiveTabindex" => Some (RuleMetadata {
 name : "noPositiveTabindex" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Prevent the usage of positive integers on `tabIndex` property\n\n Avoid positive `tabIndex` property values to synchronize the flow of the page with keyboard tab order.\n ## Accessibility guidelines\n\n [WCAG 2.4.3](https://www.w3.org/WAI/WCAG21/Understanding/focus-order)\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <div tabIndex={1}>foo</div>\n ```\n\n ```jsx,expect_diagnostic\n <div tabIndex={\"1\"} />\n ```\n\n ```js,expect_diagnostic\n React.createElement(\"div\", { tabIndex: 1 })\n ```\n\n ### Valid\n\n ```jsx\n <div tabIndex=\"0\" />\n ```\n\n ```js\n React.createElement(\"div\", { tabIndex: -1 })\n ```\n" , }) , "noPrecisionLoss" => Some (RuleMetadata {
 name : "noPrecisionLoss" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow literal numbers that lose precision\n\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const x = 9007199254740993\n ```\n\n ```js,expect_diagnostic\n const x = 5123000000000000000000000000001\n ```\n\n ```js,expect_diagnostic\n const x = 1230000000000000000000000.0\n ```\n\n ```js,expect_diagnostic\n const x = .1230000000000000000000000\n ```\n\n ```js,expect_diagnostic\n const x = 0X20000000000001\n ```\n\n ```js,expect_diagnostic\n const x = 0X2_000000000_0001;\n ```\n\n ### Valid\n\n ```js\n const x = 12345\n const x = 123.456\n const x = 123e34\n const x = 12300000000000000000000000\n const x = 0x1FFFFFFFFFFFFF\n const x = 9007199254740991\n const x = 9007_1992547409_91\n ```\n\n" , }) , "noPrototypeBuiltins" => Some (RuleMetadata {
 name : "noPrototypeBuiltins" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow direct use of `Object.prototype` builtins.\n\n ECMAScript 5.1 added `Object.create` which allows the creation of an object with a custom prototype.\n This pattern is often used for objects used as Maps. However, this pattern can lead to errors\n if something else relies on prototype properties/methods.\n Moreover, the methods could be shadowed, this can lead to random bugs and denial of service\n vulnerabilities. For example, calling `hasOwnProperty` directly on parsed JSON like `{\"hasOwnProperty\": 1}` could lead to vulnerabilities.\n To avoid subtle bugs like this, you should call these methods from `Object.prototype`.\n For example, `foo.isPrototypeof(bar)` should be replaced with `Object.prototype.isPrototypeof.call(foo, \"bar\")`\n As for the `hasOwn` method, `foo.hasOwn(\"bar\")` should be replaced with `Object.hasOwn(foo, \"bar\")`.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n var invalid = foo.hasOwnProperty(\"bar\");\n ```\n\n ```js,expect_diagnostic\n var invalid = foo.isPrototypeOf(bar);\n ```\n\n ```js,expect_diagnostic\n var invalid = foo.propertyIsEnumerable(\"bar\");\n ```\n\n ## Valid\n\n ```js\n var valid = Object.hasOwn(foo, \"bar\");\n var valid = Object.prototype.isPrototypeOf.call(foo, bar);\n var valid = {}.propertyIsEnumerable.call(foo, \"bar\");\n ```\n\n" , }) , "noRedeclare" => Some (RuleMetadata {
 name : "noRedeclare" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow variable, function, class, and type redeclarations in the same scope.\n\n Source: https://typescript-eslint.io/rules/no-redeclare\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n var a = 3;\n var a = 10;\n ```\n\n ```js,expect_diagnostic\n let a = 3;\n let a = 10;\n ```\n\n ```js,expect_diagnostic\n function f() {}\n function f() {}\n ```\n\n ```js,expect_diagnostic\n class C {\n     static {\n         var c = 3;\n         var c = 10;\n     }\n }\n ```\n\n ```ts,expect_diagnostic\n type Person = { name: string; }\n class Person { name: string; }\n ```\n\n ### Valid\n\n ```js\n var a = 3;\n a = 10;\n ```\n\n ```ts\n class Foo {\n     bar(a: A);\n     bar(a: A, b: B);\n     bar(a: A, b: B) {}\n }\n ```\n" , }) , "noRedundantAlt" => Some (RuleMetadata {
 name : "noRedundantAlt" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce `img` alt prop does not contain the word \"image\", \"picture\", or \"photo\".\n\n The rule will first check if `aria-hidden` is truthy to determine whether to enforce the rule. If the image is\n hidden, then the rule will always succeed.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <img src=\"src\" alt=\"photo content\" />;\n ```\n\n ```jsx,expect_diagnostic\n <img alt={`picture doing ${things}`} {...this.props} />;\n ```\n\n ```jsx,expect_diagnostic\n <img alt=\"picture of cool person\" aria-hidden={false} />;\n ```\n\n ### Valid\n\n ```jsx\n <>\n \t<img src=\"src\" alt=\"alt\" />\n \t<img src=\"src\" alt={photo} />\n \t<img src=\"bar\" aria-hidden alt=\"Picture of me taking a photo of an image\" />\n </>\n ```\n\n" , }) , "noRedundantRoles" => Some (RuleMetadata {
 name : "noRedundantRoles" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforce explicit `role` property is not the same as implicit/default role property on an element.\n\n ESLint (eslint-plugin-jsx-a11y) Equivalent: [no-redundant-roles](https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/main/docs/rules/no-redundant-roles.md)\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <article role='article'></article>\n ```\n\n ```jsx,expect_diagnostic\n <button role='button'></button>\n ```\n\n ```jsx,expect_diagnostic\n <h1 role='heading' aria-level='1'>title</h1>\n ```\n\n ## Valid\n\n ```jsx\n <article role='presentation'></article>\n ```\n\n ```jsx\n <Button role='button'></Button>\n ```\n\n ```jsx\n <span></span>\n ```\n\n" , }) , "noRedundantUseStrict" => Some (RuleMetadata {
 name : "noRedundantUseStrict" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Prevents from having redundant `\"use strict\"`.\n\n ## Examples\n\n ### Invalid\n ```cjs,expect_diagnostic\n \"use strict\";\n function foo() {\n  \t\"use strict\";\n }\n ```\n ```cjs,expect_diagnostic\n \"use strict\";\n \"use strict\";\n\n function foo() {\n\n }\n ```\n ```cjs,expect_diagnostic\n function foo() {\n \"use strict\";\n \"use strict\";\n }\n ```\n ```cjs,expect_diagnostic\n class C1 {\n \ttest() {\n \t\t\"use strict\";\n \t}\n }\n ```\n ```cjs,expect_diagnostic\n const C2 = class {\n \ttest() {\n \t\t\"use strict\";\n \t}\n };\n\n ```\n ### Valid\n ```cjs\n function foo() {\n\n }\n```\n ```cjs\n  function foo() {\n     \"use strict\";\n }\n function bar() {\n     \"use strict\";\n }\n```\n\n" , }) , "noRenderReturnValue" => Some (RuleMetadata {
 name : "noRenderReturnValue" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Prevent the usage of the return value of `React.render`.\n\n > `ReactDOM.render()` currently returns a reference to the root `ReactComponent` instance. However, using this return value is legacy\n and should be avoided because future versions of React may render components asynchronously in some cases.\n If you need a reference to the root `ReactComponent` instance, the preferred solution is to attach a [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs)\n to the root element.\n\n Source: [ReactDOM documentation](https://facebook.github.io/react/docs/react-dom.html#render)\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n const foo = ReactDOM.render(<div />, document.body);\n ```\n\n ### Valid\n\n ```jsx\n ReactDOM.render(<div />, document.body);\n ```\n" , }) , "noRestrictedGlobals" => Some (RuleMetadata {
 name : "noRestrictedGlobals" , version : "1.0.0" , fix_kind : None , recommended : false , deprecated : None , docs : " This rule allows you to specify global variable names that you don’t want to use in your application.\n\n > Disallowing usage of specific global variables can be useful if you want to allow a set of\n global variables by enabling an environment, but still want to disallow some of those.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n console.log(event)\n ```\n\n ### Valid\n ```js\n function f(event) {\n     console.log(event)\n }\n ```\n ## Options\n\n Use the options to specify additional globals that you want to restrict in your\n source code.\n\n ```json\n {\n     \"//\": \"...\",\n     \"options\": {\n         \"deniedGlobals\": [\"$\", \"MooTools\"]\n     }\n }\n ```\n\n In the example above, the rule will emit a diagnostics if tried to use `$` or `MooTools` without\n creating a local variable.\n\n" , }) , "noSelfAssign" => Some (RuleMetadata {
 name : "noSelfAssign" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow assignments where both sides are exactly the same.\n\n Self assignments have no effect, so probably those are an error due to incomplete refactoring.\n\n Source: https://eslint.org/docs/latest/rules/no-self-assign\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n a = a;\n ```\n\n ```js,expect_diagnostic\n [a] = [a];\n ```\n\n ```js,expect_diagnostic\n ({a: b} = {a: b});\n ```\n\n ```js,expect_diagnostic\n a.b = a.b;\n ```\n\n ```js,expect_diagnostic\n a[b] = a[b];\n ```\n\n ```js,expect_diagnostic\n a[b].foo = a[b].foo;\n ```\n\n ```js,expect_diagnostic\n a['b'].foo = a['b'].foo;\n ```\n\n ## Valid\n\n ```js\n a &= a;\n var a = a;\n let a = a;\n const a = a;\n [a, b] = [b, a];\n ```\n\n" , }) , "noSelfCompare" => Some (RuleMetadata {
 name : "noSelfCompare" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow comparisons where both sides are exactly the same.\n\n > Comparing a variable against itself is usually an error, either a typo or refactoring error. It is confusing to the reader and may potentially introduce a runtime error.\n\n > The only time you would compare a variable against itself is when you are testing for `NaN`.\n However, it is far more appropriate to use `typeof x === 'number' && Number.isNaN(x)` for that use case rather than leaving the reader of the code to determine the intent of self comparison.\n\n Source: [no-self-compare](https://eslint.org/docs/latest/rules/no-self-compare).\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n if (x === x) {}\n ```\n\n ```js,expect_diagnostic\n if (a.b.c() !== a.b .c()) {}\n ```\n\n" , }) , "noSetterReturn" => Some (RuleMetadata {
 name : "noSetterReturn" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow returning a value from a setter\n\n While returning a value from a setter does not produce an error, the returned value is being ignored. Therefore, returning a value from a setter is either unnecessary or a possible error.\n\n Only returning without a value is allowed, as it’s a control flow statement.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n class A {\n     set foo(x) {\n         return x;\n     }\n }\n ```\n\n ```js,expect_diagnostic\n const b = {\n     set foo(x) {\n         return x;\n     },\n };\n ```\n\n ```js,expect_diagnostic\n const c = {\n     set foo(x) {\n         if (x) {\n             return x;\n         }\n     },\n };\n ```\n\n ### Valid\n\n ```js\n // early-return\n class A {\n     set foo(x) {\n         if (x) {\n             return;\n         }\n     }\n }\n ```\n\n ```js\n // not a setter\n class B {\n   set(x) {\n     return x;\n   }\n }\n ```\n" , }) , "noShadowRestrictedNames" => Some (RuleMetadata {
 name : "noShadowRestrictedNames" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow identifiers from shadowing restricted names.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n function NaN() {}\n ```\n\n ```js,expect_diagnostic\n let Set;\n ```\n\n ```js,expect_diagnostic\n try {\t} catch(Object) {}\n ```\n\n ```js,expect_diagnostic\n function Array() {}\n ```\n\n ```js,expect_diagnostic\n function test(JSON) {console.log(JSON)}\n ```\n" , }) , "noShoutyConstants" => Some (RuleMetadata {
 name : "noShoutyConstants" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : None , docs : " Disallow the use of constants which its value is the upper-case version of its name.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const FOO = \"FOO\";\n console.log(FOO);\n ```\n\n ### Valid\n\n ```js\n let FOO = \"FOO\";\n console.log(FOO);\n ```\n\n ```js\n export const FOO = \"FOO\";\n console.log(FOO);\n ```\n\n ```js\n function f(FOO = \"FOO\") {\n     return FOO;\n }\n ```\n\n" , }) , "noSparseArray" => Some (RuleMetadata {
 name : "noSparseArray" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow sparse arrays\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n [1,,2]\n ```\n" , }) , "noStaticOnlyClass" => Some (RuleMetadata {
 name : "noStaticOnlyClass" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " This rule reports when a class has no non-static members, such as for a class used exclusively as a static namespace.\n\n Users who come from a [OOP](https://en.wikipedia.org/wiki/Object-oriented_programming) paradigm may wrap their utility functions in an extra class,\n instead of putting them at the top level of an ECMAScript module. Doing so is generally unnecessary in JavaScript and TypeScript projects.\n\n - Wrapper classes add extra cognitive complexity to code without adding any structural improvements\n \t- Whatever would be put on them, such as utility functions, are already organized by virtue of being in a module.\n \t- As an alternative, you can import * as ... the module to get all of them in a single object.\n - IDEs can't provide as good suggestions for static class or namespace imported properties when you start typing property names\n - It's more difficult to statically analyze code for unused variables, etc. when they're all on the class (see: Finding dead code (and dead types) in TypeScript).\n\n Source: https://typescript-eslint.io/rules/no-extraneous-class\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n class X {\n   static foo = false;\n   static bar() {};\n }\n ```\n ```js,expect_diagnostic\n class StaticConstants {\n   static readonly version = 42;\n\n   static isProduction() {\n     return process.env.NODE_ENV === 'production';\n   }\n }\n ```\n\n ## Valid\n\n ```js\n const X = {\n   foo: false,\n   bar() {}\n };\n ```\n ```js\n export const version = 42;\n\n export function isProduction() {\n   return process.env.NODE_ENV === 'production';\n }\n\n function logHelloWorld() {\n   console.log('Hello, world!');\n }\n ```\n ```js\n class Empty {}\n ```\n\n ## Notes on Mutating Variables\n One case you need to be careful of is exporting mutable variables. While class properties can be mutated externally, exported variables are always constant. This means that importers can only ever read the first value they are assigned and cannot write to the variables.\n\n Needing to write to an exported variable is very rare and is generally considered a code smell. If you do need it you can accomplish it using getter and setter functions:\n ```js,expect_diagnostic\n export class Utilities {\n   static mutableCount = 1;\n   static incrementCount() {\n     Utilities.mutableCount += 1;\n   }\n }\n ```\n\n Do this instead:\n ```js\n let mutableCount = 1;\n\n export function getMutableCount() {\n   return mutableField;\n }\n\n export function incrementCount() {\n   mutableField += 1;\n }\n ```\n" , }) , "noStringCaseMismatch" => Some (RuleMetadata {
 name : "noStringCaseMismatch" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow comparison of expressions modifying the string case with non-compliant value.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n if (s.toUpperCase() === \"Abc\") {}\n ```\n\n ```js,expect_diagnostic\n while (s.toLowerCase() === \"Abc\") {}\n ```\n ### Valid\n\n ```js\n if (s.toUpperCase() === \"ABC\") {}\n while (s.toLowerCase() === \"abc\") {}\n for (;s.toLocaleLowerCase() === \"ABC\";) {}\n while (s.toLocaleUpperCase() === \"abc\") {}\n for (let s = \"abc\"; s === \"abc\"; s = s.toUpperCase()) {}\n ```\n" , }) , "noSuperWithoutExtends" => Some (RuleMetadata {
 name : "noSuperWithoutExtends" , version : "1.0.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Catch a `SyntaxError` when writing calling `super()` on a class that doesn't extends any class\n\n ## Examples\n\n ```js\n class A {\n ```\n" , }) , "noSvgWithoutTitle" => Some (RuleMetadata {
 name : "noSvgWithoutTitle" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforces the usage of the `title` element for the `svg` element.\n\n It is not possible to specify the `alt` attribute for the `svg` as for the `img`.\n To make svg accessible, the following methods are available:\n - provide the `title` element as the first child to `svg`\n - provide `role=\"img\"` and `aria-label` or `aria-labelledby` to `svg`\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n <svg>foo</svg>\n ```\n\n ```js,expect_diagnostic\n <svg>\n     <title></title>\n     <circle />\n </svg>\n ```\n\n ```js,expect_diagnostic\n <svg>foo</svg>\n ```\n\n ```js\n <svg role=\"img\" aria-label=\"\">\n     <span id=\"\">Pass</span>\n </svg>\n ```\n\n ## Valid\n\n ```js\n <svg>\n     <rect />\n     <rect />\n     <g>\n         <circle />\n         <circle />\n         <g>\n             <title>Pass</title>\n             <circle />\n             <circle />\n         </g>\n     </g>\n </svg>\n ```\n\n ```js\n <svg>\n     <title>Pass</title>\n     <circle />\n </svg>\n ```\n\n ```js\n <svg role=\"img\" aria-labelledby=\"title\">\n     <span id=\"title\">Pass</span>\n </svg>\n ```\n\n ```js\n <svg role=\"img\" aria-label=\"title\">\n     <span id=\"title\">Pass</span>\n </svg>\n ```\n\n ## Accessibility guidelines\n [Document Structure – SVG 1.1 (Second Edition)](https://www.w3.org/TR/SVG11/struct.html#DescriptionAndTitleElements)\n [ARIA: img role - Accessibility | MDN](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/img_role)\n [Accessible SVGs | CSS-Tricks - CSS-Tricks](https://css-tricks.com/accessible-svgs/)\n [Contextually Marking up accessible images and SVGs | scottohara.me](https://www.scottohara.me/blog/2019/05/22/contextual-images-svgs-and-a11y.html)\n\n" , }) , "noSwitchDeclarations" => Some (RuleMetadata {
 name : "noSwitchDeclarations" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow lexical declarations in `switch` clauses.\n\n Lexical declarations in `switch` clauses are accessible in the entire `switch`.\n However, it only gets initialized when it is assigned, which will only happen if the `switch` clause where it is defined is reached.\n\n To ensure that the lexical declarations only apply to the current `switch` clause wrap your declarations in a block.\n\n Source: https://eslint.org/docs/latest/rules/no-case-declarations\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n switch (foo) {\n     case 0:\n         const x = 1;\n         break;\n     case 2:\n         x; // `x` can be used while it is not initialized\n         break;\n }\n ```\n\n ```js,expect_diagnostic\n switch (foo) {\n     case 0:\n         function f() {}\n         break;\n     case 2:\n         f(); // `f` can be called here\n         break;\n }\n ```\n\n ```js,expect_diagnostic\n switch (foo) {\n     case 0:\n         class A {}\n         break;\n     default:\n         new A(); // `A` can be instantiated here\n         break;\n }\n ```\n\n ### Valid\n\n ```js\n switch (foo) {\n     case 0: {\n         const x = 1;\n         break;\n     }\n     case 1:\n         // `x` is not visible here\n         break;\n }\n ```\n\n" , }) , "noThisInStatic" => Some (RuleMetadata {
 name : "noThisInStatic" , version : "1.3.1" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow `this` and `super` in `static` contexts.\n\n In JavaScript, the `this` keyword in static contexts refers to the class (the constructor) instance,\n not an instance of the class. This can be confusing for developers coming from other languages where\n `this` typically refers to an instance of the class, not the class itself.\n\n Similarly, `super` in static contexts refers to the parent class, not an instance of the class.\n This can lead to unexpected behavior if not properly understood.\n\n This rule enforces the use of the class name itself to access static methods,\n which can make the code clearer and less prone to errors. It helps to prevent\n misunderstandings and bugs that can arise from the unique behavior of `this` and `super` in static contexts.\n\n Source: https://github.com/mysticatea/eslint-plugin/blob/master/docs/rules/no-this-in-static.md\n\n ## Example\n\n ### Invalid\n\n ```js,expect_diagnostic\n  class A {\n     static CONSTANT = 0;\n\n     static foo() {\n         this.CONSTANT;\n     }\n  }\n ```\n\n ```js,expect_diagnostic\n  class B extends A {\n     static bar() {\n         super.CONSTANT;\n     }\n  }\n ```\n\n ### Valid\n\n ```js\n class B extends A {\n     static ANOTHER_CONSTANT = A.CONSTANT + 1;\n\n     static foo() {\n         A.CONSTANT;\n         B.ANOTHER_CONSTANT;\n     }\n\n     bar() {\n         this.property;\n     }\n }\n ```\n\n ```js\n class A {\n    static foo() {\n        doSomething()\n    }\n\n    bar() {\n      A.foo()\n    }\n }\n ```\n\n" , }) , "noUndeclaredVariables" => Some (RuleMetadata {
 name : "noUndeclaredVariables" , version : "1.0.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Prevents the usage of variables that haven't been declared inside the document.\n\n If you need to allow-list some global bindings, you can use the [`javascript.globals`](/reference/configuration/#javascriptglobals) configuration.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n foobar;\n ```\n\n ```js,expect_diagnostic\n // throw diagnostic for JavaScript files\n PromiseLike;\n ```\n ### Valid\n\n ```ts\n type B<T> = PromiseLike<T>\n ```\n" , }) , "noUnnecessaryContinue" => Some (RuleMetadata {
 name : "noUnnecessaryContinue" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Avoid using unnecessary `continue`.\n\n ## Examples\n\n ### Invalid\n ```js,expect_diagnostic\n loop: for (let i = 0; i < 5; i++) {\n   continue loop;\n }\n ```\n ```js,expect_diagnostic\n while (i--) {\n   continue;\n }\n ```\n ```js,expect_diagnostic\n while (1) {\n   continue;\n }\n ```\n ```js,expect_diagnostic\n for (let i = 0; i < 10; i++) {\n   if (i > 5) {\n     console.log(\"foo\");\n     continue;\n   } else if (i >= 5 && i < 8) {\n     console.log(\"test\");\n   } else {\n     console.log(\"test\");\n   }\n }\n ```\n ```js,expect_diagnostic\n for (let i = 0; i < 9; i++) {\n   continue;\n }\n ```\n\n ```js, expect_diagnostic\n test2: do {\n \tcontinue test2;\n } while (true);\n ```\n\n ### Valid\n ```js\n while (i) {\n   if (i > 5) {\n     continue;\n   }\n   console.log(i);\n   i--;\n }\n\n loop: while (1) {\n   forLoop: for (let i = 0; i < 5; i++) {\n     if (someCondition) {\n       continue loop;\n     }\n   }\n }\n ```\n" , }) , "noUnreachable" => Some (RuleMetadata {
 name : "noUnreachable" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow unreachable code\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n function example() {\n     return;\n     neverCalled();\n }\n ```\n\n ```js,expect_diagnostic\n function example() {\n     for(let i = 0; i < 10; ++i) {\n         break;\n     }\n }\n ```\n\n ```js,expect_diagnostic\n function example() {\n     for(const key in value) {\n         continue;\n         neverCalled();\n     }\n }\n ```\n" , }) , "noUnreachableSuper" => Some (RuleMetadata {
 name : "noUnreachableSuper" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Ensures the `super()` constructor is called exactly once on every code  path in a class constructor before `this` is accessed if the class has a superclass\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n class A extends B {\n     constructor() {}\n }\n ```\n\n ```js,expect_diagnostic\n class A extends B {\n     constructor(value) {\n         this.prop = value;\n         super();\n     }\n }\n ```\n\n ```js,expect_diagnostic\n class A extends B {\n     constructor(cond) {\n         if(cond) {\n             super();\n         }\n     }\n }\n ```\n\n ### Valid\n\n ```js\n export default class A extends B {\n     constructor() {\n         super();\n     }\n }\n ```\n\n ```js\n export class A {\n     constructor() {}\n }\n ```\n\n" , }) , "noUnsafeDeclarationMerging" => Some (RuleMetadata {
 name : "noUnsafeDeclarationMerging" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow unsafe declaration merging between interfaces and classes.\n\n _TypeScript_'s [declaration merging](https://www.typescriptlang.org/docs/handbook/declaration-merging.html) supports merging separate declarations with the same name.\n\n _Declaration merging_ between classes and interfaces is unsafe.\n The _TypeScript Compiler_ doesn't check whether properties defined in the interface are initialized in the class.\n This can cause lead to _TypeScript_ not detecting code that will cause runtime errors.\n\n Source: https://typescript-eslint.io/rules/no-unsafe-declaration-merging/\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n interface Foo {\n     f(): void\n }\n\n class Foo {}\n\n const foo = new Foo();\n foo.f(); // Runtime Error: Cannot read properties of undefined.\n ```\n\n ## Valid\n\n ```ts\n interface Foo {}\n class Bar implements Foo {}\n ```\n\n ```ts\n namespace Baz {}\n namespace Baz {}\n enum Baz {}\n ```\n" , }) , "noUnsafeFinally" => Some (RuleMetadata {
 name : "noUnsafeFinally" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow control flow statements in finally blocks.\n\n JavaScript suspends the control flow statements of `try` and `catch` blocks until\n the execution of finally block finishes. So, when `return`, `throw`, `break` or `continue`\n is used in finally, control flow statements inside `try` and `catch` are overwritten,\n which is considered as unexpected behavior.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n (() => {\n     try {\n         return 1; // 1 is returned but suspended until finally block ends\n     } catch(err) {\n         return 2;\n     } finally {\n         return 3; // 3 is returned before 1, which we did not expect\n     }\n })();\n ```\n\n ```js,expect_diagnostic\n (() => {\n     try {\n         throw new Error(\"Try\"); // error is thrown but suspended until finally block ends\n     } finally {\n         return 3; // 3 is returned before the error is thrown, which we did not expect\n     }\n })();\n ```\n\n ```js,expect_diagnostic\n (() => {\n     try {\n         throw new Error(\"Try\")\n     } catch(err) {\n         throw err; // The error thrown from try block is caught and re-thrown\n     } finally {\n         throw new Error(\"Finally\"); // Finally(...) is thrown, which we did not expect\n     }\n })();\n ```\n\n ```js,expect_diagnostic\n (() => {\n     label: try {\n       return 0; // 0 is returned but suspended until finally block ends\n     } finally {\n       break label; // It breaks out the try-finally block, before 0 is returned.\n     }\n     return 1;\n })();\n ```\n\n ```js,expect_diagnostic\n function a() {\n   switch (condition) {\n     case 'a': {\n       try {\n         console.log('a');\n         return;\n       } finally {\n         break;\n       }\n     }\n     case 'b': {\n       console.log('b');\n     }\n   }\n }\n```\n\n ### Valid\n\n ```js\n let foo = function() {\n     try {\n         return 1;\n     } catch(err) {\n         return 2;\n     } finally {\n         console.log(\"hola!\");\n     }\n };\n ```\n\n ```js\n let foo = function() {\n     try {\n         return 1;\n     } catch(err) {\n         return 2;\n     } finally {\n         let a = function() {\n             return \"hola!\";\n         }\n     }\n };\n ```\n\n ```js\n let foo = function(a) {\n     try {\n         return 1;\n     } catch(err) {\n         return 2;\n     } finally {\n         switch(a) {\n             case 1: {\n                 console.log(\"hola!\")\n                 break;\n             }\n         }\n     }\n };\n ```\n\n" , }) , "noUnsafeNegation" => Some (RuleMetadata {
 name : "noUnsafeNegation" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow using unsafe negation.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n !1 in [1,2];\n ```\n\n ```js,expect_diagnostic\n /**test*/!/** test*/1 instanceof [1,2];\n ```\n\n ### Valid\n ```js\n -1 in [1,2];\n ~1 in [1,2];\n typeof 1 in [1,2];\n void 1 in [1,2];\n delete 1 in [1,2];\n +1 instanceof [1,2];\n ```\n" , }) , "noUnsafeOptionalChaining" => Some (RuleMetadata {
 name : "noUnsafeOptionalChaining" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow the use of optional chaining in contexts where the undefined value is not allowed.\n\n The optional chaining (?.) expression can short-circuit with a return value of undefined.\n Therefore, treating an evaluated optional chaining expression as a function, object, number, etc., can cause TypeError or unexpected results.\n Also, parentheses limit the scope of short-circuiting in chains.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n 1 in obj?.foo;\n ```\n\n ```cjs,expect_diagnostic\n with (obj?.foo);\n ```\n\n ```js,expect_diagnostic\n for (bar of obj?.foo);\n ```\n\n ```js,expect_diagnostic\n bar instanceof obj?.foo;\n ```\n\n ```js,expect_diagnostic\n const { bar } = obj?.foo;\n ```\n\n ```js,expect_diagnostic\n (obj?.foo)();\n ```\n\n ```js,expect_diagnostic\n (baz?.bar).foo;\n ```\n\n ## Valid\n\n ```js\n (obj?.foo)?.();\n obj?.foo();\n (obj?.foo ?? bar)();\n obj?.foo.bar;\n obj.foo?.bar;\n foo?.()?.bar;\n ```\n\n" , }) , "noUnusedImports" => Some (RuleMetadata {
 name : "noUnusedImports" , version : "1.3.0" , fix_kind : Some (FixKind :: Safe) , recommended : false , deprecated : None , docs : " Disallow unused imports.\n\n Unused imports might be the result of an incomplete refactoring.\n The code fix can remove comments associated with an `import`.\n See the last invalid example.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n import A from 'mod';\n ```\n\n ```js,expect_diagnostic\n import * as A from 'mod';\n ```\n\n ```ts,expect_diagnostic\n import { type A, B } from 'mod';\n\n export { B }\n ```\n\n ```js,expect_diagnostic\n // Header comment\n import /*inner comment */ A from 'mod'; // Associated comment\n\n // Another header comment\n import {\n     // A's header comment\n     type A, // A's comment\n     // B's header comment\n     B,\n } from 'mod';\n\n export { B }\n ```\n\n ## Valid\n\n ```ts\n import { A, type B } from 'mod';\n\n function f(arg: B): A {\n     return new A(arg);\n }\n ```\n" , }) , "noUnusedLabels" => Some (RuleMetadata {
 name : "noUnusedLabels" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow unused labels.\n\n Labels that are declared and never used are most likely an error due to incomplete refactoring.\n\n Source: https://eslint.org/docs/latest/rules/no-unused-labels\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n LOOP: for (const x of xs) {\n     if (x > 0) {\n         break;\n     }\n     f(x);\n }\n ```\n\n ### Valid\n\n ```js\n LOOP: for (const x of xs) {\n     if (x > 0) {\n         break LOOP;\n     }\n     f(x);\n }\n ```\n\n ```js\n function nonNegative(n) {\n     DEV: assert(n >= 0);\n     return n;\n }\n ```\n" , }) , "noUnusedPrivateClassMembers" => Some (RuleMetadata {
 name : "noUnusedPrivateClassMembers" , version : "1.3.3" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : None , docs : " Disallow unused private class members\n\n Private class members that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring.\n Such class members take up space in the code and can lead to confusion by readers.\n\n Source: https://eslint.org/docs/latest/rules/no-unused-private-class-members/\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n class OnlyWrite {\n   #usedOnlyInWrite = 5;\n\n   method() {\n\t    this.#usedOnlyInWrite = 212;\n   }\n }\n ```\n\n ```ts,expect_diagnostic\n  class TsBioo {\n    private unusedProperty = 5;\n  }\n ```\n\n ```ts,expect_diagnostic\n  class TsBioo {\n    private unusedMethod() {}\n  }\n ```\n\n ## Valid\n\n ```js\n class UsedMember {\n   #usedMember = 42;\n\n   method() {\n\t    return this.#usedMember;\n   }\n }\n ```\n\n" , }) , "noUnusedTemplateLiteral" => Some (RuleMetadata {
 name : "noUnusedTemplateLiteral" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow template literals if interpolation and special-character handling are not needed\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const foo = `bar`\n ```\n\n ```js,expect_diagnostic\n const foo = `bar `\n ```\n\n ### Valid\n\n ```js\n const foo = `bar\n has newline`;\n ```\n\n ```js\n const foo = `\"bar\"`\n ```\n\n ```js\n const foo = `'bar'`\n ```\n" , }) , "noUnusedVariables" => Some (RuleMetadata {
 name : "noUnusedVariables" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : None , docs : " Disallow unused variables.\n\n There are two exceptions to this rule:\n 1. variables that starts with underscore, ex: `let _something;`\n 2. the `React` variable;\n\n The pattern of having an underscore as prefix of a name of variable is a very diffuse\n pattern among programmers, and Biome decided to follow it.\n\n Importing the `React` variable was a mandatory pattern until some time ago:\n\n For the time being this rule will ignore it, but this **might change in the future releases**.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n let a = 4;\n a++;\n ```\n\n ```js,expect_diagnostic\n function foo() {}\n ```\n\n ```js,expect_diagnostic\n export function foo(myVar) {\n     console.log('foo');\n }\n ```\n\n ```js,expect_diagnostic\n function foo() {\n     foo();\n }\n ```\n\n ```js,expect_diagnostic\n const foo = () => {\n     foo();\n };\n ```\n\n ```ts,expect_diagnostic\n export function f<T>() {}\n ```\n\n # Valid\n\n ```js\n function foo(b) {\n     console.log(b)\n };\n foo();\n ```\n\n ```js\n export function foo(_unused) {}\n ```\n\n ```jsx\n import React from 'react';\n function foo() {\n     return <div />;\n };\n foo();\n ```\n\n ```ts\n function used_overloaded(): number;\n function used_overloaded(s: string): string;\n function used_overloaded(s?: string) {\n     return s;\n }\n used_overloaded();\n ```\n" , }) , "noUselessCatch" => Some (RuleMetadata {
 name : "noUselessCatch" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow unnecessary `catch` clauses.\n\n A `catch` clause that only rethrows the original error is redundant,\n and has no effect on the runtime behavior of the program.\n These redundant clauses can be a source of confusion and code bloat,\n so it’s better to disallow these unnecessary `catch` clauses.\n\n Source: https://eslint.org/docs/latest/rules/no-useless-catch\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n try {\n     doSomething();\n } catch(e) {\n     throw e;\n }\n ```\n ```js,expect_diagnostic\n try {\n     doSomething();\n } catch(e) {\n     throw e;\n } finally {\n     doCleanUp();\n }\n ```\n ## Valid\n\n ```js\n try {\n     doSomething();\n } catch(e) {\n     doSomethingWhenCatch();\n     throw e;\n }\n ```\n\n ```js\n try {\n     doSomething();\n } catch(e) {\n     handleError(e);\n }\n ```\n\n" , }) , "noUselessConstructor" => Some (RuleMetadata {
 name : "noUselessConstructor" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow unnecessary constructors.\n\n _ES2015_ provides a default class constructor if one is not specified.\n As such, providing an empty constructor or one that delegates into its parent is unnecessary.\n\n The rule ignores:\n\n - decorated classes;\n - constructors with at least one [parameter property](https://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties);\n - `private` and `protected` constructors.\n\n Source: https://typescript-eslint.io/rules/no-useless-constructor\n\n ## Caveat\n\n This rule reports on constructors whose sole purpose is to make a parent constructor public.\n See the last invalid example.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n class A {\n     constructor (a) {}\n }\n ```\n\n ```ts,expect_diagnostic\n class B extends A {\n     constructor (a) {\n         super(a);\n     }\n }\n ```\n\n ```js,expect_diagnostic\n class C {\n     /**\n      * Documented constructor.\n      */\n     constructor () {}\n }\n ```\n\n ```js,expect_diagnostic\n class A {\n     protected constructor() {\n         this.prop = 1;\n     }\n }\n\n class B extends A {\n     // Make the parent constructor public.\n     constructor () {\n         super();\n     }\n }\n ```\n\n ## Valid\n\n ```js\n class A {\n     constructor (prop) {\n         this.prop = prop;\n     }\n }\n ```\n\n ```js\n class B extends A {\n     constructor () {\n         super(5);\n     }\n }\n ```\n\n ```ts\n class C {\n     // Empty constructor with parameter properties are allowed.\n     constructor (private prop: number) {}\n }\n ```\n\n ```ts\n @Decorator\n class C {\n     constructor (prop: number) {}\n }\n ```\n" , }) , "noUselessElse" => Some (RuleMetadata {
 name : "noUselessElse" , version : "1.3.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow `else` block when the `if` block breaks early.\n\n If an `if` block breaks early using a breaking statement (`return`, `break`, `continue`, or `throw`),\n then the `else` block becomes useless.\n Its contents can be placed outside of the block.\n\n If an `if` block breaks early using a breaking statement (`return`, `break`, `continue`, or `throw`),\n then the `else` block becomes unnecessary.\n This is because the content of the `else` block will never be executed in conjunction with the `if` block,\n as the breaking statement ensures the control flow exits the `if` block immediately.\n Therefore, the `else` block is redundant, and its content can be placed outside of the block,\n reducing the indentation level by one.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n while (x > 0) {\n     if (f(x)) {\n         break;\n     } else {\n         x++\n     }\n }\n ```\n\n ```js,expect_diagnostic\n function f(x) {\n     if (x < 0) {\n         return 0;\n     } else {\n         return x;\n     }\n }\n ```\n\n ```js,expect_diagnostic\n function f(x) {\n     if (x < 0) {\n         throw new RangeError();\n     } else {\n         return x;\n     }\n }\n ```\n\n ## Valid\n\n ```js\n function f(x) {\n     if (x < 0) {\n         return 0;\n     }\n     return x;\n }\n ```\n\n ```js\n function f(x) {\n     if (x < 0) {\n         console.info(\"negative number\");\n     } else if (x > 0) {\n         return x;\n     } else {\n         console.info(\"number 0\");\n     }\n }\n ```\n" , }) , "noUselessEmptyExport" => Some (RuleMetadata {
 name : "noUselessEmptyExport" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Disallow empty exports that don't change anything in a module file.\n\n An empty `export {}` is sometimes useful to turn a file that would otherwise be a script into a module.\n Per the [TypeScript Handbook Modules page](https://www.typescriptlang.org/docs/handbook/modules.html):\n\n > In TypeScript, just as in ECMAScript 2015,\n > any file containing a top-level import or export is considered a module.\n > Conversely, a file without any top-level import or export declarations is treated as a script\n > whose contents are available in the global scope.\n\n However, an `export {}` statement does nothing if there are any other top-level import or export in the file.\n\n Source: https://typescript-eslint.io/rules/no-useless-empty-export/\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n import { A } from \"module\";\n export {};\n ```\n\n ```js,expect_diagnostic\n export const A = 0;\n export {};\n ```\n\n ## Valid\n\n ```js\n export {};\n ```\n\n" , }) , "noUselessFragments" => Some (RuleMetadata {
 name : "noUselessFragments" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow unnecessary fragments\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <>\n foo\n </>\n ```\n\n ```jsx,expect_diagnostic\n <React.Fragment>\n foo\n </React.Fragment>\n ```\n\n ```jsx,expect_diagnostic\n <>\n     <>foo</>\n     <SomeComponent />\n </>\n ```\n\n ```jsx,expect_diagnostic\n <></>\n ```\n" , }) , "noUselessLabel" => Some (RuleMetadata {
 name : "noUselessLabel" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Disallow unnecessary labels.\n\n If a loop contains no nested loops or switches, labeling the loop is unnecessary.\n\n Source: https://eslint.org/docs/latest/rules/no-extra-label\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n loop: while(a) {\n     break loop;\n }\n ```\n\n ### Valid\n\n ```js\n outer: while(a) {\n     while(b) {\n         break outer;\n     }\n }\n ```\n\n" , }) , "noUselessLoneBlockStatements" => Some (RuleMetadata {
 name : "noUselessLoneBlockStatements" , version : "1.3.3" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : None , docs : " Disallow unnecessary nested block statements.\n\n > In JavaScript, prior to ES6, standalone code blocks delimited by curly braces do not create a new scope and have no use.\n > In ES6, code blocks may create a new scope if a block-level binding (let and const), a class declaration or a function declaration (in strict mode) are present. A block is not considered redundant in these cases.\n\n Source: https://eslint.org/docs/latest/rules/no-lone-blocks\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n {}\n ```\n\n ```js,expect_diagnostic\n if (foo) {\n   bar();\n   {\n     baz();\n   }\n }\n ```\n\n ## Valid\n\n ```js\n while (foo) {\n   bar();\n }\n ```\n\n" , }) , "noUselessRename" => Some (RuleMetadata {
 name : "noUselessRename" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Disallow renaming import, export, and destructured assignments to the same name.\n\n ES2015 allows for the renaming of references in import and export statements as well as destructuring assignments.\n This gives programmers a concise syntax for performing these operations while renaming these references:\n\n ```js\n import { foo as bar } from \"baz\";\n export { foo as bar };\n let { foo: bar } = baz;\n ```\n\n With this syntax, it is possible to rename a reference to the same name.\n This is a completely redundant operation, as this is the same as not renaming at all.\n\n Source: https://eslint.org/docs/latest/rules/no-useless-rename\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n import { foo as foo } from \"bar\";\n ```\n\n ```js,expect_diagnostic\n export { foo as foo };\n ```\n\n ```js,expect_diagnostic\n let { foo: foo } = bar;\n ```\n\n ### Valid\n\n ```js\n import { foo as bar } from \"baz\";\n ```\n\n ```js\n export { foo as bar };\n ```\n\n ```js\n let { foo: bar } = baz;\n ```\n\n" , }) , "noUselessSwitchCase" => Some (RuleMetadata {
 name : "noUselessSwitchCase" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow useless `case` in `switch` statements.\n\n A `switch` statement can optionally have a `default` clause.\n\n The `default` clause will be still executed only if there is no match in the `case` clauses.\n An empty `case` clause that precedes the `default` clause is thus useless.\n\n Source: https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-useless-switch-case.md\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n switch (foo) {\n     case 0:\n     default:\n         break;\n     case 1:\n         break;\n }\n ```\n\n ```js,expect_diagnostic\n switch (foo) {\n     default:\n     case 0:\n         break;\n     case 1:\n         break;\n }\n ```\n\n ### Valid\n\n ```js\n switch (foo) {\n     case 0:\n         break;\n     default:\n         break;\n }\n ```\n\n ```js\n switch (foo) {\n     case 0:\n         break;\n }\n ```\n\n" , }) , "noUselessThisAlias" => Some (RuleMetadata {
 name : "noUselessThisAlias" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Disallow useless `this` aliasing.\n\n Arrow functions inherits `this` from their enclosing scope;\n this makes `this` aliasing useless in this situation.\n\n Credits: https://typescript-eslint.io/rules/no-this-alias/\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n class A {\n     method() {\n         const self = this;\n         return () => {\n             return self;\n         }\n     }\n }\n ```\n\n ## Valid\n\n ```js\n class A {\n     method() {\n         const self = this;\n         return function() {\n             this.g();\n             return self;\n         }\n     }\n }\n ```\n\n" , }) , "noUselessTypeConstraint" => Some (RuleMetadata {
 name : "noUselessTypeConstraint" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Disallow using `any` or `unknown` as type constraint.\n\n Generic type parameters (`<T>`) in TypeScript may be **constrained** with [`extends`](https://www.typescriptlang.org/docs/handbook/generics.html#generic-constraints).\n A supplied type must then be a subtype of the supplied constraint.\n All types are subtypes of `any` and `unknown`.\n It is thus useless to extend from `any` or `unknown`.\n\n Source: https://typescript-eslint.io/rules/no-unnecessary-type-constraint/\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n interface FooAny<T extends any> {}\n ```\n ```ts,expect_diagnostic\n type BarAny<T extends any> = {};\n ```\n ```ts,expect_diagnostic\n class BazAny<T extends any> {\n }\n ```\n ```ts,expect_diagnostic\n class BazAny {\n   quxAny<U extends any>() {}\n }\n ```\n ```ts,expect_diagnostic\n const QuuxAny = <T extends any>() => {};\n ```\n ```ts,expect_diagnostic\n function QuuzAny<T extends any>() {}\n ```\n\n ```ts,expect_diagnostic\n interface FooUnknown<T extends unknown> {}\n ```\n ```ts,expect_diagnostic\n type BarUnknown<T extends unknown> = {};\n ```\n ```ts,expect_diagnostic\n class BazUnknown<T extends unknown> {\n }\n ```ts,expect_diagnostic\n class BazUnknown {\n   quxUnknown<U extends unknown>() {}\n }\n ```\n ```ts,expect_diagnostic\n const QuuxUnknown = <T extends unknown>() => {};\n ```\n ```ts,expect_diagnostic\n function QuuzUnknown<T extends unknown>() {}\n ```\n\n ### Valid\n\n ```ts\n interface Foo<T> {}\n\n type Bar<T> = {};\n```\n" , }) , "noVar" => Some (RuleMetadata {
 name : "noVar" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow the use of `var`\n\n ECMAScript 6 allows programmers to create variables with block scope instead of function scope using the let and const keywords.\n\n Block scope is common in many other programming languages and helps programmers avoid mistakes.\n\n Source: https://eslint.org/docs/latest/rules/no-var\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n var foo = 1;\n ```\n\n ### Valid\n\n ```js\n const foo = 1;\n let bar = 1;\n```\n" , }) , "noVoid" => Some (RuleMetadata {
 name : "noVoid" , version : "1.0.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Disallow the use of `void` operators, which is not a familiar operator.\n\n > The `void` operator is often used merely to obtain the undefined primitive value,\n > usually using `void(0)` (which is equivalent to `void 0`). In these cases, the global variable `undefined` can be used.\n\n Source: https://eslint.org/docs/latest/rules/no-void\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n void 0;\n ```\n\n" , }) , "noVoidElementsWithChildren" => Some (RuleMetadata {
 name : "noVoidElementsWithChildren" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " This rules prevents void elements (AKA self-closing elements) from having children.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <br>invalid child</br>\n ```\n\n ```jsx,expect_diagnostic\n <img alt=\"some text\" children={\"some child\"} />\n ```\n\n ```js,expect_diagnostic\n React.createElement('img', {}, 'child')\n ```\n" , }) , "noVoidTypeReturn" => Some (RuleMetadata {
 name : "noVoidTypeReturn" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow returning a value from a function with the return type 'void'\n\n 'void' signals the absence of value. The returned value is likely to be ignored by the caller.\n Thus, returning a value when the return type of function is 'void', is undoubtedly an error.\n\n Only returning without a value is allowed, as it’s a control flow statement.\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n class A {\n     f(): void {\n         return undefined;\n     }\n }\n ```\n\n ```ts,expect_diagnostic\n const a = {\n     f(): void {\n         return undefined;\n     }\n }\n ```\n\n ```ts,expect_diagnostic\n function f(): void {\n     return undefined;\n }\n ```\n\n ```ts,expect_diagnostic\n export default function(): void {\n     return undefined;\n }\n ```\n\n ```ts,expect_diagnostic\n const g = (): void => {\n     return undefined;\n };\n ```\n\n ```ts,expect_diagnostic\n const h = function(): void {\n     return undefined;\n };\n ```\n\n ### Valid\n\n ```js\n class A {\n     f() {\n         return undefined;\n     }\n }\n ```\n\n ```ts\n class B {\n     f(): void {}\n }\n ```\n\n ```ts\n function f(): void {\n     return;\n }\n ```\n\n" , }) , "noWith" => Some (RuleMetadata {
 name : "noWith" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Disallow `with` statements in non-strict contexts.\n\n The `with` statement is potentially problematic because it adds members of an object to the current\n scope, making it impossible to tell what a variable inside the block actually refers to.\n\n ## Examples\n\n ### Invalid\n\n ```cjs,expect_diagnostic\n function f() {\n   with (point) {\n     r = Math.sqrt(x * x + y * y); // is r a member of point?\n   }\n }\n ```\n" , }) , "organizeImports" => Some (RuleMetadata {
 name : "organizeImports" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : None , docs : " Provides a whole-source code action to sort the imports in the file\n using import groups and natural ordering.\n\n ## Examples\n\n ```js\n import React, {\n     FC,\n     useEffect,\n     useRef,\n     ChangeEvent,\n     KeyboardEvent,\n } from 'react';\n import { logger } from '@core/logger';\n import { reduce, debounce } from 'lodash';\n import { Message } from '../Message';\n import { createServer } from '@server/node';\n import { Alert } from '@ui/Alert';\n import { repeat, filter, add } from '../utils';\n import { initializeApp } from '@core/app';\n import { Popup } from '@ui/Popup';\n import { createConnection } from '@server/database';\n ```\n" , }) , "useAltText" => Some (RuleMetadata {
 name : "useAltText" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce that all elements that require alternative text have meaningful information to relay back to the end user.\n\n This is a critical component of accessibility for screen reader users in order for them to understand the content's purpose on the page.\n By default, this rule checks for alternative text on the following elements: `<img>`, `<area>`, `<input type=\"image\">`, and `<object>`.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <img src=\"image.png\" />\n ```\n\n ```jsx,expect_diagnostic\n <input type=\"image\" src=\"image.png\" />\n ```\n\n ### Valid\n\n ```jsx\n <img src=\"image.png\" alt=\"image alt\" />\n ```\n\n ```jsx\n <input type=\"image\" src=\"image.png\" alt=\"alt text\" />\n ```\n\n ```jsx\n <input type=\"image\" src=\"image.png\" aria-label=\"alt text\" />\n ```\n\n ```jsx\n <input type=\"image\" src=\"image.png\" aria-labelledby=\"someId\" />\n ```\n\n ## Accessibility guidelines\n\n - [WCAG 1.1.1](https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html)\n\n" , }) , "useAnchorContent" => Some (RuleMetadata {
 name : "useAnchorContent" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforce that anchors have content and that the content is accessible to screen readers.\n\n Accessible means the content is not hidden using the `aria-hidden` attribute.\n Refer to the references to learn about why this is important.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <a />\n ```\n\n ```jsx,expect_diagnostic\n <a></a>\n ```\n\n ```jsx,expect_diagnostic\n <a>    </a>\n ```\n\n ```jsx,expect_diagnostic\n <a aria-hidden>content</a>\n ```\n\n ```jsx,expect_diagnostic\n <a><span aria-hidden=\"true\">content</span></a>\n ```\n\n ## Valid\n\n ```jsx\n <a>content</a>\n ```\n\n ```jsx\n function html() {\n     return { __html: \"foo\" }\n }\n <a dangerouslySetInnerHTML={html()} />\n ```\n\n ```jsx\n <a><TextWrapper aria-hidden={true} />content</a>\n ```\n\n ```jsx\n <a><div aria-hidden=\"true\"></div>content</a>\n ```\n\n ## Accessibility guidelines\n\n - [WCAG 2.4.4](https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-in-context)\n - [WCAG 4.1.2](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)\n\n" , }) , "useAriaActivedescendantWithTabindex" => Some (RuleMetadata {
 name : "useAriaActivedescendantWithTabindex" , version : "1.3.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforce that `tabIndex` is assigned to non-interactive HTML elements with `aria-activedescendant`.\n\n `aria-activedescendant` is used to manage to focus within a [composite widget](https://www.w3.org/TR/wai-aria/#composite).\n The element with the attribute `aria-activedescendant` retains the active document focus.\n\n It indicates which of its child elements has a secondary focus by assigning the ID of that\n element to the value of `aria-activedescendant`. This pattern is used to build a widget\n like a search typeahead select list. The search input box retains document focus\n so that the user can type in the input. If the down arrow key is pressed and\n a search suggestion is highlighted, the ID of the suggestion element will be applied\n as the value of `aria-activedescendant` on the input element.\n\n Because an element with `aria-activedescendant` must be tabbable,\n it must either have an inherent tabIndex of zero or declare a tabIndex attribute.\n\n Source: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/aria-activedescendant-has-tabindex.md\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <div aria-activedescendant={someID} />\n ```\n\n ## Valid\n\n ```jsx\n <div aria-activedescendant={someID} tabIndex={0} />\n ```\n\n ```jsx\n <input aria-activedescendant={someID} />\n ```\n\n" , }) , "useAriaPropsForRole" => Some (RuleMetadata {
 name : "useAriaPropsForRole" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce that elements with ARIA roles must have all required ARIA attributes for that role.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <span role=\"checkbox\"></span>\n ```\n\n ```jsx,expect_diagnostic\n <span role=\"heading\"></span>\n ```\n\n ### Valid\n\n ```jsx\n <span role=\"checkbox\" aria-checked=\"true\"></span>\n ```\n\n ```jsx\n <span role=\"heading\" aria-level=\"1\"></span>\n ```\n\n\n ## Accessibility guidelines\n - [WCAG 4.1.2](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)\n\n ### Resources\n - [ARIA Spec, Roles](https://www.w3.org/TR/wai-aria/#roles)\n - [Chrome Audit Rules, AX_ARIA_03](https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#ax_aria_03)\n" , }) , "useArrowFunction" => Some (RuleMetadata {
 name : "useArrowFunction" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Use arrow functions over function expressions.\n\n An arrow function expression is a compact alternative to a regular function expression,\n with an important distinction:\n `this` is not bound to the arrow function. It inherits `this` from its parent scope.\n\n This rule proposes turning all function expressions that are not generators (`function*`) and don't use `this` into arrow functions.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const z = function() {\n     return 0;\n }\n ```\n\n ```js,expect_diagnostic\n const delegatedFetch = async function(url) {\n     return await fetch(url);\n }\n ```\n\n ## Valid\n\n ```js\n const f = function() {\n     return this.prop;\n }\n ```\n\n Named function expressions are ignored:\n\n ```js\n const z = function z() {\n     return 0;\n }\n ```\n\n Function expressions that declare the type of `this` are  also ignored:\n\n ```ts\n const z = function(this: A): number {\n     return 0;\n }\n ```\n" , }) , "useAsConstAssertion" => Some (RuleMetadata {
 name : "useAsConstAssertion" , version : "1.3.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Enforce the use of `as const` over literal type and type annotation.\n\n In TypeScript, there are three common ways to specify that a value is of a specific type such as `2` and not a general type such as `number`:\n\n 1. `as const`: telling TypeScript to infer the literal type automatically\n 2. `as <literal>`: explicitly telling the literal type to TypeScript\n 3. type annotation: explicitly telling the literal type to TypeScript when declare variables\n\n The rule suggests to use `as const` when you're using `as` with a literal type or type annotation, since `as const` is simpler and doesn't require retyping the value.\n\n Source: https://typescript-eslint.io/rules/prefer-as-const/\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n let bar: 2 = 2;\n ```\n\n ```ts,expect_diagnostic\n let foo = { bar: 'baz' as 'baz' };\n ```\n\n ## Valid\n\n ```ts\n let foo = 'bar';\n let foo = 'bar' as const;\n let foo: 'bar' = 'bar' as const;\n let bar = 'bar' as string;\n let foo = { bar: 'baz' };\n ```\n" , }) , "useAwait" => Some (RuleMetadata {
 name : "useAwait" , version : "1.4.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Ensure `async` functions utilize `await`.\n\n This rule reports `async` functions that lack an `await` expression. As `async`\n functions return a promise, the use of `await` is often necessary to capture the\n resolved value and handle the asynchronous operation appropriately. Without `await`,\n the function operates synchronously and might not leverage the advantages of async\n functions.\n\n Source: [require-await](https://eslint.org/docs/latest/rules/require-await)\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n async function fetchData() {\n // Missing `await` for the promise returned by `fetch`\n   return fetch('/data');\n }\n ```\n\n ### Valid\n\n ```js\n async function fetchData() {\n   const response = await fetch('/data');\n   const data = await response.json();\n   return data;\n }\n\n // This rule does not warn about non-async functions\n function processData() {\n   return compute(data);\n }\n\n // Nor does it warn about empty `async` functions\n async function noop() { }\n ```\n" , }) , "useBlockStatements" => Some (RuleMetadata {
 name : "useBlockStatements" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : None , docs : " Requires following curly brace conventions.\n\n JavaScript allows the omission of curly braces when a block contains only one statement. However, it is considered by many to be best practice to never omit curly braces around blocks, even when they are optional, because it can lead to bugs and reduces code clarity.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n  if (x) x;\n ```\n\n ```js,expect_diagnostic\n  if (x) {\n    x;\n  } else y;\n ```\n\n ```js,expect_diagnostic\n if (x) {\n   x;\n } else if (y) y;\n ```\n\n ```js,expect_diagnostic\n    for (;;);\n ```\n\n ```js,expect_diagnostic\n    for (p in obj);\n ```\n\n ```js,expect_diagnostic\n   for (x of xs);\n ```\n\n ```js,expect_diagnostic\n   do;\n   while (x);\n ```\n\n ```js,expect_diagnostic\n    while (x);\n ```\n\n ```js,expect_diagnostic\n   with (x);\n ```\n" , }) , "useButtonType" => Some (RuleMetadata {
 name : "useButtonType" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforces the usage of the attribute `type` for the element `button`\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <button>Do something</button>\n ```\n\n ```jsx,expect_diagnostic\n <button type=\"incorrectType\">Do something</button>\n ```\n\n ```js,expect_diagnostic\n React.createElement('button');\n ```\n\n ## Valid\n\n ```jsx\n <>\n     <button type=\"button\">Do something</button>\n     <button type={buttonType}>Do something</button>\n </>\n ```\n" , }) , "useCollapsedElseIf" => Some (RuleMetadata {
 name : "useCollapsedElseIf" , version : "1.1.0" , fix_kind : Some (FixKind :: Safe) , recommended : false , deprecated : None , docs : " Enforce using `else if` instead of nested `if` in `else` clauses.\n\n If an `if` statement is the only statement in the `else` block, it is often clearer to use an `else if` form.\n\n Source: https://eslint.org/docs/latest/rules/no-lonely-if\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n if (condition) {\n     // ...\n } else {\n     if (anotherCondition) {\n         // ...\n     }\n }\n ```\n\n ```js,expect_diagnostic\n if (condition) {\n     // ...\n } else {\n     if (anotherCondition) {\n         // ...\n     } else {\n         // ...\n     }\n }\n ```\n\n ```js,expect_diagnostic\n if (condition) {\n     // ...\n } else {\n     // Comment\n     if (anotherCondition) {\n         // ...\n     }\n }\n ```\n\n ### Valid\n\n ```js\n if (condition) {\n     // ...\n } else if (anotherCondition) {\n     // ...\n }\n ```\n\n ```js\n if (condition) {\n     // ...\n } else if (anotherCondition) {\n     // ...\n } else {\n     // ...\n }\n ```\n\n ```js\n if (condition) {\n     // ...\n } else {\n     if (anotherCondition) {\n         // ...\n     }\n     doSomething();\n }\n ```\n\n" , }) , "useConst" => Some (RuleMetadata {
 name : "useConst" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Require `const` declarations for variables that are never reassigned after declared.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n let a = 3;\n console.log(a);\n ```\n\n ```js,expect_diagnostic\n // `a` is redefined (not reassigned) on each loop step.\n for (let a of [1, 2, 3]) {\n     console.log(a);\n }\n ```\n\n ```js,expect_diagnostic\n // `a` is redefined (not reassigned) on each loop step.\n for (let a in [1, 2, 3]) {\n     console.log(a);\n }\n ```\n\n ```js,expect_diagnostic\n let a = 3;\n {\n     let a = 4;\n     a = 2;\n }\n ```\n\n ## Valid\n\n ```js\n let a = 2;\n a = 3;\n console.log(a);\n ```\n\n ```js\n let a = 1, b = 2;\n b = 3;\n ```\n" , }) , "useDefaultParameterLast" => Some (RuleMetadata {
 name : "useDefaultParameterLast" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforce default function parameters and optional function parameters to be last.\n\n Default and optional parameters that precede a required parameter cannot be omitted at call site.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n function f(a = 0, b) {}\n ```\n\n ```js,expect_diagnostic\n function f(a, b = 0, c) {}\n ```\n\n ```ts,expect_diagnostic\n function f(a: number, b?: number, c: number) {}\n ```\n\n ```ts,expect_diagnostic\n class Foo {\n     constructor(readonly a = 10, readonly b: number) {}\n }\n ```\n\n ### Valid\n\n ```js\n function f(a, b = 0) {}\n ```\n\n ```ts\n function f(a: number, b?: number, c = 0) {}\n ```\n\n ```ts\n function f(a: number, b = 0, c?: number) {}\n ```\n\n" , }) , "useDefaultSwitchClauseLast" => Some (RuleMetadata {
 name : "useDefaultSwitchClauseLast" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce default clauses in switch statements to be last\n\n A switch statement can optionally have a default clause.\n\n If present, it’s usually the last clause, but it doesn’t need to be. It is also allowed to put the default clause before all case clauses, or anywhere between.\n The behavior is mostly the same as if it was the last clause.\n\n The default block will be still executed only if there is no match in the case clauses (including those defined after the default),\n but there is also the ability to “fall through” from the default clause to the following clause in the list.\n However, such flow is not common and it would be confusing to the readers.\n\n Even if there is no \"fall through\" logic, it’s still unexpected to see the default clause before or between the case clauses. By convention, it is expected to be the last clause.\n\n Source: https://eslint.org/docs/latest/rules/default-case-last\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n switch (foo) {\n     default:\n         break;\n     case 0:\n         break;\n }\n ```\n\n ```js,expect_diagnostic\n switch (foo) {\n     default:\n         f();\n     case 0:\n         break;\n }\n ```\n\n ```js,expect_diagnostic\n switch (foo) {\n     case 0:\n         break;\n     default:\n     case 1:\n         break;\n }\n ```\n\n ### Valid\n\n ```js\n switch (foo) {\n     case 0:\n         break;\n     case 1:\n     default:\n         break;\n }\n ```\n\n ```js\n switch (foo) {\n     case 0:\n         break;\n }\n ```\n\n" , }) , "useEnumInitializers" => Some (RuleMetadata {
 name : "useEnumInitializers" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Require that each enum member value be explicitly initialized.\n\n _TypeScript_ enums are a practical way to organize semantically related constant values.\n Members of enums that don't have explicit values are by default given sequentially increasing numbers.\n\n When the value of enum members are important,\n allowing implicit values for enum members can cause bugs if enum declarations are modified over time.\n\n Source: https://typescript-eslint.io/rules/prefer-enum-initializers\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n enum Version {\n     V1,\n }\n ```\n\n ```ts,expect_diagnostic\n enum Status {\n     Open = 1,\n     Close,\n }\n ```\n\n ```ts,expect_diagnostic\n enum Color {\n     Red = \"Red\",\n     Green = \"Green\",\n     Blue,\n }\n ```\n\n ### Valid\n\n ```ts\n enum Status {\n     Open = 1,\n     Close = 2,\n }\n ```\n\n ```ts\n enum Color {\n     Red = \"Red\",\n     Green = \"Green\",\n     Blue = \"Blue\",\n }\n ```\n\n ```ts\n declare enum Weather {\n     Rainy,\n     Sunny,\n }\n ```\n" , }) , "useExhaustiveDependencies" => Some (RuleMetadata {
 name : "useExhaustiveDependencies" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce all dependencies are correctly specified in a React hook.\n\n This rule is a port of the rule [react-hooks/exhaustive-deps](https://legacy.reactjs.org/docs/hooks-rules.html#eslint-plugin), and it's meant to target projects that uses React.\n\n If your project _doesn't_ use React, **you shouldn't use this rule**.\n\n The rule will inspect the following **known** hooks:\n\n - `useEffect`\n - `useLayoutEffect`\n - `useInsertionEffect`\n - `useCallback`\n - `useMemo`\n - `useImperativeHandle`\n - `useState`\n - `useReducer`\n - `useRef`\n - `useDebugValue`\n - `useDeferredValue`\n - `useTransition`\n\n If you want to add more hooks to the rule, check the [#options](options).\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n import { useEffect } from \"react\";\n\n function component() {\n     let a = 1;\n     useEffect(() => {\n         console.log(a);\n     }, []);\n }\n ```\n\n ```js,expect_diagnostic\n import { useEffect } from \"react\";\n\n function component() {\n     let b = 1;\n     useEffect(() => {\n     }, [b]);\n }\n ```\n\n ```js,expect_diagnostic\n import { useEffect, useState } from \"react\";\n\n function component() {\n     const [name, setName] = useState();\n     useEffect(() => {\n         console.log(name);\n         setName(\"\");\n     }, [name, setName]);\n }\n ```\n\n ```js,expect_diagnostic\n import { useEffect } from \"react\";\n\n function component() {\n     let a = 1;\n     const b = a + 1;\n     useEffect(() => {\n         console.log(b);\n     }, []);\n }\n ```\n\n ## Valid\n\n ```js\n import { useEffect } from \"react\";\n\n function component() {\n     let a = 1;\n     useEffect(() => {\n         console.log(a);\n     }, [a]);\n }\n ```\n\n ```js\n import { useEffect } from \"react\";\n\n function component() {\n     const a = 1;\n     useEffect(() => {\n         console.log(a);\n     });\n }\n ```\n\n ```js\n import { useEffect, useState } from \"react\";\n\n function component() {\n     const [name, setName] = useState();\n     useEffect(() => {\n         console.log(name);\n         setName(\"\");\n     }, [name]);\n }\n ```\n\n ```js\n import { useEffect } from \"react\";\n let outer = false;\n function component() {\n     useEffect(() => {\n         outer = true;\n     }, []);\n }\n ```\n\n ## Options\n\n Allows to specify custom hooks - from libraries or internal projects - that can be considered stable.\n\n ```json\n {\n     \"//\": \"...\",\n     \"options\": {\n         \"hooks\": [\n             { \"name\": \"useLocation\", \"closureIndex\": 0, \"dependenciesIndex\": 1},\n             { \"name\": \"useQuery\", \"closureIndex\": 1, \"dependenciesIndex\": 0}\n         ]\n     }\n }\n ```\n\n Given the previous example, your hooks be used like this:\n\n ```js\n function Foo() {\n     const location = useLocation(() => {}, []);\n     const query = useQuery([], () => {});\n }\n ```\n\n" , }) , "useExponentiationOperator" => Some (RuleMetadata {
 name : "useExponentiationOperator" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow the use of `Math.pow` in favor of the `**` operator.\n\n Introduced in ES2016, the infix exponentiation operator `**` is an alternative for the standard `Math.pow` function.\n Infix notation is considered to be more readable and thus more preferable than the function notation.\n\n Source: https://eslint.org/docs/latest/rules/prefer-exponentiation-operator\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const foo = Math.pow(2, 8);\n ```\n\n ```js,expect_diagnostic\n const bar = Math.pow(a, b);\n ```\n\n ```js,expect_diagnostic\n let baz = Math.pow(a + b, c + d);\n ```\n\n ```js,expect_diagnostic\n let quux = Math.pow(-1, n);\n ```\n\n ### Valid\n\n ```js\n const foo = 2 ** 8;\n\n const bar = a ** b;\n\n let baz = (a + b) ** (c + d);\n\n let quux = (-1) ** n;\n ```\n\n" , }) , "useExportType" => Some (RuleMetadata {
 name : "useExportType" , version : "next" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Promotes the use of `export type` for types.\n\n _TypeScript_ allows specifying a `type` marker on an `export` to indicate that the `export` doesn't exist at runtime.\n This allows transpilers to safely drop exports of types without looking for their definition.\n\n The rule ensures that types are exported using a type-only `export`.\n It also groups inline type exports into a grouped `export type`.\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n interface I {}\n export { I };\n ```\n\n ```ts,expect_diagnostic\n type T = number;\n export { T };\n ```\n\n ```ts,expect_diagnostic\n import type { T } from \"./mod.js\";\n export { T };\n ```\n\n ```ts,expect_diagnostic\n export { type X, type Y };\n ```\n\n ## Valid\n\n ```js\n class C {}\n function f() {}\n export { C, f };\n ```\n\n This rules checks only the identifiers that are defined in a file.\n It doesn't warn against a type exported as a value in a re-export clause such as:\n\n ```ts,ignore\n export { TypeA } from \"./mod.ts\"\n ```\n" , }) , "useFlatMap" => Some (RuleMetadata {
 name : "useFlatMap" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Promotes the use of `.flatMap()` when `map().flat()` are used together.\n\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const array = [\"split\", \"the text\", \"into words\"];\n array.map(sentence => sentence.split(' ')).flat();\n ```\n\n ```js,expect_diagnostic\n const array = [\"split\", \"the text\", \"into words\"];\n array.map(sentence => sentence.split(' ')).flat(1);\n ```\n\n ### Valid\n\n ```js\n const array = [\"split\", \"the text\", \"into words\"];\n array.map(sentence => sentence.split(' ')).flat(2);\n ```\n\n" , }) , "useForOf" => Some (RuleMetadata {
 name : "useForOf" , version : "next" , fix_kind : None , recommended : false , deprecated : None , docs : " This rule recommends a `for-of` loop when in a `for` loop, the index used to extract an item from the iterated array.\n\n\n Source: https://typescript-eslint.io/rules/prefer-for-of/\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n for (let i = 0; i < array.length; i++) {\n   console.log(array[i]);\n }\n ```\n\n ## Valid\n\n ```js\n for (let i = 0; i < array.length; i++) {\n    console.log(i, array[i]);\n  }\n ```\n\n ```js\n for (let i = 0, j = 0; i < array.length; i++) {\n    console.log(i, array[i]);\n  }\n ```\n\n" , }) , "useFragmentSyntax" => Some (RuleMetadata {
 name : "useFragmentSyntax" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : None , docs : " This rule enforces the use of `<>...</>` over `<Fragment>...</Fragment>`.\n\n The shorthand fragment syntax saves keystrokes and is only inapplicable when keys are required.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n <Fragment>child</Fragment>\n ```\n\n ```js,expect_diagnostic\n <React.Fragment>child</React.Fragment>\n ```\n" , }) , "useGetterReturn" => Some (RuleMetadata {
 name : "useGetterReturn" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce `get` methods to always return a value.\n\n Source: https://eslint.org/docs/latest/rules/getter-return\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n class Person {\n     get firstName() {}\n }\n ```\n\n ```js,expect_diagnostic\n const obj = {\n     get firstName() {\n         return;\n     }\n }\n ```\n\n ```js,expect_diagnostic\n class Option {\n     get value() {\n         if (this.hasValue) {\n             log();\n         } else {\n             return null;\n         }\n     }\n }\n ```\n\n ## Valid\n\n ```js\n class Person {\n     get firstName() {\n         return this.fullname.split(\" \")[0];\n     }\n }\n ```\n\n ```js\n const obj = {\n     get firstName() {\n         return this.fullname.split(\" \")[0];\n     }\n }\n ```\n\n" , }) , "useGroupedTypeImport" => Some (RuleMetadata {
 name : "useGroupedTypeImport" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforce the use of `import type` when an `import` only has specifiers with `type` qualifier.\n\n The [`--verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig#verbatimModuleSyntax) _TypeScript_'s compiler option causes _TypeScript_ to do simple and predictable transpilation on `import` declarations.\n Namely, it completely removes `import type` and any imported names with the `type` qualifier.\n\n For instance, the following code:\n\n ```ts,expect_diagnostic\n import { type A, type B } from \"mod-1\";\n import type { C, D } from \"mod-2\";\n ```\n\n is transpiled to:\n\n ```ts\n import \"mod-1\";\n ```\n\n Note that, an `import` that includes only names qualified with `type` is transpiled to a [side-effect `import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#import_a_module_for_its_side_effects_only).\n This can be a surprising behavior: most of developers could expect the deletion of the `import`.\n\n This behavior may still be desirable for applying the potential side-effects of the imported module.\n In most cases you will not want to leave behind an unnecessary side effect `import`.\n In teh remaining cases, it is often preferable to explicitly use a side-effect `import` to apply the side-effects of a module:\n\n ```ts\n import \"mod\"; // side-effect import\n import type { A, B } from \"mod\";\n ```\n\n Source: https://typescript-eslint.io/rules/no-import-type-side-effects/\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n import { type A } from \"mod\";\n ```\n\n ## Valid\n\n ```ts\n import type { A, B } from \"mod\";\n ```\n\n ```ts\n import { A, type B } from \"mod\";\n ```\n" , }) , "useHeadingContent" => Some (RuleMetadata {
 name : "useHeadingContent" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce that heading elements (h1, h2, etc.) have content and that the content is accessible to screen readers. Accessible means that it is not hidden using the aria-hidden prop.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <h1 />\n ```\n\n ```jsx,expect_diagnostic\n <h1><div aria-hidden /></h1>\n ```\n\n ```jsx,expect_diagnostic\n <h1></h1>\n ```\n\n ## Valid\n\n ```jsx\n <h1>heading</h1>\n ```\n\n ```jsx\n <h1><div aria-hidden=\"true\"></div>visible content</h1>\n ```\n\n ```jsx\n <h1 dangerouslySetInnerHTML={{ __html: \"heading\" }} />\n ```\n\n ```jsx\n <h1><div aria-hidden />visible content</h1>\n ```\n\n ## Accessibility guidelines\n\n - [WCAG 2.4.6](https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-descriptive.html)\n\n" , }) , "useHookAtTopLevel" => Some (RuleMetadata {
 name : "useHookAtTopLevel" , version : "1.0.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Enforce that all React hooks are being called from the Top Level component functions.\n\n To understand why this required see https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n function Component1({ a }) {\n     if (a == 1) {\n         useEffect();\n     }\n }\n ```\n\n ```js,expect_diagnostic\n function Component1({ a }) {\n     if (a != 1) {\n         return;\n     }\n\n     useEffect();\n }\n ```\n\n ## Valid\n\n ```js\n function Component1() {\n     useEffect();\n }\n ```\n\n ## Options\n\n Allows to specify custom hooks - from libraries or internal projects - that can be considered stable.\n\n ```json\n {\n     \"//\": \"...\",\n     \"options\": {\n         \"hooks\": [\n             { \"name\": \"useLocation\", \"closureIndex\": 0, \"dependenciesIndex\": 1},\n             { \"name\": \"useQuery\", \"closureIndex\": 1, \"dependenciesIndex\": 0}\n         ]\n     }\n }\n ```\n\n Given the previous example, your hooks be used like this:\n\n ```js\n function Foo() {\n     const location = useLocation(() => {}, []);\n     const query = useQuery([], () => {});\n }\n ```\n\n" , }) , "useHtmlLang" => Some (RuleMetadata {
 name : "useHtmlLang" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce that `html` element has `lang` attribute.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <html></html>\n ```\n\n ```jsx,expect_diagnostic\n <html lang={\"\"}></html>\n ```\n\n ```jsx,expect_diagnostic\n <html lang={null}></html>\n ```\n\n ```jsx,expect_diagnostic\n <html lang={undefined}></html>\n ```\n\n ```jsx,expect_diagnostic\n <html lang={true}></html>\n ```\n\n ### Valid\n\n ```jsx\n <html lang=\"en\"></html>\n ```\n\n ```jsx\n <html lang={language}></html>\n ```\n\n ```jsx\n <html {...props}></html>\n ```\n\n ```jsx\n <html lang={\"\"} {...props}></html>\n ```\n\n ## Accessibility guidelines\n\n - [WCAG 3.1.1](https://www.w3.org/WAI/WCAG21/Understanding/language-of-page)\n\n" , }) , "useIframeTitle" => Some (RuleMetadata {
 name : "useIframeTitle" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforces the usage of the attribute `title` for the element `iframe`.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n  <iframe />\n ```\n\n ```jsx,expect_diagnostic\n <iframe></iframe>\n ```\n\n ```jsx,expect_diagnostic\n <iframe title=\"\" />\n ```\n\n ```jsx,expect_diagnostic\n <iframe title={\"\"} />\n ```\n\n ```jsx,expect_diagnostic\n <iframe title={undefined} />\n ```\n\n ```jsx,expect_diagnostic\n <iframe title={false} />\n ```\n\n ```jsx,expect_diagnostic\n <iframe title={true} />\n ```\n\n ```jsx,expect_diagnostic\n <iframe title={42} />\n ```\n\n\n ### Valid\n\n ```jsx\n <>\n   <iframe title=\"This is a unique title\" />\n   <iframe title={uniqueTitle} />\n   <iframe {...props} />\n </>\n ```\n\n ## Accessibility guidelines\n\n - [WCAG 2.4.1](https://www.w3.org/WAI/WCAG21/Understanding/bypass-blocks)\n - [WCAG 4.1.2](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)\n\n" , }) , "useImportRestrictions" => Some (RuleMetadata {
 name : "useImportRestrictions" , version : "1.0.0" , fix_kind : None , recommended : false , deprecated : None , docs : " Disallows package private imports.\n\n This rules enforces the following restrictions:\n\n ## Package private visibility\n\n All exported symbols, such as types, functions or other things that may be exported, are\n considered to be \"package private\". This means that modules that reside in the same\n directory, as well as submodules of those \"sibling\" modules, are allowed to import them,\n while any other modules that are further away in the file system are restricted from\n importing them. A symbol's visibility may be extended by re-exporting from an index file.\n\n Notes:\n\n * This rule only applies to relative imports. External dependencies are exempted.\n * This rule only applies to imports for JavaScript and TypeScript files. Imports for\n   resources such as images or CSS files are exempted.\n\n Source: https://github.com/uhyo/eslint-plugin-import-access\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n // Attempt to import from `foo.js` from outside its `sub` module.\n import { fooPackageVariable } from \"./sub/foo.js\";\n ```\n ```js,expect_diagnostic\n // Attempt to import from `bar.ts` from outside its `aunt` module.\n import { barPackageVariable } from \"../aunt/bar.ts\";\n ```\n\n ```js,expect_diagnostic\n // Assumed to resolve to a JS/TS file.\n import { fooPackageVariable } from \"./sub/foo\";\n ```\n\n ```js,expect_diagnostic\n // If the `sub/foo` module is inaccessible, so is its index file.\n import { fooPackageVariable } from \"./sub/foo/index.js\";\n ```\n\n ### Valid\n\n ```js\n // Imports within the same module are always allowed.\n import { fooPackageVariable } from \"./foo.js\";\n\n // Resources (anything other than JS/TS files) are exempt.\n import { barResource } from \"../aunt/bar.png\";\n\n // A parent index file is accessible like other modules.\n import { internal } from \"../../index.js\";\n\n // If the `sub` module is accessible, so is its index file.\n import { subPackageVariable } from \"./sub/index.js\";\n\n // Library imports are exempt.\n import useAsync from \"react-use/lib/useAsync\";\n ```\n\n" , }) , "useIsArray" => Some (RuleMetadata {
 name : "useIsArray" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Use `Array.isArray()` instead of `instanceof Array`.\n\n In _JavaScript_ some array-like objects such as _arguments_ are not instances of the `Array` class.    ///\n Moreover, the global `Array` class can be different between two execution contexts.\n For instance, two frames in a web browser have a distinct `Array` class.\n Passing arrays across these contexts, results in arrays that are not instances of the contextual global `Array` class.\n To avoid these issues, use `Array.isArray()` instead of `instanceof Array`.\n See the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray) for more details.\n\n Source: https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-instanceof-array.md\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const xs = [];\n if (xs instanceof Array) {}\n ```\n\n ## Valid\n\n ```js\n const xs = [];\n if (Array.isArray(xs)) {}\n ```\n\n" , }) , "useIsNan" => Some (RuleMetadata {
 name : "useIsNan" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Require calls to `isNaN()` when checking for `NaN`.\n\n In JavaScript, `NaN` is a special value of the `Number` type.\n It’s used to represent any of the \"not-a-number\" values represented by the double-precision 64-bit format as specified by the IEEE Standard for Binary Floating-Point Arithmetic.\n\n Because `NaN` is unique in JavaScript by not being equal to anything, including itself, the results of comparisons to `NaN` are confusing:\n - `NaN` === `NaN` or `NaN` == `NaN` evaluate to false\n - `NaN` !== `NaN` or `NaN` != `NaN` evaluate to true\n\n Therefore, use `Number.isNaN()` or global `isNaN()` functions to test whether a value is `NaN`.\n\n Note that `Number.isNaN()` and `isNaN()` [have not the same behavior](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN#description).\n When the argument to `isNaN()` is not a number, the value is first coerced to a number.\n `Number.isNaN()` does not perform this coercion.\n Therefore, it is a more reliable way to test whether a value is `NaN`.\n\n Source: [use-isnan](https://eslint.org/docs/latest/rules/use-isnan).\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n 123 == NaN\n ```\n\n ```js,expect_diagnostic\n 123 != NaN\n ```\n\n ```js,expect_diagnostic\n switch(foo) { case (NaN): break; }\n ```\n\n ```js,expect_diagnostic\n Number.NaN == \"abc\"\n ```\n\n ### Valid\n\n ```js\n if (Number.isNaN(123) !== true) {}\n\n foo(Number.NaN / 2)\n\n switch(foo) {}\n ```\n\n" , }) , "useKeyWithClickEvents" => Some (RuleMetadata {
 name : "useKeyWithClickEvents" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce onClick is accompanied by at least one of the following: `onKeyUp`, `onKeyDown`, `onKeyPress`.\n\n Coding for the keyboard is important for users with physical disabilities who cannot use a mouse, AT compatibility, and screenreader users.\n This does not apply for interactive or hidden elements.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <div onClick={() => {}} />\n ```\n\n ```jsx,expect_diagnostic\n <div onClick={() => {}} ></div>\n ```\n\n ### Valid\n\n ```jsx\n <div onClick={() => {}} onKeyDown={handleKeyDown} />\n```\n\n ```jsx\n <div onClick={() => {}} onKeyUp={handleKeyUp} />\n```\n\n ```jsx\n <div onClick={() => {}} onKeyPress={handleKeyPress} />\n```\n\n ```jsx\n // this rule doesn't apply to user created component\n <MyComponent onClick={() => {}} />\n```\n\n ```jsx,\n <div onClick={() => {}} {...spread}></div>\n ```\n\n ```jsx\n <div {...spread} onClick={() => {}} ></div>\n ```\n\n ```jsx\n <button onClick={() => console.log(\"test\")}>Submit</button>\n ```\n\n ## Accessibility guidelines\n\n - [WCAG 2.1.1](https://www.w3.org/WAI/WCAG21/Understanding/keyboard)\n\n" , }) , "useKeyWithMouseEvents" => Some (RuleMetadata {
 name : "useKeyWithMouseEvents" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce `onMouseOver` / `onMouseOut` are accompanied by `onFocus` / `onBlur`.\n\n Coding for the keyboard is important for users with physical disabilities who cannot use a mouse, AT compatibility, and screenreader users.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <div onMouseOver={() => {}} />\n ```\n\n ```jsx,expect_diagnostic\n <div onMouseOut={() => {}} />\n ```\n\n ### Valid\n\n ```jsx\n <>\n   <div onMouseOver={() => {}} onFocus={() => {}} />\n   <div onMouseOut={() => {}} onBlur={() => {}} />\n   <div onMouseOver={() => {}} {...otherProps} />\n   <div onMouseOut={() => {}} {...otherProps} />\n   <div onMouseOver={() => {}} onFocus={() => {}} {...otherProps} />\n   <div onMouseOut={() => {}} onBlur={() => {}} {...otherProps} />\n </>\n ```\n\n ## Accessibility guidelines\n\n - [WCAG 2.1.1](https://www.w3.org/WAI/WCAG21/Understanding/keyboard)\n\n" , }) , "useLiteralEnumMembers" => Some (RuleMetadata {
 name : "useLiteralEnumMembers" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Require all enum members to be literal values.\n\n Usually, an enum member is initialized with a literal number or a literal string.\n However, _TypeScript_ allows the value of an enum member to be many different kinds of expressions.\n Using a computed enum member is often error-prone and confusing.\n This rule requires the initialization of enum members with constant expressions.\n It allows numeric and bitwise expressions for supporting [enum flags](https://stackoverflow.com/questions/39359740/what-are-enum-flags-in-typescript/39359953#39359953).\n It also allows referencing previous enum members.\n\n Source: https://typescript-eslint.io/rules/prefer-literal-enum-member/\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n const x = 2;\n enum Computed {\n     A,\n     B = x,\n }\n ```\n\n ## Valid\n\n ```ts\n enum Direction {\n     Left,\n     Right,\n }\n ```\n\n ```ts\n enum Order {\n     Less = -1,\n     Equal = 0,\n     Greater = 1,\n }\n ```\n\n ```ts\n enum State {\n     Open = \"Open\",\n     Close = \"Close\",\n }\n ```\n\n ```ts\n enum FileAccess {\n     None = 0,\n     Read = 1,\n     Write = 1 << 1,\n     All = Read | Write\n }\n ```\n" , }) , "useLiteralKeys" => Some (RuleMetadata {
 name : "useLiteralKeys" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforce the usage of a literal access to properties over computed property access.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n a.b[\"c\"];\n ```\n\n ```js,expect_diagnostic\n a.c[`d`]\n ```\n\n ```js,expect_diagnostic\n a.c[`d`] = \"something\"\n ```\n\n ```js,expect_diagnostic\n a = {\n \t['b']: d\n }\n ```\n\n ## Valid\n\n ```js\n a[\"c\" + \"d\"];\n a[d.c];\n ```\n\n" , }) , "useMediaCaption" => Some (RuleMetadata {
 name : "useMediaCaption" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforces that `audio` and `video` elements must have a `track` for captions.\n\n **ESLint Equivalent:** [media-has-caption](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/media-has-caption.md)\n\n ## Examples\n\n ### Invalid\n ```jsx,expect_diagnostic\n \t<video />\n ```\n\n ```jsx,expect_diagnostic\n \t<audio>child</audio>\n ```\n\n ### Valid\n\n ```jsx\n \t<audio>\n \t\t<track kind=\"captions\" {...props} />\n \t</audio>\n ```\n\n ```jsx\n \t<video muted {...props}></video>\n ```\n" , }) , "useNamespaceKeyword" => Some (RuleMetadata {
 name : "useNamespaceKeyword" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Require using the `namespace` keyword over the `module` keyword to declare TypeScript namespaces.\n\n TypeScript historically allowed a code organization called _namespace_.\n [_ECMAScript modules_ are preferred](https://www.typescriptlang.org/docs/handbook/2/modules.html#typescript-namespaces) (`import` / `export`).\n\n For projects still using _namespaces_, it's preferred to use the `namespace` keyword instead of the `module` keyword.\n The `module` keyword is deprecated to avoid any confusion with the _ECMAScript modules_ which are often called _modules_.\n\n Note that TypeScript `module` declarations to describe external APIs (`declare module \"foo\" {}`) are still allowed.\n\n Source: https://typescript-eslint.io/rules/prefer-namespace-keyword\n\n See also: https://www.typescriptlang.org/docs/handbook/namespaces-and-modules.html\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n module Example {}\n ```\n\n ## Valid\n\n ```ts\n namespace Example {}\n ```\n\n ```ts\n declare module \"foo\" {}\n ```\n\n" , }) , "useNamingConvention" => Some (RuleMetadata {
 name : "useNamingConvention" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : false , deprecated : None , docs : " Enforce naming conventions for everything across a codebase.\n\n Enforcing [naming conventions](https://en.wikipedia.org/wiki/Naming_convention_(programming)) helps to keep the codebase consistent,\n and reduces overhead when thinking about the name [case] of a variable.\n\n ## Naming conventions\n\n All names can be prefixed and suffixed by underscores `_` and dollar signs `$`.\n\n ### Variable names\n\n All variables, including function parameters and catch parameters, are in [`camelCase`].\n\n Additionally, top-level variables declared as `const` or `var` may be in [`CONSTANT_CASE`] or [`PascalCase`].\n Top-level variables are declared at module or script level.\n Variables declared in a TypeScript `module` or `namespace` are also considered top-level.\n\n ```js\n function f(param, _unusedParam) {\n     let localValue = 0;\n     try {\n         /* ... */\n     } catch (customError) {\n         /* ... */\n     }\n }\n\n export const A_CONSTANT = 5;\n\n export const Person = class {}\n\n let aVariable = 0;\n\n export namespace ns {\n     export const ANOTHER_CONSTANT = \"\";\n }\n ```\n\n Examples of incorrect names:\n\n ```js,expect_diagnostic\n let a_value = 0;\n ```\n\n ```js,expect_diagnostic\n const fooYPosition = 0;\n ```\n\n ```js,expect_diagnostic\n function f(FirstParam) {}\n ```\n\n ### Function names\n\n A `function` name is in [`camelCase`] or [`PascalCase`].\n\n ```jsx\n function trimString(s) { /*...*/ }\n\n function Component() {\n     return <div></div>;\n }\n ```\n\n ### TypeScript `enum` names\n\n A _TypeScript_ `enum` name is in [`PascalCase`].\n\n `enum` members are by default in [`PascalCase`].\n However, you can configure the [case] of `enum` members.\n See [options](#options) for more details.\n\n ```ts\n enum Status {\n     Open,\n     Close,\n }\n ```\n\n ### Classes\n\n - A class name is in [`PascalCase`].\n\n - Static property and static getter names are in [`camelCase`] or [`CONSTANT_CASE`].\n\n - Class property and method names are in [`camelCase`].\n\n ```js\n class Person {\n     static MAX_FRIEND_COUNT = 256;\n\n     static get SPECIAL_PERSON_INSTANCE() { /*...*/ }\n\n     initializedProperty = 0;\n\n     specialMethod() {}\n }\n ```\n\n ### TypeScript `type` aliases and `interface`\n\n - A `type` alias or an interface name are in [`PascalCase`].\n\n - Property and method names in a type are in [`camelCase`].\n\n - `readonly` property and getter names can also be in [`CONSTANT_CASE`].\n\n ```ts\n type Named = {\n     readonly fullName: string;\n\n     specialMethod(): void;\n };\n\n interface Named {\n     readonly fullName: string;\n\n     specialMethod(): void;\n }\n\n interface PersonConstructor {\n     readonly MAX_FRIEND_COUNT: number;\n\n     get SPECIAL_PERSON_INSTANCE(): Person;\n\n     new(): Person;\n }\n ```\n\n Examples of an incorrect type alias:\n\n ```ts,expect_diagnostic\n type person = { fullName: string };\n ```\n\n ### Literal object property and method names\n\n Literal object property and method names are in [`camelCase`].\n\n ```js\n const alice = {\n     fullName: \"Alice\",\n }\n ```\n\n Example of an incorrect name:\n\n ```js,expect_diagnostic\n const alice = {\n     FULL_NAME: \"Alice\",\n }\n ```\n\n ### Imported and exported module aliases\n\n Imported and exported module aliases are in [`camelCase`] or [`PascalCase`].\n\n ```js\n import * as myLib from \"my-lib\";\n import * as Framework from \"framework\";\n\n export * as myLib from \"my-lib\";\n export * as Framework from \"framework\";\n ```\n\n `import` and `export` aliases are in [`camelCase`], [`PascalCase`], or [`CONSTANT_CASE`]:\n\n ```js\n import assert, {\n     deepStrictEqual as deepEqual,\n     AssertionError as AssertError\n } from \"node:assert\";\n ```\n\n Examples of an incorrect name:\n\n ```ts,expect_diagnostic\n import * as MY_LIB from \"my-lib\";\n ```\n\n ### TypeScript type parameter names\n\n A _TypeScript_ type parameter name is in [`PascalCase`].\n\n ```ts\n function id<Val>(value: Val): Val { /* ... */}\n ```\n\n ### TypeScript `namespace` names\n\n A _TypeScript_ `namespace` name is in [`camelCase`] or in [`PascalCase`].\n\n ```ts\n namespace mathExtra {\n     /*...*/\n }\n\n namespace MathExtra {\n     /*...*/\n }\n ```\n\n ## Options\n\n The rule provides two options that are detailed in the following subsections.\n\n ```json\n {\n     \"//\": \"...\",\n     \"options\": {\n         \"strictCase\": false,\n         \"enumMemberCase\": \"CONSTANT_CASE\"\n     }\n }\n ```\n\n ### strictCase\n\n When this option is set to `true`, it forbids consecutive uppercase characters in [`camelCase`] and [`PascalCase`].\n For instance,  when the option is set to `true`, `HTTPServer` or `aHTTPServer` will throw an error.\n These names should be renamed to `HttpServer` and `aHttpServer`\n\n When the option is set to `false`, consecutive uppercase characters are allowed.\n `HTTPServer` and `aHTTPServer` are so valid.\n\n Default: `true`\n\n ### enumMemberCase\n\n By default, the rule enforces the naming convention followed by the [TypeScript Compiler team](https://www.typescriptlang.org/docs/handbook/enums.html):\n an `enum` member is in [`PascalCase`].\n\n You can enforce another convention by setting `enumMemberCase` option.\n The supported cases are: [`PascalCase`], [`CONSTANT_CASE`], and [`camelCase`].\n\n [case]: https://en.wikipedia.org/wiki/Naming_convention_(programming)#Examples_of_multiple-word_identifier_formats\n [`camelCase`]: https://en.wikipedia.org/wiki/Camel_case\n [`PascalCase`]: https://en.wikipedia.org/wiki/Camel_case\n [`CONSTANT_CASE`]: https://en.wikipedia.org/wiki/Snake_case\n" , }) , "useNumericLiterals" => Some (RuleMetadata {
 name : "useNumericLiterals" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals\n\n _JavaScript_ provides literal forms for binary, octal, and hexadecimal numbers.\n For example: `0b11`, `0o77`, and `0xff`.\n Using the literal forms enable static code analysis and avoid unnecessary computations.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n parseInt(\"111110111\", 2);\n ```\n\n ```js,expect_diagnostic\n Number.parseInt(\"767\", 8);\n ```\n\n ```js,expect_diagnostic\n Number.parseInt(\"-1f7\", 16);\n ```\n\n ### Valid\n\n ```js\n parseInt(1);\n parseInt(1, 3);\n Number.parseInt(1);\n Number.parseInt(1, 3);\n\n 0b111110111 === 503;\n 0o767 === 503;\n 0x1F7 === 503;\n\n a[parseInt](1,2);\n\n parseInt(foo);\n parseInt(foo, 2);\n Number.parseInt(foo);\n Number.parseInt(foo, 2);\n ```\n" , }) , "useOptionalChain" => Some (RuleMetadata {
 name : "useOptionalChain" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Enforce using concise optional chain instead of chained logical expressions.\n\n TypeScript 3.7 added support for the optional chain operator.\n This operator allows you to safely access properties and methods on objects when they are potentially `null` or `undefined`.\n The optional chain operator only chains when the property value is `null` or `undefined`.\n It is much safer than relying upon logical operator chaining; which chains on any truthy value.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n foo && foo.bar && foo.bar.baz && foo.bar.baz.buzz\n ```\n\n ```js,expect_diagnostic\n foo.bar && foo.bar.baz.buzz\n ```\n\n ```js,expect_diagnostic\n foo !== undefined && foo.bar != undefined && foo.bar.baz !== null && foo.bar.baz.buzz\n ```\n\n ```js,expect_diagnostic\n ((foo || {}).bar || {}).baz;\n ```\n\n ```js,expect_diagnostic\n (await (foo1 || {}).foo2 || {}).foo3;\n ```\n\n ```ts,expect_diagnostic\n (((typeof x) as string) || {}).bar;\n ```\n\n ### Valid\n\n ```js\n foo && bar;\n```\n ```js\n foo || {};\n```\n\n ```js\n (foo = 2 || {}).bar;\n```\n\n ```js\n foo || foo.bar;\n```\n\n ```js\n foo[\"some long\"] && foo[\"some long string\"].baz\n```\n\n" , }) , "useRegexLiterals" => Some (RuleMetadata {
 name : "useRegexLiterals" , version : "1.3.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : None , docs : " Enforce the use of the regular expression literals instead of the RegExp constructor if possible.\n\n There are two ways to create a regular expression:\n - Regular expression literals, e.g., `/abc/u`.\n - The RegExp constructor function, e.g., `new RegExp(\"abc\", \"u\")` .\n\n The constructor function is particularly useful when you want to dynamically generate the pattern,\n because it takes string arguments.\n\n Using regular expression literals avoids some escaping required in a string literal,\n and are easier to analyze statically.\n\n Source: https://eslint.org/docs/latest/rules/prefer-regex-literals/\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n new RegExp(\"abc\", \"u\");\n ```\n\n ## Valid\n\n ```js\n /abc/u;\n\n new RegExp(\"abc\", flags);\n ```\n\n" , }) , "useSelfClosingElements" => Some (RuleMetadata {
 name : "useSelfClosingElements" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Prevent extra closing tags for components without children\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n <div></div>\n ```\n\n ```js,expect_diagnostic\n <Component></Component>\n ```\n\n ```js,expect_diagnostic\n <Foo.bar></Foo.bar>\n ```\n\n ### Valid\n\n ```js\n <div />\n```\n\n ```js\n <div>child</div>\n```\n\n ```js\n <Component />\n```\n\n ```js\n <Component>child</Component>\n```\n\n ```js\n <Foo.bar />\n```\n\n ```js\n <Foo.bar>child</Foo.bar>\n```\n" , }) , "useShorthandArrayType" => Some (RuleMetadata {
 name : "useShorthandArrayType" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : None , docs : " When expressing array types, this rule promotes the usage of `T[]` shorthand instead of `Array<T>`.\n\n ESLint (typescript-eslint) equivalent: [array-type/array-simple](https://typescript-eslint.io/rules/array-type/#array-simple)\n\n ## Examples\n\n ### Invalid\n ```ts,expect_diagnostic\n let invalid: Array<foo>;\n ```\n\n ```ts,expect_diagnostic\n let invalid: Promise<Array<string>>;\n ```\n\n ```ts,expect_diagnostic\n let invalid: Array<Foo<Bar>>;\n ```\n\n ```ts,expect_diagnostic\n let invalid: Array<[number, number]>;\n ```\n\n ```ts,expect_diagnostic\n let invalid: Array<[number, number]>;\n ```\n\n ```ts,expect_diagnostic\n let invalid: ReadonlyArray<string>;\n ```\n\n ### Valid\n\n ```ts\n let valid: Array<Foo | Bar>;\n let valid: Array<keyof Bar>;\n let valid: Array<foo | bar>;\n ```\n" , }) , "useShorthandAssign" => Some (RuleMetadata {
 name : "useShorthandAssign" , version : "1.3.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : None , docs : " Require assignment operator shorthand where possible.\n\n JavaScript provides shorthand operators combining a variable assignment and simple mathematical operation.\n\n Source: https://eslint.org/docs/latest/rules/operator-assignment/\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n a = a + 1;\n ```\n\n ```js,expect_diagnostic\n a = a - 1;\n ```\n\n  ```js,expect_diagnostic\n a = a * 1;\n ```\n\n ## Valid\n\n ```js\n a += 1;\n ```\n\n ```js\n a -= 1;\n ```\n\n  ```js\n a *= 1;\n ```\n" , }) , "useShorthandFunctionType" => Some (RuleMetadata {
 name : "useShorthandFunctionType" , version : "next" , fix_kind : Some (FixKind :: Safe) , recommended : false , deprecated : None , docs : " Enforce using function types instead of object type with call signatures.\n\n TypeScript allows for two common ways to declare a type for a function:\n\n - Function type: `() => string`\n - Object type with a signature: `{ (): string }`\n\n The function type form is generally preferred when possible for being more succinct.\n\n This rule suggests using a function type instead of an interface or object type literal with a single call signature.\n\n Source: https://typescript-eslint.io/rules/prefer-function-type/\n\n ## Examples\n\n ### Invalid\n\n ```ts,expect_diagnostic\n interface Example {\n   (): string;\n }\n ```\n\n ```ts,expect_diagnostic\n function foo(example: { (): number }): number {\n   return example();\n }\n ```\n\n ## Valid\n\n ```ts\n type Example = () => string;\n ```\n\n ```ts\n function foo(example: () => number): number {\n   return bar();\n }\n ```\n\n ```ts\n // returns the function itself, not the `this` argument.\n type ReturnsSelf2 = (arg: string) => ReturnsSelf;\n ```\n\n ```ts\n interface Foo {\n   bar: string;\n }\n interface Bar extends Foo {\n   (): void;\n }\n ```\n\n ```ts\n // multiple call signatures (overloads) is allowed:\n interface Overloaded {\n   (data: string): number;\n   (id: number): string;\n }\n // this is equivalent to Overloaded interface.\n type Intersection = ((data: string) => number) & ((id: number) => string);\n```\n\n" , }) , "useSimpleNumberKeys" => Some (RuleMetadata {
 name : "useSimpleNumberKeys" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Disallow number literal object member names which are not base10 or uses underscore as separator\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n ({ 0x1: 1 });\n ```\n ```js,expect_diagnostic\n ({ 11_1.11: \"ee\" });\n ```\n ```js,expect_diagnostic\n ({ 0o1: 1 });\n ```\n ```js,expect_diagnostic\n ({ 1n: 1 });\n ```\n ```js,expect_diagnostic\n ({ 11_1.11: \"ee\" });\n ```\n\n ## Valid\n\n ```js\n ({ 0: \"zero\" });\n ({ 122: \"integer\" });\n ({ 1.22: \"floating point\" });\n ({ 3.1e12: \"floating point with e\" });\n ```\n\n" , }) , "useSimplifiedLogicExpression" => Some (RuleMetadata {
 name : "useSimplifiedLogicExpression" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : None , docs : " Discard redundant terms from logical expressions.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const boolExp = true;\n const r = true && boolExp;\n ```\n\n ```js,expect_diagnostic\n const boolExp2 = true;\n const r2 = boolExp || true;\n ```\n\n ```js,expect_diagnostic\n const nonNullExp = 123;\n const r3 = null ?? nonNullExp;\n ```\n\n ```js,expect_diagnostic\n const boolExpr1 = true;\n const boolExpr2 = false;\n const r4 = !boolExpr1 || !boolExpr2;\n ```\n\n ### Valid\n ```js\n const boolExpr3 = true;\n const boolExpr4 = false;\n const r5 = !(boolExpr1 && boolExpr2);\n const boolExpr5 = true;\n const boolExpr6 = false;\n ```\n\n" , }) , "useSingleCaseStatement" => Some (RuleMetadata {
 name : "useSingleCaseStatement" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : false , deprecated : None , docs : " Enforces switch clauses have a single statement, emits a quick fix wrapping the statements in a block.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n switch (foo) {\n     case true:\n     case false:\n         let foo = '';\n         foo;\n }\n ```\n\n ### Valid\n\n ```js\n switch (foo) {\n     case true:\n     case false: {\n         let foo = '';\n         foo;\n     }\n }\n ```\n" , }) , "useSingleVarDeclarator" => Some (RuleMetadata {
 name : "useSingleVarDeclarator" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Disallow multiple variable declarations in the same variable statement\n\n In JavaScript, multiple variables can be declared within a single `var`, `const` or `let` declaration.\n It is often considered a best practice to declare every variable separately.\n That is what this rule enforces.\n\n Source: https://eslint.org/docs/latest/rules/one-var\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n let foo = 0, bar, baz;\n ```\n\n ### Valid\n\n ```js\n const foo = 0;\n let bar;\n let baz;\n ```\n\n ```js\n for (let i = 0, x = 1; i < arr.length; i++) {}\n ```\n" , }) , "useTemplate" => Some (RuleMetadata {
 name : "useTemplate" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Prefer template literals over string concatenation.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n const s = foo + \"baz\";\n ```\n\n ```js,expect_diagnostic\n const s = 1 + 2 + \"foo\" + 3;\n ```\n\n ```js,expect_diagnostic\n const s = 1 * 2 + \"foo\";\n ```\n\n ```js,expect_diagnostic\n const s = 1 + \"foo\" + 2 + \"bar\" + \"baz\" + 3;\n ```\n\n ### Valid\n\n ```js\n let s = \"foo\" + \"bar\" + `baz`;\n ```\n\n ```js\n let s = `value: ${1}`;\n ```\n" , }) , "useValidAnchor" => Some (RuleMetadata {
 name : "useValidAnchor" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce that all anchors are valid, and they are navigable elements.\n\n The anchor element (`<a></a>`) - also called **hyperlink** - is an important element\n that allows users to navigate pages, in the same page, same website or on another website.\n\n While before it was possible to attach logic to an anchor element, with the advent of JSX libraries,\n it's now  easier to attach logic to any HTML element, anchors included.\n\n This rule is designed to prevent users to attach logic at the click of anchors, and also makes\n sure that the `href` provided to the anchor element is valid. If the anchor has logic attached to it,\n the rules suggests to turn it to a `button`, because that's likely what the user wants.\n\n Anchor `<a></a>` elements should be used for navigation, while `<button></button>` should be\n used for user interaction.\n\n There are **many reasons** why an anchor should not have a logic and have a correct `href` attribute:\n - it can disrupt the correct flow of the user navigation e.g. a user that wants to open the link\n in another tab, but the default \"click\" behaviour is prevented\n - it can source of invalid links, and crawlers can't navigate the website, risking to penalise\n SEO ranking\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <a href={null}>navigate here</a>\n ```\n ```jsx,expect_diagnostic\n <a href={undefined}>navigate here</a>\n ```\n ```jsx,expect_diagnostic\n <a href>navigate here</a>\n ```\n ```jsx,expect_diagnostic\n <a href=\"javascript:void(0)\">navigate here</a>\n ```\n ```jsx,expect_diagnostic\n <a href=\"https://example.com\" onClick={something}>navigate here</a>\n ```\n ### Valid\n\n ```jsx\n <a href={`https://www.javascript.com`}>navigate here</a>\n ```\n\n ```jsx\n <a href={somewhere}>navigate here</a>\n ```\n\n ```jsx\n <a {...spread}>navigate here</a>\n ```\n\n ## Accessibility guidelines\n\n - [WCAG 2.1.1](https://www.w3.org/WAI/WCAG21/Understanding/keyboard)\n\n" , }) , "useValidAriaProps" => Some (RuleMetadata {
 name : "useValidAriaProps" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Ensures that ARIA properties `aria-*` are all valid.\n\n ## Examples\n\n ### Invalid\n\n ```jsx, expect_diagnostic\n <input className=\"\" aria-labell=\"\" />\n ```\n\n ```jsx,expect_diagnostic\n <div aria-lorem=\"foobar\" />;\n ```\n\n ## Accessibility guidelines\n - [WCAG 4.1.2](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)\n" , }) , "useValidAriaRole" => Some (RuleMetadata {
 name : "useValidAriaRole" , version : "1.4.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " Elements with ARIA roles must use a valid, non-abstract ARIA role.\n\n Source: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/aria-role.md\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n <div role=\"datepicker\"></div>\n ```\n\n ```js,expect_diagnostic\n <div role=\"range\"></div>\n ```\n\n ```js,expect_diagnostic\n <div role=\"\"></div>\n ```\n\n ```js,expect_diagnostic\n <Foo role=\"foo\"></Foo>\n ```\n\n ### Valid\n\n ```js\n <>\n   <div role=\"button\"></div>\n   <div role={role}></div>\n   <div></div>\n </>\n ```\n\n ### Options\n\n ```json\n {\n     \"//\": \"...\",\n     \"options\": {\n         \"allowInvalidRoles\": [\"invalid-role\", \"text\"],\n         \"nonIgnoreDom\": true\n     }\n }\n ```\n\n ## Accessibility guidelines\n\n - [WCAG 4.1.2](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)\n\n ## Resources\n\n - [Chrome Audit Rules, AX_ARIA_01](https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#ax_aria_01)\n - [DPUB-ARIA roles](https://www.w3.org/TR/dpub-aria-1.0/)\n - [MDN: Using ARIA: Roles, states, and properties](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques)\n\n" , }) , "useValidAriaValues" => Some (RuleMetadata {
 name : "useValidAriaValues" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce that ARIA state and property values are valid.\n\n\n ## Examples\n\n ### Invalid\n\n ```jsx, expect_diagnostic\n <span role=\"checkbox\" aria-checked=\"test\">some text</span>\n ```\n\n ```jsx, expect_diagnostic\n <span aria-labelledby=\"\">some text</span>\n ```\n\n ```jsx, expect_diagnostic\n <span aria-valuemax=\"hey\">some text</span>\n ```\n\n ```jsx, expect_diagnostic\n <span aria-orientation=\"hey\">some text</span>\n ```\n\n ### Valid\n\n ```jsx\n <>\n     <span role=\"checkbox\" aria-checked={checked} >some text</span>\n     <span aria-labelledby=\"fooId barId\" >some text</span>\n </>\n ```\n\n ## Accessibility guidelines\n - [WCAG 4.1.2](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)\n\n ### Resources\n - [ARIA Spec, States and Properties](https://www.w3.org/TR/wai-aria/#states_and_properties)\n - [Chrome Audit Rules, AX_ARIA_04](https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#ax_aria_04)\n" , }) , "useValidForDirection" => Some (RuleMetadata {
 name : "useValidForDirection" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Enforce \"for\" loop update clause moving the counter in the right direction.\n\n A for loop with a stop condition that can never be reached,\n such as one with a counter that moves in the wrong direction, will run infinitely.\n While there are occasions when an infinite loop is intended, the convention is to construct such loops as while loops.\n More typically, an infinite for loop is a bug.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n for (var i = 0; i < 10; i--) {\n }\n ```\n\n ```js,expect_diagnostic\n for (var i = 10; i >= 0; i++) {\n }\n ```\n\n ```js,expect_diagnostic\n for (var i = 0; i > 10; i++) {\n }\n ```\n\n ### Valid\n\n ```js\n for (var i = 0; i < 10; i++) {\n }\n ```\n" , }) , "useValidLang" => Some (RuleMetadata {
 name : "useValidLang" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Ensure that the attribute passed to the `lang` attribute is a correct ISO language and/or country.\n\n ## Examples\n\n ### Invalid\n\n ```jsx,expect_diagnostic\n <html lang=\"lorem\" />\n ```\n\n ```jsx,expect_diagnostic\n <html lang=\"en-babab\" />\n ```\n\n ```jsx,expect_diagnostic\n <html lang=\"en-GB-typo\" />\n ```\n\n ### Valid\n\n ```jsx\n <Html lang=\"en-babab\" />\n ```\n" , }) , "useValidTypeof" => Some (RuleMetadata {
 name : "useValidTypeof" , version : "1.0.0" , fix_kind : Some (FixKind :: Unsafe) , recommended : true , deprecated : None , docs : " This rule verifies the result of `typeof $expr` unary expressions is being compared to valid values, either string literals containing valid type names or other `typeof` expressions\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n typeof foo === \"strnig\"\n ```\n\n ```js,expect_diagnostic\n typeof foo == \"undefimed\"\n ```\n\n ```js,expect_diagnostic\n typeof bar != \"nunber\"\n ```\n\n ```js,expect_diagnostic\n typeof bar !== \"fucntion\"\n ```\n\n ```js,expect_diagnostic\n typeof foo === undefined\n ```\n\n ```js,expect_diagnostic\n typeof bar == Object\n ```\n\n ```js,expect_diagnostic\n typeof foo === baz\n ```\n\n ```js,expect_diagnostic\n typeof foo == 5\n ```\n\n ```js,expect_diagnostic\n typeof foo == -5\n ```\n\n ### Valid\n\n ```js\n typeof foo === \"string\"\n ```\n\n ```js\n typeof bar == \"undefined\"\n ```\n\n ```js\n typeof bar === typeof qux\n ```\n" , }) , "useWhile" => Some (RuleMetadata {
 name : "useWhile" , version : "1.0.0" , fix_kind : Some (FixKind :: Safe) , recommended : true , deprecated : None , docs : " Enforce the use of `while` loops instead of `for` loops when the initializer and update expressions are not needed.\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n for (; x.running;) {\n     x.step();\n }\n ```\n\n ### Valid\n\n ```js\n for(let x = 0; x < 10; i++) {}\n ```\n\n ```js\n let x = 0\n for(; x < 10; i++) {}\n ```\n\n ```js\n for(let x = 0; x < 10;) {\n     i++\n }\n ```\n" , }) , "useYield" => Some (RuleMetadata {
 name : "useYield" , version : "1.0.0" , fix_kind : None , recommended : true , deprecated : None , docs : " Require generator functions to contain `yield`.\n\n This rule generates warnings for generator functions that do not have the `yield` keyword.\n\n Source: [require-yield](https://eslint.org/docs/latest/rules/require-yield).\n\n ## Examples\n\n ### Invalid\n\n ```js,expect_diagnostic\n function* foo() {\n   return 10;\n }\n ```\n\n ### Valid\n ```js\n function* foo() {\n   yield 5;\n   return 10;\n }\n\n function foo() {\n   return 10;\n }\n\n // This rule does not warn on empty generator functions.\n function* foo() { }\n ```\n" , }) , _ => None , }
}
