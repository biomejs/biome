{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"additionalProperties": false,
	"definitions": {
		"A11y": {
			"additionalProperties": false,
			"description": "A list of rules that belong to this group",
			"properties": {
				"all": {
					"description": "It enables ALL rules for this group.",
					"type": ["boolean", "null"]
				},
				"noAccessKey": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that the accessKey attribute is not used on any HTML element."
				},
				"noAriaHiddenOnFocusable": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that aria-hidden=\"true\" is not set on focusable elements."
				},
				"noAriaUnsupportedElements": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes."
				},
				"noAutofocus": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that autoFocus prop is not used on elements."
				},
				"noBlankTarget": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow target=\"_blank\" attribute without rel=\"noreferrer\""
				},
				"noDistractingElements": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforces that no distracting elements are used."
				},
				"noHeaderScope": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "The scope prop should be used only on \\<th> elements."
				},
				"noInteractiveElementToNoninteractiveRole": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that non-interactive ARIA roles are not assigned to interactive HTML elements."
				},
				"noNoninteractiveElementToInteractiveRole": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that interactive ARIA roles are not assigned to non-interactive HTML elements."
				},
				"noNoninteractiveTabindex": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that tabIndex is not assigned to non-interactive HTML elements."
				},
				"noPositiveTabindex": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevent the usage of positive integers on tabIndex property"
				},
				"noRedundantAlt": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce img alt prop does not contain the word \"image\", \"picture\", or \"photo\"."
				},
				"noRedundantRoles": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce explicit role property is not the same as implicit/default role property on an element."
				},
				"noSvgWithoutTitle": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforces the usage of the title element for the svg element."
				},
				"recommended": {
					"description": "It enables the recommended rules for this group",
					"type": ["boolean", "null"]
				},
				"useAltText": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that all elements that require alternative text have meaningful information to relay back to the end user."
				},
				"useAnchorContent": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that anchors have content and that the content is accessible to screen readers."
				},
				"useAriaActivedescendantWithTabindex": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that tabIndex is assigned to non-interactive HTML elements with aria-activedescendant."
				},
				"useAriaPropsForRole": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that elements with ARIA roles must have all required ARIA attributes for that role."
				},
				"useButtonType": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforces the usage of the attribute type for the element button"
				},
				"useHeadingContent": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that heading elements (h1, h2, etc.) have content and that the content is accessible to screen readers. Accessible means that it is not hidden using the aria-hidden prop."
				},
				"useHtmlLang": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that html element has lang attribute."
				},
				"useIframeTitle": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforces the usage of the attribute title for the element iframe."
				},
				"useKeyWithClickEvents": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce onClick is accompanied by at least one of the following: onKeyUp, onKeyDown, onKeyPress."
				},
				"useKeyWithMouseEvents": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce onMouseOver / onMouseOut are accompanied by onFocus / onBlur."
				},
				"useMediaCaption": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforces that audio and video elements must have a track for captions."
				},
				"useValidAnchor": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that all anchors are valid, and they are navigable elements."
				},
				"useValidAriaProps": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Ensures that ARIA properties aria-* are all valid."
				},
				"useValidAriaRole": {
					"anyOf": [
						{ "$ref": "#/definitions/ValidAriaRoleConfiguration" },
						{ "type": "null" }
					],
					"description": "Elements with ARIA roles must use a valid, non-abstract ARIA role."
				},
				"useValidAriaValues": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that ARIA state and property values are valid."
				},
				"useValidLang": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Ensure that the attribute passed to the lang attribute is a correct ISO language and/or country."
				}
			},
			"type": "object"
		},
		"ArrowParentheses": { "enum": ["always", "asNeeded"] ,"type": "string" },
		"AssistsConfiguration": {
			"additionalProperties": false,
			"properties": {
				"enabled": {
					"description": "Whether Biome should enable assists via LSP.",
					"type": ["boolean", "null"]
				},
				"ignore": {
					"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
					"description": "A list of Unix shell style patterns. The formatter will ignore files/folders that will match these patterns."
				},
				"include": {
					"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
					"description": "A list of Unix shell style patterns. The formatter will include files/folders that will match these patterns."
				},
				"rules": {
					"anyOf": [{ "$ref": "#/definitions/Rules2" }, { "type": "null" }],
					"description": "Whether Biome should fail in CLI if the assists were not applied to the code."
				}
			},
			"type": "object"
		},
		"AttributePosition": { "enum": ["auto", "multiline"] ,"type": "string" },
		"BracketSpacing": { "type": "boolean" },
		"Complexity": {
			"additionalProperties": false,
			"description": "A list of rules that belong to this group",
			"properties": {
				"all": {
					"description": "It enables ALL rules for this group.",
					"type": ["boolean", "null"]
				},
				"noBannedTypes": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow primitive type aliases and misleading types."
				},
				"noEmptyTypeParameters": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow empty type parameters in type aliases and interfaces."
				},
				"noExcessiveCognitiveComplexity": {
					"anyOf": [
						{ "$ref": "#/definitions/ComplexityConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow functions that exceed a given Cognitive Complexity score."
				},
				"noExcessiveNestedTestSuites": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "This rule enforces a maximum depth to nested describe() in test files."
				},
				"noExtraBooleanCast": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unnecessary boolean casts"
				},
				"noForEach": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Prefer for...of statement instead of Array.forEach."
				},
				"noMultipleSpacesInRegularExpressionLiterals": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unclear usage of consecutive space characters in regular expression literals"
				},
				"noStaticOnlyClass": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "This rule reports when a class has no non-static members, such as for a class used exclusively as a static namespace."
				},
				"noThisInStatic": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow this and super in static contexts."
				},
				"noUselessCatch": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unnecessary catch clauses."
				},
				"noUselessConstructor": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unnecessary constructors."
				},
				"noUselessEmptyExport": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow empty exports that don't change anything in a module file."
				},
				"noUselessFragments": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unnecessary fragments"
				},
				"noUselessLabel": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unnecessary labels."
				},
				"noUselessLoneBlockStatements": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unnecessary nested block statements."
				},
				"noUselessRename": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow renaming import, export, and destructured assignments to the same name."
				},
				"noUselessSwitchCase": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow useless case in switch statements."
				},
				"noUselessTernary": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow ternary operators when simpler alternatives exist."
				},
				"noUselessThisAlias": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow useless this aliasing."
				},
				"noUselessTypeConstraint": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow using any or unknown as type constraint."
				},
				"noVoid": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of void operators, which is not a familiar operator."
				},
				"noWith": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow with statements in non-strict contexts."
				},
				"recommended": {
					"description": "It enables the recommended rules for this group",
					"type": ["boolean", "null"]
				},
				"useArrowFunction": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Use arrow functions over function expressions."
				},
				"useFlatMap": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Promotes the use of .flatMap() when map().flat() are used together."
				},
				"useLiteralKeys": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce the usage of a literal access to properties over computed property access."
				},
				"useOptionalChain": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce using concise optional chain instead of chained logical expressions."
				},
				"useRegexLiterals": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce the use of the regular expression literals instead of the RegExp constructor if possible."
				},
				"useSimpleNumberKeys": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow number literal object member names which are not base10 or uses underscore as separator"
				},
				"useSimplifiedLogicExpression": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Discard redundant terms from logical expressions."
				}
			},
			"type": "object"
		},
		"ComplexityConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithComplexityOptions" }
			]
		},
		"ComplexityOptions": {
			"additionalProperties": false,
			"description": "Options for the rule `noExcessiveCognitiveComplexity`.",
			"properties": {
				"maxAllowedComplexity": {
					"description": "The maximum complexity score that we allow. Anything higher is considered excessive.",
					"format": "uint8",
					"minimum": 1.0,
					"type": "integer"
				}
			},
			"required": ["maxAllowedComplexity"],
			"type": "object"
		},
		"ConsistentArrayType": {
			"oneOf": [
				{
					"description": "`ItemType[]`",
					"enum": ["shorthand"],
					"type": "string"
				},
				{
					"description": "`Array<ItemType>`",
					"enum": ["generic"],
					"type": "string"
				}
			]
		},
		"ConsistentArrayTypeConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithConsistentArrayTypeOptions" }
			]
		},
		"ConsistentArrayTypeOptions": {
			"additionalProperties": false,
			"properties": {
				"syntax": { "$ref": "#/definitions/ConsistentArrayType" }
			},
			"required": ["syntax"],
			"type": "object"
		},
		"Convention": {
			"additionalProperties": false,
			"properties": {
				"formats": {
					"allOf": [{ "$ref": "#/definitions/Formats" }],
					"description": "String cases to enforce"
				},
				"match": {
					"anyOf": [{ "$ref": "#/definitions/Regex" }, { "type": "null" }],
					"description": "Regular expression to enforce"
				},
				"selector": {
					"allOf": [{ "$ref": "#/definitions/Selector" }],
					"description": "Declarations concerned by this convention"
				}
			},
			"type": "object"
		},
		"Correctness": {
			"additionalProperties": false,
			"description": "A list of rules that belong to this group",
			"properties": {
				"all": {
					"description": "It enables ALL rules for this group.",
					"type": ["boolean", "null"]
				},
				"noChildrenProp": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevent passing of children as props."
				},
				"noConstAssign": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevents from having const variables being re-assigned."
				},
				"noConstantCondition": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow constant expressions in conditions"
				},
				"noConstantMathMinMaxClamp": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of Math.min and Math.max to clamp a value where the result itself is constant."
				},
				"noConstructorReturn": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow returning a value from a constructor."
				},
				"noEmptyCharacterClassInRegex": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow empty character classes in regular expression literals."
				},
				"noEmptyPattern": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallows empty destructuring patterns."
				},
				"noFlatMapIdentity": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow to use unnecessary callback on flatMap."
				},
				"noGlobalObjectCalls": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow calling global object properties as functions"
				},
				"noInnerDeclarations": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow function and var declarations that are accessible outside their block."
				},
				"noInvalidConstructorSuper": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevents the incorrect use of super() inside classes. It also checks whether a call super() is missing from classes that extends other constructors."
				},
				"noInvalidNewBuiltin": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow new operators with global non-constructor functions."
				},
				"noInvalidUseBeforeDeclaration": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of variables and function parameters before their declaration"
				},
				"noNewSymbol": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow new operators with the Symbol object."
				},
				"noNodejsModules": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Forbid the use of Node.js builtin modules."
				},
				"noNonoctalDecimalEscape": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow \\8 and \\9 escape sequences in string literals."
				},
				"noPrecisionLoss": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow literal numbers that lose precision"
				},
				"noRenderReturnValue": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevent the usage of the return value of React.render."
				},
				"noSelfAssign": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow assignments where both sides are exactly the same."
				},
				"noSetterReturn": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow returning a value from a setter"
				},
				"noStringCaseMismatch": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow comparison of expressions modifying the string case with non-compliant value."
				},
				"noSwitchDeclarations": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow lexical declarations in switch clauses."
				},
				"noUndeclaredVariables": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevents the usage of variables that haven't been declared inside the document."
				},
				"noUnnecessaryContinue": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Avoid using unnecessary continue."
				},
				"noUnreachable": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unreachable code"
				},
				"noUnreachableSuper": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Ensures the super() constructor is called exactly once on every code  path in a class constructor before this is accessed if the class has a superclass"
				},
				"noUnsafeFinally": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow control flow statements in finally blocks."
				},
				"noUnsafeOptionalChaining": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of optional chaining in contexts where the undefined value is not allowed."
				},
				"noUnusedImports": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unused imports."
				},
				"noUnusedLabels": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unused labels."
				},
				"noUnusedPrivateClassMembers": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unused private class members"
				},
				"noUnusedVariables": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unused variables."
				},
				"noVoidElementsWithChildren": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "This rules prevents void elements (AKA self-closing elements) from having children."
				},
				"noVoidTypeReturn": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow returning a value from a function with the return type 'void'"
				},
				"recommended": {
					"description": "It enables the recommended rules for this group",
					"type": ["boolean", "null"]
				},
				"useArrayLiterals": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow Array constructors."
				},
				"useExhaustiveDependencies": {
					"anyOf": [
						{ "$ref": "#/definitions/HooksConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce all dependencies are correctly specified in a React hook."
				},
				"useHookAtTopLevel": {
					"anyOf": [
						{ "$ref": "#/definitions/DeprecatedHooksConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that all React hooks are being called from the Top Level component functions."
				},
				"useIsNan": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Require calls to isNaN() when checking for NaN."
				},
				"useJsxKeyInIterable": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow missing key props in iterators/collection literals."
				},
				"useValidForDirection": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce \"for\" loop update clause moving the counter in the right direction."
				},
				"useYield": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Require generator functions to contain yield."
				}
			},
			"type": "object"
		},
		"CssAssists": {
			"additionalProperties": false,
			"description": "Options that changes how the CSS assists behaves",
			"properties": {
				"enabled": {
					"description": "Control the assists for CSS files.",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"CssConfiguration": {
			"additionalProperties": false,
			"description": "Options applied to CSS files",
			"properties": {
				"assists": {
					"anyOf": [{ "$ref": "#/definitions/CssAssists" }, { "type": "null" }],
					"description": "CSS assists options"
				},
				"formatter": {
					"anyOf": [
						{ "$ref": "#/definitions/CssFormatter" },
						{ "type": "null" }
					],
					"description": "CSS formatter options"
				},
				"linter": {
					"anyOf": [{ "$ref": "#/definitions/CssLinter" }, { "type": "null" }],
					"description": "CSS linter options"
				},
				"parser": {
					"anyOf": [{ "$ref": "#/definitions/CssParser" }, { "type": "null" }],
					"description": "CSS parsing options"
				}
			},
			"type": "object"
		},
		"CssFormatter": {
			"additionalProperties": false,
			"description": "Options that changes how the CSS formatter behaves",
			"properties": {
				"enabled": {
					"description": "Control the formatter for CSS (and its super languages) files.",
					"type": ["boolean", "null"]
				},
				"indentStyle": {
					"anyOf": [
						{ "$ref": "#/definitions/PlainIndentStyle" },
						{ "type": "null" }
					],
					"description": "The indent style applied to CSS (and its super languages) files."
				},
				"indentWidth": {
					"anyOf": [{ "$ref": "#/definitions/IndentWidth" }, { "type": "null" }],
					"description": "The size of the indentation applied to CSS (and its super languages) files. Default to 2."
				},
				"lineEnding": {
					"anyOf": [{ "$ref": "#/definitions/LineEnding" }, { "type": "null" }],
					"description": "The type of line ending applied to CSS (and its super languages) files."
				},
				"lineWidth": {
					"anyOf": [{ "$ref": "#/definitions/LineWidth" }, { "type": "null" }],
					"description": "What's the max width of a line applied to CSS (and its super languages) files. Defaults to 80."
				},
				"quoteStyle": {
					"anyOf": [{ "$ref": "#/definitions/QuoteStyle" }, { "type": "null" }],
					"description": "The type of quotes used in CSS code. Defaults to double."
				}
			},
			"type": "object"
		},
		"CssLinter": {
			"additionalProperties": false,
			"description": "Options that changes how the CSS linter behaves",
			"properties": {
				"enabled": {
					"description": "Control the linter for CSS files.",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"CssParser": {
			"additionalProperties": false,
			"description": "Options that changes how the CSS parser behaves",
			"properties": {
				"allowWrongLineComments": {
					"description": "Allow comments to appear on incorrect lines in `.css` files",
					"type": ["boolean", "null"]
				},
				"cssModules": {
					"description": "Enables parsing of CSS Modules specific features.",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"DeprecatedHooksConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithDeprecatedHooksOptions" }
			]
		},
		"DeprecatedHooksOptions": {
			"additionalProperties": false,
			"description": "Options for the `useHookAtTopLevel` rule have been deprecated, since we now use the React hook naming convention to determine whether a function is a hook.",
			"type": "object"
		},
		"FilenameCase": {
			"description": "Supported cases for file names.",
			"oneOf": [
				{ "description": "camelCase","enum": ["camelCase"] ,"type": "string" },
				{
					"description": "Match an export name",
					"enum": ["export"],
					"type": "string"
				},
				{
					"description": "kebab-case",
					"enum": ["kebab-case"],
					"type": "string"
				},
				{
					"description": "PascalCase",
					"enum": ["PascalCase"],
					"type": "string"
				},
				{
					"description": "snake_case",
					"enum": ["snake_case"],
					"type": "string"
				}
			]
		},
		"FilenameCases": {
			"items": { "$ref": "#/definitions/FilenameCase" },
			"type": "array",
			"uniqueItems": true
		},
		"FilenamingConventionConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithFilenamingConventionOptions" }
			]
		},
		"FilenamingConventionOptions": {
			"additionalProperties": false,
			"description": "Rule's options.",
			"properties": {
				"filenameCases": {
					"allOf": [{ "$ref": "#/definitions/FilenameCases" }],
					"description": "Allowed cases for file names."
				},
				"requireAscii": {
					"description": "If `false`, then non-ASCII characters are allowed.",
					"type": "boolean"
				},
				"strictCase": {
					"description": "If `false`, then consecutive uppercase are allowed in _camel_ and _pascal_ cases. This does not affect other [Case].",
					"type": "boolean"
				}
			},
			"type": "object"
		},
		"FilesConfiguration": {
			"additionalProperties": false,
			"description": "The configuration of the filesystem",
			"properties": {
				"ignore": {
					"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
					"description": "A list of Unix shell style patterns. Biome will ignore files/folders that will match these patterns."
				},
				"ignoreUnknown": {
					"description": "Tells Biome to not emit diagnostics when handling files that doesn't know",
					"type": ["boolean", "null"]
				},
				"include": {
					"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
					"description": "A list of Unix shell style patterns. Biome will handle only those files/folders that will match these patterns."
				},
				"maxSize": {
					"description": "The maximum allowed size for source code files in bytes. Files above this limit will be ignored for performance reasons. Defaults to 1 MiB",
					"format": "uint64",
					"minimum": 1.0,
					"type": ["integer", "null"]
				}
			},
			"type": "object"
		},
		"FixKind": {
			"description": "Used to identify the kind of code action emitted by a rule",
			"oneOf": [
				{
					"description": "The rule doesn't emit code actions.",
					"enum": ["none"],
					"type": "string"
				},
				{
					"description": "The rule emits a code action that is safe to apply. Usually these fixes don't change the semantic of the program.",
					"enum": ["safe"],
					"type": "string"
				},
				{
					"description": "The rule emits a code action that is _unsafe_ to apply. Usually these fixes remove comments, or change the semantic of the program.",
					"enum": ["unsafe"],
					"type": "string"
				}
			]
		},
		"Format": {
			"description": "Supported cases.",
			"enum": ["camelCase", "CONSTANT_CASE", "PascalCase", "snake_case"],
			"type": "string"
		},
		"Formats": {
			"items": { "$ref": "#/definitions/Format" },
			"type": "array",
			"uniqueItems": true
		},
		"FormatterConfiguration": {
			"additionalProperties": false,
			"description": "Generic options applied to all files",
			"properties": {
				"attributePosition": {
					"anyOf": [
						{ "$ref": "#/definitions/AttributePosition" },
						{ "type": "null" }
					],
					"description": "The attribute position style in HTMLish languages. By default auto."
				},
				"bracketSpacing": {
					"anyOf": [
						{ "$ref": "#/definitions/BracketSpacing" },
						{ "type": "null" }
					],
					"description": "Whether to insert spaces around brackets in object literals. Defaults to true."
				},
				"enabled": { "type": ["boolean", "null"] },
				"formatWithErrors": {
					"description": "Stores whether formatting should be allowed to proceed if a given file has syntax errors",
					"type": ["boolean", "null"]
				},
				"ignore": {
					"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
					"description": "A list of Unix shell style patterns. The formatter will ignore files/folders that will match these patterns."
				},
				"include": {
					"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
					"description": "A list of Unix shell style patterns. The formatter will include files/folders that will match these patterns."
				},
				"indentSize": {
					"anyOf": [{ "$ref": "#/definitions/IndentWidth" }, { "type": "null" }],
					"description": "The size of the indentation, 2 by default (deprecated, use `indent-width`)"
				},
				"indentStyle": {
					"anyOf": [
						{ "$ref": "#/definitions/PlainIndentStyle" },
						{ "type": "null" }
					],
					"description": "The indent style."
				},
				"indentWidth": {
					"anyOf": [{ "$ref": "#/definitions/IndentWidth" }, { "type": "null" }],
					"description": "The size of the indentation, 2 by default"
				},
				"lineEnding": {
					"anyOf": [{ "$ref": "#/definitions/LineEnding" }, { "type": "null" }],
					"description": "The type of line ending."
				},
				"lineWidth": {
					"anyOf": [{ "$ref": "#/definitions/LineWidth" }, { "type": "null" }],
					"description": "What's the max width of a line. Defaults to 80."
				},
				"useEditorconfig": {
					"description": "Use any `.editorconfig` files to configure the formatter. Configuration in `biome.json` will override `.editorconfig` configuration. Default: false.",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"GraphqlConfiguration": {
			"additionalProperties": false,
			"description": "Options applied to GraphQL files",
			"properties": {
				"formatter": {
					"anyOf": [
						{ "$ref": "#/definitions/GraphqlFormatter" },
						{ "type": "null" }
					],
					"description": "GraphQL formatter options"
				},
				"linter": {
					"anyOf": [
						{ "$ref": "#/definitions/GraphqlLinter" },
						{ "type": "null" }
					]
				}
			},
			"type": "object"
		},
		"GraphqlFormatter": {
			"additionalProperties": false,
			"description": "Options that changes how the GraphQL formatter behaves",
			"properties": {
				"bracketSpacing": {
					"anyOf": [
						{ "$ref": "#/definitions/BracketSpacing" },
						{ "type": "null" }
					],
					"description": "Whether to insert spaces around brackets in object literals. Defaults to true."
				},
				"enabled": {
					"description": "Control the formatter for GraphQL files.",
					"type": ["boolean", "null"]
				},
				"indentStyle": {
					"anyOf": [
						{ "$ref": "#/definitions/PlainIndentStyle" },
						{ "type": "null" }
					],
					"description": "The indent style applied to GraphQL files."
				},
				"indentWidth": {
					"anyOf": [{ "$ref": "#/definitions/IndentWidth" }, { "type": "null" }],
					"description": "The size of the indentation applied to GraphQL files. Default to 2."
				},
				"lineEnding": {
					"anyOf": [{ "$ref": "#/definitions/LineEnding" }, { "type": "null" }],
					"description": "The type of line ending applied to GraphQL files."
				},
				"lineWidth": {
					"anyOf": [{ "$ref": "#/definitions/LineWidth" }, { "type": "null" }],
					"description": "What's the max width of a line applied to GraphQL files. Defaults to 80."
				},
				"quoteStyle": {
					"anyOf": [{ "$ref": "#/definitions/QuoteStyle" }, { "type": "null" }],
					"description": "The type of quotes used in GraphQL code. Defaults to double."
				}
			},
			"type": "object"
		},
		"GraphqlLinter": {
			"additionalProperties": false,
			"description": "Options that changes how the GraphQL linter behaves",
			"properties": {
				"enabled": {
					"description": "Control the formatter for GraphQL files.",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"Hook": {
			"additionalProperties": false,
			"properties": {
				"closureIndex": {
					"description": "The \"position\" of the closure function, starting from zero.\n\nFor example, for React's `useEffect()` hook, the closure index is 0.",
					"format": "uint8",
					"minimum": 0.0,
					"type": ["integer", "null"]
				},
				"dependenciesIndex": {
					"description": "The \"position\" of the array of dependencies, starting from zero.\n\nFor example, for React's `useEffect()` hook, the dependencies index is 1.",
					"format": "uint8",
					"minimum": 0.0,
					"type": ["integer", "null"]
				},
				"name": { "description": "The name of the hook.", "type": "string" },
				"stableResult": {
					"allOf": [{ "$ref": "#/definitions/StableHookResult" }],
					"description": "Whether the result of the hook is stable.\n\nSet to `true` to mark the identity of the hook's return value as stable, or use a number/an array of numbers to mark the \"positions\" in the return array as stable.\n\nFor example, for React's `useRef()` hook the value would be `true`, while for `useState()` it would be `[1]`."
				}
			},
			"required": ["name", "stableResult"],
			"type": "object"
		},
		"HooksConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithHooksOptions" }
			]
		},
		"HooksOptions": {
			"additionalProperties": false,
			"description": "Options for the rule `useExhaustiveDependencies`",
			"properties": {
				"hooks": {
					"description": "List of hooks of which the dependencies should be validated.",
					"items": { "$ref": "#/definitions/Hook" },
					"type": "array"
				}
			},
			"required": ["hooks"],
			"type": "object"
		},
		"IndentWidth": { "format": "uint8","minimum": 0.0 ,"type": "integer" },
		"JavascriptAssists": {
			"additionalProperties": false,
			"description": "Linter options specific to the JavaScript linter",
			"properties": {
				"enabled": {
					"description": "Control the linter for JavaScript (and its super languages) files.",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"JavascriptConfiguration": {
			"additionalProperties": false,
			"description": "A set of options applied to the JavaScript files",
			"properties": {
				"assists": {
					"anyOf": [
						{ "$ref": "#/definitions/JavascriptAssists" },
						{ "type": "null" }
					],
					"description": "Assists options"
				},
				"formatter": {
					"anyOf": [
						{ "$ref": "#/definitions/JavascriptFormatter" },
						{ "type": "null" }
					],
					"description": "Formatting options"
				},
				"globals": {
					"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
					"description": "A list of global bindings that should be ignored by the analyzers\n\nIf defined here, they should not emit diagnostics."
				},
				"jsxRuntime": {
					"anyOf": [{ "$ref": "#/definitions/JsxRuntime" }, { "type": "null" }],
					"description": "Indicates the type of runtime or transformation used for interpreting JSX."
				},
				"linter": {
					"anyOf": [
						{ "$ref": "#/definitions/JavascriptLinter" },
						{ "type": "null" }
					],
					"description": "Linter options"
				},
				"organizeImports": {
					"anyOf": [
						{ "$ref": "#/definitions/JavascriptOrganizeImports" },
						{ "type": "null" }
					]
				},
				"parser": {
					"anyOf": [
						{ "$ref": "#/definitions/JavascriptParser" },
						{ "type": "null" }
					],
					"description": "Parsing options"
				}
			},
			"type": "object"
		},
		"JavascriptFormatter": {
			"additionalProperties": false,
			"description": "Formatting options specific to the JavaScript files",
			"properties": {
				"arrowParentheses": {
					"anyOf": [
						{ "$ref": "#/definitions/ArrowParentheses" },
						{ "type": "null" }
					],
					"description": "Whether to add non-necessary parentheses to arrow functions. Defaults to \"always\"."
				},
				"attributePosition": {
					"anyOf": [
						{ "$ref": "#/definitions/AttributePosition" },
						{ "type": "null" }
					],
					"description": "The attribute position style in jsx elements. Defaults to auto."
				},
				"bracketSameLine": {
					"description": "Whether to hug the closing bracket of multiline HTML/JSX tags to the end of the last line, rather than being alone on the following line. Defaults to false.",
					"type": ["boolean", "null"]
				},
				"bracketSpacing": {
					"anyOf": [
						{ "$ref": "#/definitions/BracketSpacing" },
						{ "type": "null" }
					],
					"description": "Whether to insert spaces around brackets in object literals. Defaults to true."
				},
				"enabled": {
					"description": "Control the formatter for JavaScript (and its super languages) files.",
					"type": ["boolean", "null"]
				},
				"indentSize": {
					"anyOf": [{ "$ref": "#/definitions/IndentWidth" }, { "type": "null" }],
					"description": "The size of the indentation applied to JavaScript (and its super languages) files. Default to 2."
				},
				"indentStyle": {
					"anyOf": [
						{ "$ref": "#/definitions/PlainIndentStyle" },
						{ "type": "null" }
					],
					"description": "The indent style applied to JavaScript (and its super languages) files."
				},
				"indentWidth": {
					"anyOf": [{ "$ref": "#/definitions/IndentWidth" }, { "type": "null" }],
					"description": "The size of the indentation applied to JavaScript (and its super languages) files. Default to 2."
				},
				"jsxQuoteStyle": {
					"anyOf": [{ "$ref": "#/definitions/QuoteStyle" }, { "type": "null" }],
					"description": "The type of quotes used in JSX. Defaults to double."
				},
				"lineEnding": {
					"anyOf": [{ "$ref": "#/definitions/LineEnding" }, { "type": "null" }],
					"description": "The type of line ending applied to JavaScript (and its super languages) files."
				},
				"lineWidth": {
					"anyOf": [{ "$ref": "#/definitions/LineWidth" }, { "type": "null" }],
					"description": "What's the max width of a line applied to JavaScript (and its super languages) files. Defaults to 80."
				},
				"quoteProperties": {
					"anyOf": [
						{ "$ref": "#/definitions/QuoteProperties" },
						{ "type": "null" }
					],
					"description": "When properties in objects are quoted. Defaults to asNeeded."
				},
				"quoteStyle": {
					"anyOf": [{ "$ref": "#/definitions/QuoteStyle" }, { "type": "null" }],
					"description": "The type of quotes used in JavaScript code. Defaults to double."
				},
				"semicolons": {
					"anyOf": [{ "$ref": "#/definitions/Semicolons" }, { "type": "null" }],
					"description": "Whether the formatter prints semicolons for all statements or only in for statements where it is necessary because of ASI."
				},
				"trailingComma": {
					"anyOf": [
						{ "$ref": "#/definitions/TrailingCommas" },
						{ "type": "null" }
					],
					"description": "Print trailing commas wherever possible in multi-line comma-separated syntactic structures. Defaults to \"all\"."
				},
				"trailingCommas": {
					"anyOf": [
						{ "$ref": "#/definitions/TrailingCommas" },
						{ "type": "null" }
					],
					"description": "Print trailing commas wherever possible in multi-line comma-separated syntactic structures. Defaults to \"all\"."
				}
			},
			"type": "object"
		},
		"JavascriptLinter": {
			"additionalProperties": false,
			"description": "Linter options specific to the JavaScript linter",
			"properties": {
				"enabled": {
					"description": "Control the linter for JavaScript (and its super languages) files.",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"JavascriptOrganizeImports": {
			"additionalProperties": false,
			"type": "object"
		},
		"JavascriptParser": {
			"additionalProperties": false,
			"description": "Options that changes how the JavaScript parser behaves",
			"properties": {
				"unsafeParameterDecoratorsEnabled": {
					"description": "It enables the experimental and unsafe parsing of parameter decorators\n\nThese decorators belong to an old proposal, and they are subject to change.",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"JsonAssists": {
			"additionalProperties": false,
			"description": "Linter options specific to the JSON linter",
			"properties": {
				"enabled": {
					"description": "Control the linter for JSON (and its super languages) files.",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"JsonConfiguration": {
			"additionalProperties": false,
			"description": "Options applied to JSON files",
			"properties": {
				"assists": {
					"anyOf": [{ "$ref": "#/definitions/JsonAssists" }, { "type": "null" }],
					"description": "Assists options"
				},
				"formatter": {
					"anyOf": [
						{ "$ref": "#/definitions/JsonFormatter" },
						{ "type": "null" }
					],
					"description": "Formatting options"
				},
				"linter": {
					"anyOf": [{ "$ref": "#/definitions/JsonLinter" }, { "type": "null" }],
					"description": "Linting options"
				},
				"parser": {
					"anyOf": [{ "$ref": "#/definitions/JsonParser" }, { "type": "null" }],
					"description": "Parsing options"
				}
			},
			"type": "object"
		},
		"JsonFormatter": {
			"additionalProperties": false,
			"properties": {
				"enabled": {
					"description": "Control the formatter for JSON (and its super languages) files.",
					"type": ["boolean", "null"]
				},
				"indentSize": {
					"anyOf": [{ "$ref": "#/definitions/IndentWidth" }, { "type": "null" }],
					"description": "The size of the indentation applied to JSON (and its super languages) files. Default to 2."
				},
				"indentStyle": {
					"anyOf": [
						{ "$ref": "#/definitions/PlainIndentStyle" },
						{ "type": "null" }
					],
					"description": "The indent style applied to JSON (and its super languages) files."
				},
				"indentWidth": {
					"anyOf": [{ "$ref": "#/definitions/IndentWidth" }, { "type": "null" }],
					"description": "The size of the indentation applied to JSON (and its super languages) files. Default to 2."
				},
				"lineEnding": {
					"anyOf": [{ "$ref": "#/definitions/LineEnding" }, { "type": "null" }],
					"description": "The type of line ending applied to JSON (and its super languages) files."
				},
				"lineWidth": {
					"anyOf": [{ "$ref": "#/definitions/LineWidth" }, { "type": "null" }],
					"description": "What's the max width of a line applied to JSON (and its super languages) files. Defaults to 80."
				},
				"trailingCommas": {
					"anyOf": [
						{ "$ref": "#/definitions/TrailingCommas2" },
						{ "type": "null" }
					],
					"description": "Print trailing commas wherever possible in multi-line comma-separated syntactic structures. Defaults to \"none\"."
				}
			},
			"type": "object"
		},
		"JsonLinter": {
			"additionalProperties": false,
			"description": "Linter options specific to the JSON linter",
			"properties": {
				"enabled": {
					"description": "Control the linter for JSON (and its super languages) files.",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"JsonParser": {
			"additionalProperties": false,
			"description": "Options that changes how the JSON parser behaves",
			"properties": {
				"allowComments": {
					"description": "Allow parsing comments in `.json` files",
					"type": ["boolean", "null"]
				},
				"allowTrailingCommas": {
					"description": "Allow parsing trailing commas in `.json` files",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"JsxRuntime": {
			"description": "Indicates the type of runtime or transformation used for interpreting JSX.",
			"oneOf": [
				{
					"description": "Indicates a modern or native JSX environment, that doesn't require special handling by Biome.",
					"enum": ["transparent"],
					"type": "string"
				},
				{
					"description": "Indicates a classic React environment that requires the `React` import.\n\nCorresponds to the `react` value for the `jsx` option in TypeScript's `tsconfig.json`.\n\nThis option should only be necessary if you cannot upgrade to a React version that supports the new JSX runtime. For more information about the old vs. new JSX runtime, please see: <https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html>",
					"enum": ["reactClassic"],
					"type": "string"
				}
			]
		},
		"Kind": {
			"oneOf": [
				{
					"enum": [
						"class",
						"enum",
						"interface",
						"enumMember",
						"importNamespace",
						"exportNamespace",
						"variable",
						"const",
						"let",
						"using",
						"var",
						"catchParameter",
						"indexParameter",
						"exportAlias",
						"importAlias",
						"classGetter",
						"classSetter",
						"classMethod",
						"objectLiteralProperty",
						"objectLiteralGetter",
						"objectLiteralSetter",
						"objectLiteralMethod",
						"typeAlias"
					],
					"type": "string"
				},
				{ "description": "All kinds","enum": ["any"] ,"type": "string" },
				{
					"description": "All type definitions: classes, enums, interfaces, and type aliases",
					"enum": ["typeLike"],
					"type": "string"
				},
				{
					"description": "Named function declarations and expressions",
					"enum": ["function"],
					"type": "string"
				},
				{
					"description": "TypeScript namespaces, import and export namespaces",
					"enum": ["namespaceLike"],
					"type": "string"
				},
				{
					"description": "TypeScript mamespaces",
					"enum": ["namespace"],
					"type": "string"
				},
				{
					"description": "All function parameters, but parameter properties",
					"enum": ["functionParameter"],
					"type": "string"
				},
				{
					"description": "All generic type parameters",
					"enum": ["typeParameter"],
					"type": "string"
				},
				{
					"description": "All class members: properties, methods, getters, and setters",
					"enum": ["classMember"],
					"type": "string"
				},
				{
					"description": "All class properties, including parameter properties",
					"enum": ["classProperty"],
					"type": "string"
				},
				{
					"description": "All object literal members: properties, methods, getters, and setters",
					"enum": ["objectLiteralMember"],
					"type": "string"
				},
				{
					"description": "All members defined in type alaises and interfaces",
					"enum": ["typeMember"],
					"type": "string"
				},
				{
					"description": "All getters defined in type alaises and interfaces",
					"enum": ["typeGetter"],
					"type": "string"
				},
				{
					"description": "All properties defined in type alaises and interfaces",
					"enum": ["typeProperty"],
					"type": "string"
				},
				{
					"description": "All setters defined in type alaises and interfaces",
					"enum": ["typeSetter"],
					"type": "string"
				},
				{
					"description": "All methods defined in type alaises and interfaces",
					"enum": ["typeMethod"],
					"type": "string"
				}
			]
		},
		"LineEnding": {
			"oneOf": [
				{
					"description": "Line Feed only (\\n), common on Linux and macOS as well as inside git repos",
					"enum": ["lf"],
					"type": "string"
				},
				{
					"description": "Carriage Return + Line Feed characters (\\r\\n), common on Windows",
					"enum": ["crlf"],
					"type": "string"
				},
				{
					"description": "Carriage Return character only (\\r), used very rarely",
					"enum": ["cr"],
					"type": "string"
				}
			]
		},
		"LineWidth": {
			"description": "Validated value for the `line_width` formatter options\n\nThe allowed range of values is 1..=320",
			"format": "uint16",
			"minimum": 0.0,
			"type": "integer"
		},
		"LinterConfiguration": {
			"additionalProperties": false,
			"properties": {
				"enabled": {
					"description": "if `false`, it disables the feature and the linter won't be executed. `true` by default",
					"type": ["boolean", "null"]
				},
				"ignore": {
					"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
					"description": "A list of Unix shell style patterns. The formatter will ignore files/folders that will match these patterns."
				},
				"include": {
					"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
					"description": "A list of Unix shell style patterns. The formatter will include files/folders that will match these patterns."
				},
				"rules": {
					"anyOf": [{ "$ref": "#/definitions/Rules" }, { "type": "null" }],
					"description": "List of rules"
				}
			},
			"type": "object"
		},
		"Modifiers": {
			"items": { "$ref": "#/definitions/RestrictedModifier" },
			"type": "array",
			"uniqueItems": true
		},
		"NamingConventionConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithNamingConventionOptions" }
			]
		},
		"NamingConventionOptions": {
			"additionalProperties": false,
			"description": "Rule's options.",
			"properties": {
				"conventions": {
					"description": "Custom conventions.",
					"items": { "$ref": "#/definitions/Convention" },
					"type": "array"
				},
				"enumMemberCase": {
					"allOf": [{ "$ref": "#/definitions/Format" }],
					"description": "Allowed cases for _TypeScript_ `enum` member names."
				},
				"requireAscii": {
					"description": "If `false`, then non-ASCII characters are allowed.",
					"type": "boolean"
				},
				"strictCase": {
					"description": "If `false`, then consecutive uppercase are allowed in _camel_ and _pascal_ cases. This does not affect other [Case].",
					"type": "boolean"
				}
			},
			"type": "object"
		},
		"NoLabelWithoutControlConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithNoLabelWithoutControlOptions" }
			]
		},
		"NoLabelWithoutControlOptions": {
			"additionalProperties": false,
			"properties": {
				"inputComponents": {
					"description": "Array of component names that should be considered the same as an `input` element.",
					"items": { "type": "string" },
					"type": "array"
				},
				"labelAttributes": {
					"description": "Array of attributes that should be treated as the `label` accessible text content.",
					"items": { "type": "string" },
					"type": "array"
				},
				"labelComponents": {
					"description": "Array of component names that should be considered the same as a `label` element.",
					"items": { "type": "string" },
					"type": "array"
				}
			},
			"required": ["inputComponents", "labelAttributes", "labelComponents"],
			"type": "object"
		},
		"Nursery": {
			"additionalProperties": false,
			"description": "A list of rules that belong to this group",
			"properties": {
				"all": {
					"description": "It enables ALL rules for this group.",
					"type": ["boolean", "null"]
				},
				"noConsole": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of console."
				},
				"noDoneCallback": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow using a callback in asynchronous tests and hooks."
				},
				"noDuplicateAtImportRules": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow duplicate @import rules."
				},
				"noDuplicateElseIf": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow duplicate conditions in if-else-if chains"
				},
				"noDuplicateFontNames": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow duplicate names within font families."
				},
				"noDuplicateJsonKeys": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow two keys with the same name inside a JSON object."
				},
				"noDuplicateSelectorsKeyframeBlock": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow duplicate selectors within keyframe blocks."
				},
				"noDuplicatedFields": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "No duplicated fields in GraphQL operations."
				},
				"noDynamicNamespaceImportAccess": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow accessing namespace imports dynamically."
				},
				"noEmptyBlock": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow CSS empty blocks."
				},
				"noEvolvingTypes": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow variables from evolving into any type through reassignments."
				},
				"noExportedImports": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow exporting an imported variable."
				},
				"noImportantInKeyframe": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow invalid !important within keyframe declarations"
				},
				"noInvalidDirectionInLinearGradient": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow non-standard direction values for linear gradient functions."
				},
				"noInvalidPositionAtImportRule": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of @import at-rules in invalid positions."
				},
				"noIrregularWhitespace": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallows the use of irregular whitespace characters."
				},
				"noIrregularWhitespaceCss": {
					"description": "Disallows the use of irregular whitespace.",
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					]
				},
				"noLabelWithoutControl": {
					"anyOf": [
						{ "$ref": "#/definitions/NoLabelWithoutControlConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that a label element or component has a text label and an associated input."
				},
				"noMisplacedAssertion": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Checks that the assertion function, for example expect, is placed inside an it() function call."
				},
				"noReactSpecificProps": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevents React-specific JSX properties from being used."
				},
				"noRestrictedImports": {
					"anyOf": [
						{ "$ref": "#/definitions/RestrictedImportsConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow specified modules when loaded by import or require."
				},
				"noShorthandPropertyOverrides": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow shorthand properties that override related longhand properties."
				},
				"noStaticElementInteractions": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce that static, visible elements (such as \\<div>) that have click handlers use the valid role attribute."
				},
				"noSubstr": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce the use of String.slice() over String.substr() and String.substring()."
				},
				"noUndeclaredDependencies": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of dependencies that aren't specified in the package.json."
				},
				"noUnknownFunction": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unknown CSS value functions."
				},
				"noUnknownMediaFeatureName": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unknown media feature names."
				},
				"noUnknownProperty": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unknown properties."
				},
				"noUnknownPseudoClassSelector": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unknown pseudo-class selectors."
				},
				"noUnknownSelectorPseudoElement": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unknown pseudo-element selectors."
				},
				"noUnknownUnit": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unknown CSS units."
				},
				"noUnmatchableAnbSelector": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unmatchable An+B selectors."
				},
				"noUnusedFunctionParameters": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unused function parameters."
				},
				"noUselessStringConcat": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unnecessary concatenation of string or template literals."
				},
				"noUselessUndefinedInitialization": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow initializing variables to undefined."
				},
				"noValueAtRule": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow use of @value rule in css modules."
				},
				"noYodaExpression": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of yoda expressions."
				},
				"recommended": {
					"description": "It enables the recommended rules for this group",
					"type": ["boolean", "null"]
				},
				"useAdjacentOverloadSignatures": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of overload signatures that are not next to each other."
				},
				"useConsistentBuiltinInstantiation": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce the use of new for all builtins, except String, Number, Boolean, Symbol and BigInt."
				},
				"useConsistentCurlyBraces": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "This rule enforces consistent use of curly braces inside JSX attributes and JSX children."
				},
				"useConsistentGridAreas": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallows invalid named grid areas in CSS Grid Layouts."
				},
				"useDateNow": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Use Date.now() to get the number of milliseconds since the Unix Epoch."
				},
				"useDefaultSwitchClause": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Require the default clause in switch statements."
				},
				"useDeprecatedReason": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Require specifying the reason argument when using @deprecated directive"
				},
				"useErrorMessage": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce passing a message value when creating a built-in error."
				},
				"useExplicitLengthCheck": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce explicitly comparing the length, size, byteLength or byteOffset property of a value."
				},
				"useFocusableInteractive": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Elements with an interactive role and interaction handlers must be focusable."
				},
				"useGenericFontNames": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow a missing generic family keyword within font families."
				},
				"useImportExtensions": {
					"anyOf": [
						{ "$ref": "#/definitions/UseImportExtensionsConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce file extensions for relative imports."
				},
				"useImportRestrictions": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallows package private imports."
				},
				"useNumberToFixedDigitsArgument": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce using the digits argument with Number#toFixed()."
				},
				"useSemanticElements": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "It detects the use of role attributes in JSX elements and suggests using semantic elements instead."
				},
				"useSortedClasses": {
					"anyOf": [
						{ "$ref": "#/definitions/UtilityClassSortingConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce the sorting of CSS utility classes."
				},
				"useStrictMode": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce the use of the directive \"use strict\" in script files."
				},
				"useThrowNewError": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Require new when throwing an error."
				},
				"useThrowOnlyError": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow throwing non-Error values."
				},
				"useTopLevelRegex": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Require regex literals to be declared at the top level."
				},
				"useTrimStartEnd": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce the use of String.trimStart() and String.trimEnd() over String.trimLeft() and String.trimRight()."
				},
				"useValidAutocomplete": {
					"anyOf": [
						{ "$ref": "#/definitions/UseValidAutocompleteConfiguration" },
						{ "type": "null" }
					],
					"description": "Use valid values for the autocomplete attribute on input elements."
				}
			},
			"type": "object"
		},
		"OrganizeImports": {
			"additionalProperties": false,
			"properties": {
				"enabled": {
					"description": "Enables the organization of imports",
					"type": ["boolean", "null"]
				},
				"ignore": {
					"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
					"description": "A list of Unix shell style patterns. The formatter will ignore files/folders that will match these patterns."
				},
				"include": {
					"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
					"description": "A list of Unix shell style patterns. The formatter will include files/folders that will match these patterns."
				}
			},
			"type": "object"
		},
		"OverrideFormatterConfiguration": {
			"additionalProperties": false,
			"properties": {
				"attributePosition": {
					"anyOf": [
						{ "$ref": "#/definitions/AttributePosition" },
						{ "type": "null" }
					],
					"description": "The attribute position style."
				},
				"bracketSpacing": {
					"anyOf": [
						{ "$ref": "#/definitions/BracketSpacing" },
						{ "type": "null" }
					],
					"description": "Whether to insert spaces around brackets in object literals. Defaults to true."
				},
				"enabled": { "type": ["boolean", "null"] },
				"formatWithErrors": {
					"description": "Stores whether formatting should be allowed to proceed if a given file has syntax errors",
					"type": ["boolean", "null"]
				},
				"indentSize": {
					"anyOf": [{ "$ref": "#/definitions/IndentWidth" }, { "type": "null" }],
					"description": "The size of the indentation, 2 by default (deprecated, use `indent-width`)"
				},
				"indentStyle": {
					"anyOf": [
						{ "$ref": "#/definitions/PlainIndentStyle" },
						{ "type": "null" }
					],
					"description": "The indent style."
				},
				"indentWidth": {
					"anyOf": [{ "$ref": "#/definitions/IndentWidth" }, { "type": "null" }],
					"description": "The size of the indentation, 2 by default"
				},
				"lineEnding": {
					"anyOf": [{ "$ref": "#/definitions/LineEnding" }, { "type": "null" }],
					"description": "The type of line ending."
				},
				"lineWidth": {
					"anyOf": [{ "$ref": "#/definitions/LineWidth" }, { "type": "null" }],
					"description": "What's the max width of a line. Defaults to 80."
				}
			},
			"type": "object"
		},
		"OverrideLinterConfiguration": {
			"additionalProperties": false,
			"properties": {
				"enabled": {
					"description": "if `false`, it disables the feature and the linter won't be executed. `true` by default",
					"type": ["boolean", "null"]
				},
				"rules": {
					"anyOf": [{ "$ref": "#/definitions/Rules" }, { "type": "null" }],
					"description": "List of rules"
				}
			},
			"type": "object"
		},
		"OverrideOrganizeImportsConfiguration": {
			"additionalProperties": false,
			"properties": {
				"enabled": {
					"description": "if `false`, it disables the feature and the linter won't be executed. `true` by default",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"OverridePattern": {
			"additionalProperties": false,
			"properties": {
				"css": {
					"anyOf": [
						{ "$ref": "#/definitions/CssConfiguration" },
						{ "type": "null" }
					],
					"description": "Specific configuration for the Css language"
				},
				"formatter": {
					"anyOf": [
						{ "$ref": "#/definitions/OverrideFormatterConfiguration" },
						{ "type": "null" }
					],
					"description": "Specific configuration for the Json language"
				},
				"graphql": {
					"anyOf": [
						{ "$ref": "#/definitions/GraphqlConfiguration" },
						{ "type": "null" }
					],
					"description": "Specific configuration for the Graphql language"
				},
				"ignore": {
					"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
					"description": "A list of Unix shell style patterns. The formatter will ignore files/folders that will match these patterns."
				},
				"include": {
					"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
					"description": "A list of Unix shell style patterns. The formatter will include files/folders that will match these patterns."
				},
				"javascript": {
					"anyOf": [
						{ "$ref": "#/definitions/JavascriptConfiguration" },
						{ "type": "null" }
					],
					"description": "Specific configuration for the JavaScript language"
				},
				"json": {
					"anyOf": [
						{ "$ref": "#/definitions/JsonConfiguration" },
						{ "type": "null" }
					],
					"description": "Specific configuration for the Json language"
				},
				"linter": {
					"anyOf": [
						{ "$ref": "#/definitions/OverrideLinterConfiguration" },
						{ "type": "null" }
					],
					"description": "Specific configuration for the Json language"
				},
				"organizeImports": {
					"anyOf": [
						{ "$ref": "#/definitions/OverrideOrganizeImportsConfiguration" },
						{ "type": "null" }
					],
					"description": "Specific configuration for the Json language"
				}
			},
			"type": "object"
		},
		"Overrides": {
			"items": { "$ref": "#/definitions/OverridePattern" },
			"type": "array"
		},
		"Performance": {
			"additionalProperties": false,
			"description": "A list of rules that belong to this group",
			"properties": {
				"all": {
					"description": "It enables ALL rules for this group.",
					"type": ["boolean", "null"]
				},
				"noAccumulatingSpread": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of spread (...) syntax on accumulators."
				},
				"noBarrelFile": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of barrel file."
				},
				"noDelete": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of the delete operator."
				},
				"noReExportAll": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Avoid re-export all."
				},
				"recommended": {
					"description": "It enables the recommended rules for this group",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"PlainIndentStyle": {
			"oneOf": [
				{ "description": "Tab","enum": ["tab"] ,"type": "string" },
				{ "description": "Space","enum": ["space"] ,"type": "string" }
			]
		},
		"QuoteProperties": { "enum": ["asNeeded", "preserve"] ,"type": "string" },
		"QuoteStyle": { "enum": ["double", "single"] ,"type": "string" },
		"Regex": { "type": "string" },
		"RestrictedGlobalsConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithRestrictedGlobalsOptions" }
			]
		},
		"RestrictedGlobalsOptions": {
			"additionalProperties": false,
			"description": "Options for the rule `noRestrictedGlobals`.",
			"properties": {
				"deniedGlobals": {
					"description": "A list of names that should trigger the rule",
					"items": { "type": "string" },
					"type": "array"
				}
			},
			"required": ["deniedGlobals"],
			"type": "object"
		},
		"RestrictedImportsConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithRestrictedImportsOptions" }
			]
		},
		"RestrictedImportsOptions": {
			"additionalProperties": false,
			"description": "Options for the rule `noRestrictedImports`.",
			"properties": {
				"paths": {
					"additionalProperties": { "type": "string" },
					"description": "A list of names that should trigger the rule",
					"type": "object"
				}
			},
			"required": ["paths"],
			"type": "object"
		},
		"RestrictedModifier": {
			"enum": ["abstract", "private", "protected", "readonly", "static"],
			"type": "string"
		},
		"RuleAssistConfiguration": { "enum": ["on", "off"] ,"type": "string" },
		"RuleConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithNoOptions" }
			]
		},
		"RuleFixConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithFixNoOptions" }
			]
		},
		"RulePlainConfiguration": {
			"enum": ["warn", "error", "info", "off"],
			"type": "string"
		},
		"RuleWithComplexityOptions": {
			"additionalProperties": false,
			"properties": {
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				},
				"options": {
					"allOf": [{ "$ref": "#/definitions/ComplexityOptions" }],
					"description": "Rule's options"
				}
			},
			"required": ["level", "options"],
			"type": "object"
		},
		"RuleWithConsistentArrayTypeOptions": {
			"additionalProperties": false,
			"properties": {
				"fix": {
					"anyOf": [{ "$ref": "#/definitions/FixKind" }, { "type": "null" }],
					"description": "The kind of the code actions emitted by the rule"
				},
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				},
				"options": {
					"allOf": [{ "$ref": "#/definitions/ConsistentArrayTypeOptions" }],
					"description": "Rule's options"
				}
			},
			"required": ["level", "options"],
			"type": "object"
		},
		"RuleWithDeprecatedHooksOptions": {
			"additionalProperties": false,
			"properties": {
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				},
				"options": {
					"allOf": [{ "$ref": "#/definitions/DeprecatedHooksOptions" }],
					"description": "Rule's options"
				}
			},
			"required": ["level", "options"],
			"type": "object"
		},
		"RuleWithFilenamingConventionOptions": {
			"additionalProperties": false,
			"properties": {
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				},
				"options": {
					"allOf": [{ "$ref": "#/definitions/FilenamingConventionOptions" }],
					"description": "Rule's options"
				}
			},
			"required": ["level", "options"],
			"type": "object"
		},
		"RuleWithFixNoOptions": {
			"additionalProperties": false,
			"properties": {
				"fix": {
					"anyOf": [{ "$ref": "#/definitions/FixKind" }, { "type": "null" }],
					"description": "The kind of the code actions emitted by the rule"
				},
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				}
			},
			"required": ["level"],
			"type": "object"
		},
		"RuleWithHooksOptions": {
			"additionalProperties": false,
			"properties": {
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				},
				"options": {
					"allOf": [{ "$ref": "#/definitions/HooksOptions" }],
					"description": "Rule's options"
				}
			},
			"required": ["level", "options"],
			"type": "object"
		},
		"RuleWithNamingConventionOptions": {
			"additionalProperties": false,
			"properties": {
				"fix": {
					"anyOf": [{ "$ref": "#/definitions/FixKind" }, { "type": "null" }],
					"description": "The kind of the code actions emitted by the rule"
				},
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				},
				"options": {
					"allOf": [{ "$ref": "#/definitions/NamingConventionOptions" }],
					"description": "Rule's options"
				}
			},
			"required": ["level", "options"],
			"type": "object"
		},
		"RuleWithNoLabelWithoutControlOptions": {
			"additionalProperties": false,
			"properties": {
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				},
				"options": {
					"allOf": [{ "$ref": "#/definitions/NoLabelWithoutControlOptions" }],
					"description": "Rule's options"
				}
			},
			"required": ["level", "options"],
			"type": "object"
		},
		"RuleWithNoOptions": {
			"additionalProperties": false,
			"properties": {
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				}
			},
			"required": ["level"],
			"type": "object"
		},
		"RuleWithRestrictedGlobalsOptions": {
			"additionalProperties": false,
			"properties": {
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				},
				"options": {
					"allOf": [{ "$ref": "#/definitions/RestrictedGlobalsOptions" }],
					"description": "Rule's options"
				}
			},
			"required": ["level", "options"],
			"type": "object"
		},
		"RuleWithRestrictedImportsOptions": {
			"additionalProperties": false,
			"properties": {
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				},
				"options": {
					"allOf": [{ "$ref": "#/definitions/RestrictedImportsOptions" }],
					"description": "Rule's options"
				}
			},
			"required": ["level", "options"],
			"type": "object"
		},
		"RuleWithUseImportExtensionsOptions": {
			"additionalProperties": false,
			"properties": {
				"fix": {
					"anyOf": [{ "$ref": "#/definitions/FixKind" }, { "type": "null" }],
					"description": "The kind of the code actions emitted by the rule"
				},
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				},
				"options": {
					"allOf": [{ "$ref": "#/definitions/UseImportExtensionsOptions" }],
					"description": "Rule's options"
				}
			},
			"required": ["level", "options"],
			"type": "object"
		},
		"RuleWithUseValidAutocompleteOptions": {
			"additionalProperties": false,
			"properties": {
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				},
				"options": {
					"allOf": [{ "$ref": "#/definitions/UseValidAutocompleteOptions" }],
					"description": "Rule's options"
				}
			},
			"required": ["level", "options"],
			"type": "object"
		},
		"RuleWithUtilityClassSortingOptions": {
			"additionalProperties": false,
			"properties": {
				"fix": {
					"anyOf": [{ "$ref": "#/definitions/FixKind" }, { "type": "null" }],
					"description": "The kind of the code actions emitted by the rule"
				},
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				},
				"options": {
					"allOf": [{ "$ref": "#/definitions/UtilityClassSortingOptions" }],
					"description": "Rule's options"
				}
			},
			"required": ["level", "options"],
			"type": "object"
		},
		"RuleWithValidAriaRoleOptions": {
			"additionalProperties": false,
			"properties": {
				"fix": {
					"anyOf": [{ "$ref": "#/definitions/FixKind" }, { "type": "null" }],
					"description": "The kind of the code actions emitted by the rule"
				},
				"level": {
					"allOf": [{ "$ref": "#/definitions/RulePlainConfiguration" }],
					"description": "The severity of the emitted diagnostics by the rule"
				},
				"options": {
					"allOf": [{ "$ref": "#/definitions/ValidAriaRoleOptions" }],
					"description": "Rule's options"
				}
			},
			"required": ["level", "options"],
			"type": "object"
		},
		"Rules": {
			"additionalProperties": false,
			"properties": {
				"a11y": {
					"anyOf": [{ "$ref": "#/definitions/A11y" }, { "type": "null" }]
				},
				"all": {
					"description": "It enables ALL rules. The rules that belong to `nursery` won't be enabled.",
					"type": ["boolean", "null"]
				},
				"complexity": {
					"anyOf": [{ "$ref": "#/definitions/Complexity" }, { "type": "null" }]
				},
				"correctness": {
					"anyOf": [{ "$ref": "#/definitions/Correctness" }, { "type": "null" }]
				},
				"nursery": {
					"anyOf": [{ "$ref": "#/definitions/Nursery" }, { "type": "null" }]
				},
				"performance": {
					"anyOf": [{ "$ref": "#/definitions/Performance" }, { "type": "null" }]
				},
				"recommended": {
					"description": "It enables the lint rules recommended by Biome. `true` by default.",
					"type": ["boolean", "null"]
				},
				"security": {
					"anyOf": [{ "$ref": "#/definitions/Security" }, { "type": "null" }]
				},
				"style": {
					"anyOf": [{ "$ref": "#/definitions/Style" }, { "type": "null" }]
				},
				"suspicious": {
					"anyOf": [{ "$ref": "#/definitions/Suspicious" }, { "type": "null" }]
				}
			},
			"type": "object"
		},
		"Rules2": {
			"additionalProperties": false,
			"properties": {
				"all": {
					"description": "It enables ALL rules. The rules that belong to `nursery` won't be enabled.",
					"type": ["boolean", "null"]
				},
				"recommended": {
					"description": "It enables the lint rules recommended by Biome. `true` by default.",
					"type": ["boolean", "null"]
				},
				"source": {
					"anyOf": [{ "$ref": "#/definitions/Source" }, { "type": "null" }]
				}
			},
			"type": "object"
		},
		"Scope": { "enum": ["any", "global"] ,"type": "string" },
		"Security": {
			"additionalProperties": false,
			"description": "A list of rules that belong to this group",
			"properties": {
				"all": {
					"description": "It enables ALL rules for this group.",
					"type": ["boolean", "null"]
				},
				"noDangerouslySetInnerHtml": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevent the usage of dangerous JSX props"
				},
				"noDangerouslySetInnerHtmlWithChildren": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Report when a DOM element or a component uses both children and dangerouslySetInnerHTML prop."
				},
				"noGlobalEval": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of global eval()."
				},
				"recommended": {
					"description": "It enables the recommended rules for this group",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		},
		"Selector": {
			"additionalProperties": false,
			"properties": {
				"kind": {
					"allOf": [{ "$ref": "#/definitions/Kind" }],
					"description": "Declaration kind"
				},
				"modifiers": {
					"allOf": [{ "$ref": "#/definitions/Modifiers" }],
					"description": "Modifiers used on the declaration"
				},
				"scope": {
					"allOf": [{ "$ref": "#/definitions/Scope" }],
					"description": "Scope of the declaration"
				}
			},
			"type": "object"
		},
		"Semicolons": { "enum": ["always", "asNeeded"] ,"type": "string" },
		"Source": {
			"additionalProperties": false,
			"description": "A list of rules that belong to this group",
			"properties": {
				"all": {
					"description": "It enables ALL rules for this group.",
					"type": ["boolean", "null"]
				},
				"recommended": {
					"description": "It enables the recommended rules for this group",
					"type": ["boolean", "null"]
				},
				"useSortedKeys": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleAssistConfiguration" },
						{ "type": "null" }
					],
					"description": "Sorts the keys of a JSON object in natural order"
				}
			},
			"type": "object"
		},
		"StableHookResult": {
			"oneOf": [
				{
					"description": "Whether the hook has a stable result.",
					"type": "boolean"
				},
				{
					"description": "Used to indicate the hook returns an array and some of its indices have stable identities.",
					"items": {
						"format": "uint8",
						"maximum": 255.0,
						"minimum": 0.0,
						"type": "integer"
					},
					"minItems": 1,
					"type": "array"
				}
			]
		},
		"StringSet": {
			"items": { "type": "string" },
			"type": "array",
			"uniqueItems": true
		},
		"Style": {
			"additionalProperties": false,
			"description": "A list of rules that belong to this group",
			"properties": {
				"all": {
					"description": "It enables ALL rules for this group.",
					"type": ["boolean", "null"]
				},
				"noArguments": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of arguments."
				},
				"noCommaOperator": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow comma operator."
				},
				"noDefaultExport": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow default exports."
				},
				"noImplicitBoolean": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow implicit true values on JSX boolean attributes"
				},
				"noInferrableTypes": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow type annotations for variables, parameters, and class properties initialized with a literal expression."
				},
				"noNamespace": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of TypeScript's namespaces."
				},
				"noNamespaceImport": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of namespace imports."
				},
				"noNegationElse": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow negation in the condition of an if statement if it has an else clause."
				},
				"noNonNullAssertion": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow non-null assertions using the ! postfix operator."
				},
				"noParameterAssign": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow reassigning function parameters."
				},
				"noParameterProperties": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of parameter properties in class constructors."
				},
				"noRestrictedGlobals": {
					"anyOf": [
						{ "$ref": "#/definitions/RestrictedGlobalsConfiguration" },
						{ "type": "null" }
					],
					"description": "This rule allows you to specify global variable names that you don’t want to use in your application."
				},
				"noShoutyConstants": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of constants which its value is the upper-case version of its name."
				},
				"noUnusedTemplateLiteral": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow template literals if interpolation and special-character handling are not needed"
				},
				"noUselessElse": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow else block when the if block breaks early."
				},
				"noVar": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of var"
				},
				"recommended": {
					"description": "It enables the recommended rules for this group",
					"type": ["boolean", "null"]
				},
				"useAsConstAssertion": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce the use of as const over literal type and type annotation."
				},
				"useBlockStatements": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Requires following curly brace conventions."
				},
				"useCollapsedElseIf": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce using else if instead of nested if in else clauses."
				},
				"useConsistentArrayType": {
					"anyOf": [
						{ "$ref": "#/definitions/ConsistentArrayTypeConfiguration" },
						{ "type": "null" }
					],
					"description": "Require consistently using either T\\[] or Array\\<T>"
				},
				"useConst": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Require const declarations for variables that are only assigned once."
				},
				"useDefaultParameterLast": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce default function parameters and optional function parameters to be last."
				},
				"useEnumInitializers": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Require that each enum member value be explicitly initialized."
				},
				"useExponentiationOperator": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of Math.pow in favor of the ** operator."
				},
				"useExportType": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Promotes the use of export type for types."
				},
				"useFilenamingConvention": {
					"anyOf": [
						{ "$ref": "#/definitions/FilenamingConventionConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce naming conventions for JavaScript and TypeScript filenames."
				},
				"useForOf": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "This rule recommends a for-of loop when in a for loop, the index used to extract an item from the iterated array."
				},
				"useFragmentSyntax": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "This rule enforces the use of \\<>...\\</> over \\<Fragment>...\\</Fragment>."
				},
				"useImportType": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Promotes the use of import type for types."
				},
				"useLiteralEnumMembers": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Require all enum members to be literal values."
				},
				"useNamingConvention": {
					"anyOf": [
						{ "$ref": "#/definitions/NamingConventionConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce naming conventions for everything across a codebase."
				},
				"useNodeAssertStrict": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Promotes the usage of node:assert/strict over node:assert."
				},
				"useNodejsImportProtocol": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforces using the node: protocol for Node.js builtin modules."
				},
				"useNumberNamespace": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Use the Number properties instead of global ones."
				},
				"useNumericLiterals": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals"
				},
				"useSelfClosingElements": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevent extra closing tags for components without children"
				},
				"useShorthandArrayType": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "When expressing array types, this rule promotes the usage of T\\[] shorthand instead of Array\\<T>."
				},
				"useShorthandAssign": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Require assignment operator shorthand where possible."
				},
				"useShorthandFunctionType": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce using function types instead of object type with call signatures."
				},
				"useSingleCaseStatement": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforces switch clauses have a single statement, emits a quick fix wrapping the statements in a block."
				},
				"useSingleVarDeclarator": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow multiple variable declarations in the same variable statement"
				},
				"useTemplate": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Prefer template literals over string concatenation."
				},
				"useWhile": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce the use of while loops instead of for loops when the initializer and update expressions are not needed."
				}
			},
			"type": "object"
		},
		"SuggestedExtensionMapping": {
			"additionalProperties": false,
			"properties": {
				"component": {
					"description": "Extension that should be used for component file imports",
					"type": "string"
				},
				"module": {
					"description": "Extension that should be used for module imports",
					"type": "string"
				}
			},
			"required": ["component", "module"],
			"type": "object"
		},
		"Suspicious": {
			"additionalProperties": false,
			"description": "A list of rules that belong to this group",
			"properties": {
				"all": {
					"description": "It enables ALL rules for this group.",
					"type": ["boolean", "null"]
				},
				"noApproximativeNumericConstant": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Use standard constants instead of approximated literals."
				},
				"noArrayIndexKey": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Discourage the usage of Array index in keys."
				},
				"noAssignInExpressions": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow assignments in expressions."
				},
				"noAsyncPromiseExecutor": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallows using an async function as a Promise executor."
				},
				"noCatchAssign": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow reassigning exceptions in catch clauses."
				},
				"noClassAssign": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow reassigning class members."
				},
				"noCommentText": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevent comments from being inserted as text nodes"
				},
				"noCompareNegZero": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow comparing against -0"
				},
				"noConfusingLabels": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow labeled statements that are not loops."
				},
				"noConfusingVoidType": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow void type outside of generic or return types."
				},
				"noConsoleLog": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of console.log"
				},
				"noConstEnum": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow TypeScript const enum"
				},
				"noControlCharactersInRegex": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevents from having control characters and some escape sequences that match control characters in regular expressions."
				},
				"noDebugger": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the use of debugger"
				},
				"noDoubleEquals": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Require the use of === and !=="
				},
				"noDuplicateCase": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow duplicate case labels."
				},
				"noDuplicateClassMembers": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow duplicate class members."
				},
				"noDuplicateJsxProps": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevents JSX properties to be assigned multiple times."
				},
				"noDuplicateObjectKeys": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevents object literals having more than one property declaration for the same name."
				},
				"noDuplicateParameters": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow duplicate function parameter name."
				},
				"noDuplicateTestHooks": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "A describe block should not contain duplicate hooks."
				},
				"noEmptyBlockStatements": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow empty block statements and static blocks."
				},
				"noEmptyInterface": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the declaration of empty interfaces."
				},
				"noExplicitAny": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow the any type usage."
				},
				"noExportsInTest": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow using export or module.exports in files containing tests"
				},
				"noExtraNonNullAssertion": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevents the wrong usage of the non-null assertion operator (!) in TypeScript files."
				},
				"noFallthroughSwitchClause": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow fallthrough of switch clauses."
				},
				"noFocusedTests": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow focused tests."
				},
				"noFunctionAssign": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow reassigning function declarations."
				},
				"noGlobalAssign": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow assignments to native objects and read-only global variables."
				},
				"noGlobalIsFinite": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Use Number.isFinite instead of global isFinite."
				},
				"noGlobalIsNan": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Use Number.isNaN instead of global isNaN."
				},
				"noImplicitAnyLet": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow use of implicit any type on variable declarations."
				},
				"noImportAssign": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow assigning to imported bindings"
				},
				"noLabelVar": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow labels that share a name with a variable"
				},
				"noMisleadingCharacterClass": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow characters made with multiple code points in character class syntax."
				},
				"noMisleadingInstantiator": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce proper usage of new and constructor."
				},
				"noMisrefactoredShorthandAssign": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow shorthand assign when variable appears on both sides."
				},
				"noPrototypeBuiltins": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow direct use of Object.prototype builtins."
				},
				"noRedeclare": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow variable, function, class, and type redeclarations in the same scope."
				},
				"noRedundantUseStrict": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Prevents from having redundant \"use strict\"."
				},
				"noSelfCompare": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow comparisons where both sides are exactly the same."
				},
				"noShadowRestrictedNames": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow identifiers from shadowing restricted names."
				},
				"noSkippedTests": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow disabled tests."
				},
				"noSparseArray": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow sparse arrays"
				},
				"noSuspiciousSemicolonInJsx": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "It detects possible \"wrong\" semicolons inside JSX elements."
				},
				"noThenProperty": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow then property."
				},
				"noUnsafeDeclarationMerging": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow unsafe declaration merging between interfaces and classes."
				},
				"noUnsafeNegation": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Disallow using unsafe negation."
				},
				"recommended": {
					"description": "It enables the recommended rules for this group",
					"type": ["boolean", "null"]
				},
				"useAwait": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Ensure async functions utilize await."
				},
				"useDefaultSwitchClauseLast": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce default clauses in switch statements to be last"
				},
				"useGetterReturn": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleConfiguration" },
						{ "type": "null" }
					],
					"description": "Enforce get methods to always return a value."
				},
				"useIsArray": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Use Array.isArray() instead of instanceof Array."
				},
				"useNamespaceKeyword": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "Require using the namespace keyword over the module keyword to declare TypeScript namespaces."
				},
				"useValidTypeof": {
					"anyOf": [
						{ "$ref": "#/definitions/RuleFixConfiguration" },
						{ "type": "null" }
					],
					"description": "This rule verifies the result of typeof $expr unary expressions is being compared to valid values, either string literals containing valid type names or other typeof expressions"
				}
			},
			"type": "object"
		},
		"TrailingCommas": {
			"description": "Print trailing commas wherever possible in multi-line comma-separated syntactic structures.",
			"oneOf": [
				{
					"description": "Trailing commas wherever possible (including function parameters and calls).",
					"enum": ["all"],
					"type": "string"
				},
				{
					"description": "Trailing commas where valid in ES5 (objects, arrays, etc.). No trailing commas in type parameters in TypeScript.",
					"enum": ["es5"],
					"type": "string"
				},
				{
					"description": "No trailing commas.",
					"enum": ["none"],
					"type": "string"
				}
			]
		},
		"TrailingCommas2": {
			"oneOf": [
				{
					"description": "The formatter will remove the trailing commas",
					"enum": ["none"],
					"type": "string"
				},
				{
					"description": "The trailing commas are allowed and advised",
					"enum": ["all"],
					"type": "string"
				}
			]
		},
		"UseImportExtensionsConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithUseImportExtensionsOptions" }
			]
		},
		"UseImportExtensionsOptions": {
			"additionalProperties": false,
			"properties": {
				"suggestedExtensions": {
					"additionalProperties": {
						"$ref": "#/definitions/SuggestedExtensionMapping"
					},
					"description": "A map of custom import extension mappings, where the key is the inspected file extension, and the value is a pair of `module` extension and `component` import extension",
					"type": "object"
				}
			},
			"required": ["suggestedExtensions"],
			"type": "object"
		},
		"UseValidAutocompleteConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithUseValidAutocompleteOptions" }
			]
		},
		"UseValidAutocompleteOptions": {
			"additionalProperties": false,
			"properties": {
				"inputComponents": {
					"description": "`input` like custom components that should be checked.",
					"items": { "type": "string" },
					"type": "array"
				}
			},
			"required": ["inputComponents"],
			"type": "object"
		},
		"UtilityClassSortingConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithUtilityClassSortingOptions" }
			]
		},
		"UtilityClassSortingOptions": {
			"additionalProperties": false,
			"properties": {
				"attributes": {
					"description": "Additional attributes that will be sorted.",
					"items": { "type": "string" },
					"type": ["array", "null"]
				},
				"functions": {
					"description": "Names of the functions or tagged templates that will be sorted.",
					"items": { "type": "string" },
					"type": ["array", "null"]
				}
			},
			"type": "object"
		},
		"ValidAriaRoleConfiguration": {
			"anyOf": [
				{ "$ref": "#/definitions/RulePlainConfiguration" },
				{ "$ref": "#/definitions/RuleWithValidAriaRoleOptions" }
			]
		},
		"ValidAriaRoleOptions": {
			"additionalProperties": false,
			"properties": {
				"allowInvalidRoles": { "items": { "type": "string" } ,"type": "array" },
				"ignoreNonDom": { "type": "boolean" }
			},
			"required": ["allowInvalidRoles", "ignoreNonDom"],
			"type": "object"
		},
		"VcsClientKind": {
			"oneOf": [
				{
					"description": "Integration with the git client as VCS",
					"enum": ["git"],
					"type": "string"
				}
			]
		},
		"VcsConfiguration": {
			"additionalProperties": false,
			"description": "Set of properties to integrate Biome with a VCS software.",
			"properties": {
				"clientKind": {
					"anyOf": [
						{ "$ref": "#/definitions/VcsClientKind" },
						{ "type": "null" }
					],
					"description": "The kind of client."
				},
				"defaultBranch": {
					"description": "The main branch of the project",
					"type": ["string", "null"]
				},
				"enabled": {
					"description": "Whether Biome should integrate itself with the VCS client",
					"type": ["boolean", "null"]
				},
				"root": {
					"description": "The folder where Biome should check for VCS files. By default, Biome will use the same folder where `biome.json` was found.\n\nIf Biome can't find the configuration, it will attempt to use the current working directory. If no current working directory can't be found, Biome won't use the VCS integration, and a diagnostic will be emitted",
					"type": ["string", "null"]
				},
				"useIgnoreFile": {
					"description": "Whether Biome should use the VCS ignore file. When [true], Biome will ignore the files specified in the ignore file.",
					"type": ["boolean", "null"]
				}
			},
			"type": "object"
		}
	},
	"description": "The configuration that is contained inside the file `biome.json`",
	"properties": {
		"$schema": {
			"description": "A field for the [JSON schema](https://json-schema.org/) specification",
			"type": ["string", "null"]
		},
		"assists": {
			"anyOf": [
				{ "$ref": "#/definitions/AssistsConfiguration" },
				{ "type": "null" }
			],
			"description": "Specific configuration for assists"
		},
		"css": {
			"anyOf": [
				{ "$ref": "#/definitions/CssConfiguration" },
				{ "type": "null" }
			],
			"description": "Specific configuration for the Css language"
		},
		"extends": {
			"anyOf": [{ "$ref": "#/definitions/StringSet" }, { "type": "null" }],
			"description": "A list of paths to other JSON files, used to extends the current configuration."
		},
		"files": {
			"anyOf": [
				{ "$ref": "#/definitions/FilesConfiguration" },
				{ "type": "null" }
			],
			"description": "The configuration of the filesystem"
		},
		"formatter": {
			"anyOf": [
				{ "$ref": "#/definitions/FormatterConfiguration" },
				{ "type": "null" }
			],
			"description": "The configuration of the formatter"
		},
		"graphql": {
			"anyOf": [
				{ "$ref": "#/definitions/GraphqlConfiguration" },
				{ "type": "null" }
			],
			"description": "Specific configuration for the GraphQL language"
		},
		"javascript": {
			"anyOf": [
				{ "$ref": "#/definitions/JavascriptConfiguration" },
				{ "type": "null" }
			],
			"description": "Specific configuration for the JavaScript language"
		},
		"json": {
			"anyOf": [
				{ "$ref": "#/definitions/JsonConfiguration" },
				{ "type": "null" }
			],
			"description": "Specific configuration for the Json language"
		},
		"linter": {
			"anyOf": [
				{ "$ref": "#/definitions/LinterConfiguration" },
				{ "type": "null" }
			],
			"description": "The configuration for the linter"
		},
		"organizeImports": {
			"anyOf": [{ "$ref": "#/definitions/OrganizeImports" }, { "type": "null" }],
			"description": "The configuration of the import sorting"
		},
		"overrides": {
			"anyOf": [{ "$ref": "#/definitions/Overrides" }, { "type": "null" }],
			"description": "A list of granular patterns that should be applied only to a sub set of files"
		},
		"vcs": {
			"anyOf": [
				{ "$ref": "#/definitions/VcsConfiguration" },
				{ "type": "null" }
			],
			"description": "The configuration of the VCS integration"
		}
	},
	"title": "Configuration",
	"type": "object"
}
